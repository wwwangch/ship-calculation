#######################quartz相关配置###############################
# 在集群中每个实例都必须有一个唯一的instanceId，但是应该有一个相同的instanceName
org.quartz.scheduler.instanceName = quartzScheduler
# Scheduler实例ID，全局唯一
org.quartz.scheduler.instanceId = AUTO
# 是否是集群模式
org.quartz.jobStore.isClustered = true
# 检入到数据库中的频率(毫秒)。检查是否其他的实例到了应当检入的时候未检入这能指出一个失败的实例，且当前Scheduler会以此来接管执行失败并可恢复的Job通过检入操作，Scheduler也会更新自身的状态记录
org.quartz.jobStore.clusterCheckinInterval = 2000

# 如果想quartz-scheduler出口本身通过RMI作为服务器，然后设置“出口”标志true(默认值为false)
org.quartz.scheduler.rmi.export: false
org.quartz.scheduler.rmi.proxy: false
org.quartz.scheduler.wrapJobExecutionInUserTransaction: false

# 线程池的实现类（定长线程池，几乎可满足所有用户的需求
org.quartz.threadPool.class = org.quartz.simpl.SimpleThreadPool
# 指定线程数
org.quartz.threadPool.threadCount = 10
# 线程优先级
org.quartz.threadPool.threadPriority = 5
#org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread = true
#  最大能忍受的触发超时时间(触发器被认定为“misfired”之前)，如果超过则认为“失误”
org.quartz.jobStore.misfireThreshold = 6000

# 任务保存在内存中
#org.quartz.jobStore.class = org.quartz.simpl.RAMJobStore
# 所有的quartz数据例如job和Trigger的细节信息被保存在内存或数据库中,有两种实现：JobStoreTX(自己管理事务)和JobStoreCMT（application server管理事务，即全局事务JTA）
org.quartz.jobStore.class = org.quartz.impl.jdbcjobstore.JobStoreTX
# 类似于Hibernate的dialect，用于处理DB之间的差异，StdJDBCDelegate能满足大部分的DB
org.quartz.jobStore.driverDelegateClass = org.quartz.impl.jdbcjobstore.StdJDBCDelegate
# quartz系统表的前缀
org.quartz.jobStore.tablePrefix = qrtz_
# 存储类型jdbc
org.quartz.jobStoreType=jdbc

org.quartz.jobStore.dataSource=quartzDatasource
org.quartz.dataSource.quartzDatasource.connectionProvider.class=com.iscas.biz.mp.config.quartz.MyConnectionProvider
#org.quartz.dataSource.dmo.driver = com.mysql.jdbc.Driver
#org.quartz.dataSource.dmo.URL = jdbc:mysql://172.16.10.155:3306/dmo?useSSL=false&useUnicode=true&characterEncoding=UTF-8
#org.quartz.dataSource.dmo.user = root
#org.quartz.dataSource.dmo.password = root
#org.quartz.dataSource.dmo.maxConnection = 10
##org.quartz.dataSource.dmo.acquireIncrement=1