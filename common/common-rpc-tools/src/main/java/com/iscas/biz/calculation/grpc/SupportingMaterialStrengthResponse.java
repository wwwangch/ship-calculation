// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: calculation.proto

package com.iscas.biz.calculation.grpc;

/**
 * Protobuf type {@code com.iscas.biz.calculation.grpc.SupportingMaterialStrengthResponse}
 */
public  final class SupportingMaterialStrengthResponse extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:com.iscas.biz.calculation.grpc.SupportingMaterialStrengthResponse)
    SupportingMaterialStrengthResponseOrBuilder {
  // Use SupportingMaterialStrengthResponse.newBuilder() to construct.
  private SupportingMaterialStrengthResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private SupportingMaterialStrengthResponse() {
    upperLoad_ = java.util.Collections.emptyList();
    lowerLoad_ = java.util.Collections.emptyList();
    ziyouZhongwan_ = java.util.Collections.emptyList();
    ziyouShangwan_ = java.util.Collections.emptyList();
    ziyouXiawan_ = java.util.Collections.emptyList();
    ziyouShangjian_ = java.util.Collections.emptyList();
    ziyouXiajian_ = java.util.Collections.emptyList();
    gangxingShangwan_ = java.util.Collections.emptyList();
    gangxingXiawan_ = java.util.Collections.emptyList();
    gangxingShangjian_ = java.util.Collections.emptyList();
    gangxingXiajian_ = java.util.Collections.emptyList();
    yingliZhongying_ = java.util.Collections.emptyList();
    yingliShangying_ = java.util.Collections.emptyList();
    yingliXiaying_ = java.util.Collections.emptyList();
    yingliXuying_ = java.util.Collections.emptyList();
    yingliShangjian_ = java.util.Collections.emptyList();
    yingliXiajian_ = java.util.Collections.emptyList();
    yingliXujian_ = java.util.Collections.emptyList();
    mMaxEl_ = java.util.Collections.emptyList();
    nMaxEl_ = java.util.Collections.emptyList();
    stressMaxEl_ = java.util.Collections.emptyList();
    shearMaxEl_ = java.util.Collections.emptyList();
    code_ = 0;
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
  }
  private SupportingMaterialStrengthResponse(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    int mutable_bitField0_ = 0;
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!input.skipField(tag)) {
              done = true;
            }
            break;
          }
          case 9: {
            if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
              upperLoad_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000001;
            }
            upperLoad_.add(input.readDouble());
            break;
          }
          case 10: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
              upperLoad_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000001;
            }
            while (input.getBytesUntilLimit() > 0) {
              upperLoad_.add(input.readDouble());
            }
            input.popLimit(limit);
            break;
          }
          case 17: {
            if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
              lowerLoad_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000002;
            }
            lowerLoad_.add(input.readDouble());
            break;
          }
          case 18: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
              lowerLoad_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000002;
            }
            while (input.getBytesUntilLimit() > 0) {
              lowerLoad_.add(input.readDouble());
            }
            input.popLimit(limit);
            break;
          }
          case 25: {
            if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
              ziyouZhongwan_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000004;
            }
            ziyouZhongwan_.add(input.readDouble());
            break;
          }
          case 26: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
              ziyouZhongwan_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000004;
            }
            while (input.getBytesUntilLimit() > 0) {
              ziyouZhongwan_.add(input.readDouble());
            }
            input.popLimit(limit);
            break;
          }
          case 33: {
            if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
              ziyouShangwan_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000008;
            }
            ziyouShangwan_.add(input.readDouble());
            break;
          }
          case 34: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
              ziyouShangwan_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000008;
            }
            while (input.getBytesUntilLimit() > 0) {
              ziyouShangwan_.add(input.readDouble());
            }
            input.popLimit(limit);
            break;
          }
          case 41: {
            if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
              ziyouXiawan_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000010;
            }
            ziyouXiawan_.add(input.readDouble());
            break;
          }
          case 42: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000010) == 0x00000010) && input.getBytesUntilLimit() > 0) {
              ziyouXiawan_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000010;
            }
            while (input.getBytesUntilLimit() > 0) {
              ziyouXiawan_.add(input.readDouble());
            }
            input.popLimit(limit);
            break;
          }
          case 49: {
            if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
              ziyouShangjian_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000020;
            }
            ziyouShangjian_.add(input.readDouble());
            break;
          }
          case 50: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
              ziyouShangjian_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000020;
            }
            while (input.getBytesUntilLimit() > 0) {
              ziyouShangjian_.add(input.readDouble());
            }
            input.popLimit(limit);
            break;
          }
          case 57: {
            if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
              ziyouXiajian_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000040;
            }
            ziyouXiajian_.add(input.readDouble());
            break;
          }
          case 58: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
              ziyouXiajian_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000040;
            }
            while (input.getBytesUntilLimit() > 0) {
              ziyouXiajian_.add(input.readDouble());
            }
            input.popLimit(limit);
            break;
          }
          case 65: {
            if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
              gangxingShangwan_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000080;
            }
            gangxingShangwan_.add(input.readDouble());
            break;
          }
          case 66: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000080) == 0x00000080) && input.getBytesUntilLimit() > 0) {
              gangxingShangwan_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000080;
            }
            while (input.getBytesUntilLimit() > 0) {
              gangxingShangwan_.add(input.readDouble());
            }
            input.popLimit(limit);
            break;
          }
          case 73: {
            if (!((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
              gangxingXiawan_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000100;
            }
            gangxingXiawan_.add(input.readDouble());
            break;
          }
          case 74: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000100) == 0x00000100) && input.getBytesUntilLimit() > 0) {
              gangxingXiawan_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000100;
            }
            while (input.getBytesUntilLimit() > 0) {
              gangxingXiawan_.add(input.readDouble());
            }
            input.popLimit(limit);
            break;
          }
          case 81: {
            if (!((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
              gangxingShangjian_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000200;
            }
            gangxingShangjian_.add(input.readDouble());
            break;
          }
          case 82: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000200) == 0x00000200) && input.getBytesUntilLimit() > 0) {
              gangxingShangjian_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000200;
            }
            while (input.getBytesUntilLimit() > 0) {
              gangxingShangjian_.add(input.readDouble());
            }
            input.popLimit(limit);
            break;
          }
          case 89: {
            if (!((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
              gangxingXiajian_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000400;
            }
            gangxingXiajian_.add(input.readDouble());
            break;
          }
          case 90: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000400) == 0x00000400) && input.getBytesUntilLimit() > 0) {
              gangxingXiajian_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000400;
            }
            while (input.getBytesUntilLimit() > 0) {
              gangxingXiajian_.add(input.readDouble());
            }
            input.popLimit(limit);
            break;
          }
          case 97: {
            if (!((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
              yingliZhongying_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000800;
            }
            yingliZhongying_.add(input.readDouble());
            break;
          }
          case 98: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000800) == 0x00000800) && input.getBytesUntilLimit() > 0) {
              yingliZhongying_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000800;
            }
            while (input.getBytesUntilLimit() > 0) {
              yingliZhongying_.add(input.readDouble());
            }
            input.popLimit(limit);
            break;
          }
          case 105: {
            if (!((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
              yingliShangying_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00001000;
            }
            yingliShangying_.add(input.readDouble());
            break;
          }
          case 106: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00001000) == 0x00001000) && input.getBytesUntilLimit() > 0) {
              yingliShangying_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00001000;
            }
            while (input.getBytesUntilLimit() > 0) {
              yingliShangying_.add(input.readDouble());
            }
            input.popLimit(limit);
            break;
          }
          case 113: {
            if (!((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
              yingliXiaying_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00002000;
            }
            yingliXiaying_.add(input.readDouble());
            break;
          }
          case 114: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00002000) == 0x00002000) && input.getBytesUntilLimit() > 0) {
              yingliXiaying_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00002000;
            }
            while (input.getBytesUntilLimit() > 0) {
              yingliXiaying_.add(input.readDouble());
            }
            input.popLimit(limit);
            break;
          }
          case 121: {
            if (!((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
              yingliXuying_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00004000;
            }
            yingliXuying_.add(input.readDouble());
            break;
          }
          case 122: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00004000) == 0x00004000) && input.getBytesUntilLimit() > 0) {
              yingliXuying_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00004000;
            }
            while (input.getBytesUntilLimit() > 0) {
              yingliXuying_.add(input.readDouble());
            }
            input.popLimit(limit);
            break;
          }
          case 129: {
            if (!((mutable_bitField0_ & 0x00008000) == 0x00008000)) {
              yingliShangjian_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00008000;
            }
            yingliShangjian_.add(input.readDouble());
            break;
          }
          case 130: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00008000) == 0x00008000) && input.getBytesUntilLimit() > 0) {
              yingliShangjian_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00008000;
            }
            while (input.getBytesUntilLimit() > 0) {
              yingliShangjian_.add(input.readDouble());
            }
            input.popLimit(limit);
            break;
          }
          case 137: {
            if (!((mutable_bitField0_ & 0x00010000) == 0x00010000)) {
              yingliXiajian_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00010000;
            }
            yingliXiajian_.add(input.readDouble());
            break;
          }
          case 138: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00010000) == 0x00010000) && input.getBytesUntilLimit() > 0) {
              yingliXiajian_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00010000;
            }
            while (input.getBytesUntilLimit() > 0) {
              yingliXiajian_.add(input.readDouble());
            }
            input.popLimit(limit);
            break;
          }
          case 145: {
            if (!((mutable_bitField0_ & 0x00020000) == 0x00020000)) {
              yingliXujian_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00020000;
            }
            yingliXujian_.add(input.readDouble());
            break;
          }
          case 146: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00020000) == 0x00020000) && input.getBytesUntilLimit() > 0) {
              yingliXujian_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00020000;
            }
            while (input.getBytesUntilLimit() > 0) {
              yingliXujian_.add(input.readDouble());
            }
            input.popLimit(limit);
            break;
          }
          case 153: {
            if (!((mutable_bitField0_ & 0x00040000) == 0x00040000)) {
              mMaxEl_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00040000;
            }
            mMaxEl_.add(input.readDouble());
            break;
          }
          case 154: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00040000) == 0x00040000) && input.getBytesUntilLimit() > 0) {
              mMaxEl_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00040000;
            }
            while (input.getBytesUntilLimit() > 0) {
              mMaxEl_.add(input.readDouble());
            }
            input.popLimit(limit);
            break;
          }
          case 161: {
            if (!((mutable_bitField0_ & 0x00080000) == 0x00080000)) {
              nMaxEl_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00080000;
            }
            nMaxEl_.add(input.readDouble());
            break;
          }
          case 162: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00080000) == 0x00080000) && input.getBytesUntilLimit() > 0) {
              nMaxEl_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00080000;
            }
            while (input.getBytesUntilLimit() > 0) {
              nMaxEl_.add(input.readDouble());
            }
            input.popLimit(limit);
            break;
          }
          case 169: {
            if (!((mutable_bitField0_ & 0x00100000) == 0x00100000)) {
              stressMaxEl_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00100000;
            }
            stressMaxEl_.add(input.readDouble());
            break;
          }
          case 170: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00100000) == 0x00100000) && input.getBytesUntilLimit() > 0) {
              stressMaxEl_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00100000;
            }
            while (input.getBytesUntilLimit() > 0) {
              stressMaxEl_.add(input.readDouble());
            }
            input.popLimit(limit);
            break;
          }
          case 177: {
            if (!((mutable_bitField0_ & 0x00200000) == 0x00200000)) {
              shearMaxEl_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00200000;
            }
            shearMaxEl_.add(input.readDouble());
            break;
          }
          case 178: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00200000) == 0x00200000) && input.getBytesUntilLimit() > 0) {
              shearMaxEl_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00200000;
            }
            while (input.getBytesUntilLimit() > 0) {
              shearMaxEl_.add(input.readDouble());
            }
            input.popLimit(limit);
            break;
          }
          case 184: {

            code_ = input.readInt32();
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
        upperLoad_ = java.util.Collections.unmodifiableList(upperLoad_);
      }
      if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
        lowerLoad_ = java.util.Collections.unmodifiableList(lowerLoad_);
      }
      if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
        ziyouZhongwan_ = java.util.Collections.unmodifiableList(ziyouZhongwan_);
      }
      if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
        ziyouShangwan_ = java.util.Collections.unmodifiableList(ziyouShangwan_);
      }
      if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
        ziyouXiawan_ = java.util.Collections.unmodifiableList(ziyouXiawan_);
      }
      if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
        ziyouShangjian_ = java.util.Collections.unmodifiableList(ziyouShangjian_);
      }
      if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
        ziyouXiajian_ = java.util.Collections.unmodifiableList(ziyouXiajian_);
      }
      if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
        gangxingShangwan_ = java.util.Collections.unmodifiableList(gangxingShangwan_);
      }
      if (((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
        gangxingXiawan_ = java.util.Collections.unmodifiableList(gangxingXiawan_);
      }
      if (((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
        gangxingShangjian_ = java.util.Collections.unmodifiableList(gangxingShangjian_);
      }
      if (((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
        gangxingXiajian_ = java.util.Collections.unmodifiableList(gangxingXiajian_);
      }
      if (((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
        yingliZhongying_ = java.util.Collections.unmodifiableList(yingliZhongying_);
      }
      if (((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
        yingliShangying_ = java.util.Collections.unmodifiableList(yingliShangying_);
      }
      if (((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
        yingliXiaying_ = java.util.Collections.unmodifiableList(yingliXiaying_);
      }
      if (((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
        yingliXuying_ = java.util.Collections.unmodifiableList(yingliXuying_);
      }
      if (((mutable_bitField0_ & 0x00008000) == 0x00008000)) {
        yingliShangjian_ = java.util.Collections.unmodifiableList(yingliShangjian_);
      }
      if (((mutable_bitField0_ & 0x00010000) == 0x00010000)) {
        yingliXiajian_ = java.util.Collections.unmodifiableList(yingliXiajian_);
      }
      if (((mutable_bitField0_ & 0x00020000) == 0x00020000)) {
        yingliXujian_ = java.util.Collections.unmodifiableList(yingliXujian_);
      }
      if (((mutable_bitField0_ & 0x00040000) == 0x00040000)) {
        mMaxEl_ = java.util.Collections.unmodifiableList(mMaxEl_);
      }
      if (((mutable_bitField0_ & 0x00080000) == 0x00080000)) {
        nMaxEl_ = java.util.Collections.unmodifiableList(nMaxEl_);
      }
      if (((mutable_bitField0_ & 0x00100000) == 0x00100000)) {
        stressMaxEl_ = java.util.Collections.unmodifiableList(stressMaxEl_);
      }
      if (((mutable_bitField0_ & 0x00200000) == 0x00200000)) {
        shearMaxEl_ = java.util.Collections.unmodifiableList(shearMaxEl_);
      }
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.iscas.biz.calculation.grpc.CalculationProto.internal_static_com_iscas_biz_calculation_grpc_SupportingMaterialStrengthResponse_descriptor;
  }

  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.iscas.biz.calculation.grpc.CalculationProto.internal_static_com_iscas_biz_calculation_grpc_SupportingMaterialStrengthResponse_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.iscas.biz.calculation.grpc.SupportingMaterialStrengthResponse.class, com.iscas.biz.calculation.grpc.SupportingMaterialStrengthResponse.Builder.class);
  }

  private int bitField0_;
  public static final int UPPERLOAD_FIELD_NUMBER = 1;
  private java.util.List<java.lang.Double> upperLoad_;
  /**
   * <pre>
   *上端载荷
   * </pre>
   *
   * <code>repeated double upperLoad = 1;</code>
   */
  public java.util.List<java.lang.Double>
      getUpperLoadList() {
    return upperLoad_;
  }
  /**
   * <pre>
   *上端载荷
   * </pre>
   *
   * <code>repeated double upperLoad = 1;</code>
   */
  public int getUpperLoadCount() {
    return upperLoad_.size();
  }
  /**
   * <pre>
   *上端载荷
   * </pre>
   *
   * <code>repeated double upperLoad = 1;</code>
   */
  public double getUpperLoad(int index) {
    return upperLoad_.get(index);
  }
  private int upperLoadMemoizedSerializedSize = -1;

  public static final int LOWERLOAD_FIELD_NUMBER = 2;
  private java.util.List<java.lang.Double> lowerLoad_;
  /**
   * <pre>
   *下端载荷
   * </pre>
   *
   * <code>repeated double lowerLoad = 2;</code>
   */
  public java.util.List<java.lang.Double>
      getLowerLoadList() {
    return lowerLoad_;
  }
  /**
   * <pre>
   *下端载荷
   * </pre>
   *
   * <code>repeated double lowerLoad = 2;</code>
   */
  public int getLowerLoadCount() {
    return lowerLoad_.size();
  }
  /**
   * <pre>
   *下端载荷
   * </pre>
   *
   * <code>repeated double lowerLoad = 2;</code>
   */
  public double getLowerLoad(int index) {
    return lowerLoad_.get(index);
  }
  private int lowerLoadMemoizedSerializedSize = -1;

  public static final int ZIYOUZHONGWAN_FIELD_NUMBER = 3;
  private java.util.List<java.lang.Double> ziyouZhongwan_;
  /**
   * <pre>
   *自由支持中部弯矩
   * </pre>
   *
   * <code>repeated double ziyouZhongwan = 3;</code>
   */
  public java.util.List<java.lang.Double>
      getZiyouZhongwanList() {
    return ziyouZhongwan_;
  }
  /**
   * <pre>
   *自由支持中部弯矩
   * </pre>
   *
   * <code>repeated double ziyouZhongwan = 3;</code>
   */
  public int getZiyouZhongwanCount() {
    return ziyouZhongwan_.size();
  }
  /**
   * <pre>
   *自由支持中部弯矩
   * </pre>
   *
   * <code>repeated double ziyouZhongwan = 3;</code>
   */
  public double getZiyouZhongwan(int index) {
    return ziyouZhongwan_.get(index);
  }
  private int ziyouZhongwanMemoizedSerializedSize = -1;

  public static final int ZIYOUSHANGWAN_FIELD_NUMBER = 4;
  private java.util.List<java.lang.Double> ziyouShangwan_;
  /**
   * <pre>
   *自由支持上部弯矩
   * </pre>
   *
   * <code>repeated double ziyouShangwan = 4;</code>
   */
  public java.util.List<java.lang.Double>
      getZiyouShangwanList() {
    return ziyouShangwan_;
  }
  /**
   * <pre>
   *自由支持上部弯矩
   * </pre>
   *
   * <code>repeated double ziyouShangwan = 4;</code>
   */
  public int getZiyouShangwanCount() {
    return ziyouShangwan_.size();
  }
  /**
   * <pre>
   *自由支持上部弯矩
   * </pre>
   *
   * <code>repeated double ziyouShangwan = 4;</code>
   */
  public double getZiyouShangwan(int index) {
    return ziyouShangwan_.get(index);
  }
  private int ziyouShangwanMemoizedSerializedSize = -1;

  public static final int ZIYOUXIAWAN_FIELD_NUMBER = 5;
  private java.util.List<java.lang.Double> ziyouXiawan_;
  /**
   * <pre>
   *自由支持下部弯矩
   * </pre>
   *
   * <code>repeated double ziyouXiawan = 5;</code>
   */
  public java.util.List<java.lang.Double>
      getZiyouXiawanList() {
    return ziyouXiawan_;
  }
  /**
   * <pre>
   *自由支持下部弯矩
   * </pre>
   *
   * <code>repeated double ziyouXiawan = 5;</code>
   */
  public int getZiyouXiawanCount() {
    return ziyouXiawan_.size();
  }
  /**
   * <pre>
   *自由支持下部弯矩
   * </pre>
   *
   * <code>repeated double ziyouXiawan = 5;</code>
   */
  public double getZiyouXiawan(int index) {
    return ziyouXiawan_.get(index);
  }
  private int ziyouXiawanMemoizedSerializedSize = -1;

  public static final int ZIYOUSHANGJIAN_FIELD_NUMBER = 6;
  private java.util.List<java.lang.Double> ziyouShangjian_;
  /**
   * <pre>
   *自由支持上部剪力
   * </pre>
   *
   * <code>repeated double ziyouShangjian = 6;</code>
   */
  public java.util.List<java.lang.Double>
      getZiyouShangjianList() {
    return ziyouShangjian_;
  }
  /**
   * <pre>
   *自由支持上部剪力
   * </pre>
   *
   * <code>repeated double ziyouShangjian = 6;</code>
   */
  public int getZiyouShangjianCount() {
    return ziyouShangjian_.size();
  }
  /**
   * <pre>
   *自由支持上部剪力
   * </pre>
   *
   * <code>repeated double ziyouShangjian = 6;</code>
   */
  public double getZiyouShangjian(int index) {
    return ziyouShangjian_.get(index);
  }
  private int ziyouShangjianMemoizedSerializedSize = -1;

  public static final int ZIYOUXIAJIAN_FIELD_NUMBER = 7;
  private java.util.List<java.lang.Double> ziyouXiajian_;
  /**
   * <pre>
   *自由支持下部剪力
   * </pre>
   *
   * <code>repeated double ziyouXiajian = 7;</code>
   */
  public java.util.List<java.lang.Double>
      getZiyouXiajianList() {
    return ziyouXiajian_;
  }
  /**
   * <pre>
   *自由支持下部剪力
   * </pre>
   *
   * <code>repeated double ziyouXiajian = 7;</code>
   */
  public int getZiyouXiajianCount() {
    return ziyouXiajian_.size();
  }
  /**
   * <pre>
   *自由支持下部剪力
   * </pre>
   *
   * <code>repeated double ziyouXiajian = 7;</code>
   */
  public double getZiyouXiajian(int index) {
    return ziyouXiajian_.get(index);
  }
  private int ziyouXiajianMemoizedSerializedSize = -1;

  public static final int GANGXINGSHANGWAN_FIELD_NUMBER = 8;
  private java.util.List<java.lang.Double> gangxingShangwan_;
  /**
   * <pre>
   *刚性固定上部弯矩
   * </pre>
   *
   * <code>repeated double gangxingShangwan = 8;</code>
   */
  public java.util.List<java.lang.Double>
      getGangxingShangwanList() {
    return gangxingShangwan_;
  }
  /**
   * <pre>
   *刚性固定上部弯矩
   * </pre>
   *
   * <code>repeated double gangxingShangwan = 8;</code>
   */
  public int getGangxingShangwanCount() {
    return gangxingShangwan_.size();
  }
  /**
   * <pre>
   *刚性固定上部弯矩
   * </pre>
   *
   * <code>repeated double gangxingShangwan = 8;</code>
   */
  public double getGangxingShangwan(int index) {
    return gangxingShangwan_.get(index);
  }
  private int gangxingShangwanMemoizedSerializedSize = -1;

  public static final int GANGXINGXIAWAN_FIELD_NUMBER = 9;
  private java.util.List<java.lang.Double> gangxingXiawan_;
  /**
   * <pre>
   *刚性固定下部弯矩
   * </pre>
   *
   * <code>repeated double gangxingXiawan = 9;</code>
   */
  public java.util.List<java.lang.Double>
      getGangxingXiawanList() {
    return gangxingXiawan_;
  }
  /**
   * <pre>
   *刚性固定下部弯矩
   * </pre>
   *
   * <code>repeated double gangxingXiawan = 9;</code>
   */
  public int getGangxingXiawanCount() {
    return gangxingXiawan_.size();
  }
  /**
   * <pre>
   *刚性固定下部弯矩
   * </pre>
   *
   * <code>repeated double gangxingXiawan = 9;</code>
   */
  public double getGangxingXiawan(int index) {
    return gangxingXiawan_.get(index);
  }
  private int gangxingXiawanMemoizedSerializedSize = -1;

  public static final int GANGXINGSHANGJIAN_FIELD_NUMBER = 10;
  private java.util.List<java.lang.Double> gangxingShangjian_;
  /**
   * <pre>
   *刚性固定上部剪力
   * </pre>
   *
   * <code>repeated double gangxingShangjian = 10;</code>
   */
  public java.util.List<java.lang.Double>
      getGangxingShangjianList() {
    return gangxingShangjian_;
  }
  /**
   * <pre>
   *刚性固定上部剪力
   * </pre>
   *
   * <code>repeated double gangxingShangjian = 10;</code>
   */
  public int getGangxingShangjianCount() {
    return gangxingShangjian_.size();
  }
  /**
   * <pre>
   *刚性固定上部剪力
   * </pre>
   *
   * <code>repeated double gangxingShangjian = 10;</code>
   */
  public double getGangxingShangjian(int index) {
    return gangxingShangjian_.get(index);
  }
  private int gangxingShangjianMemoizedSerializedSize = -1;

  public static final int GANGXINGXIAJIAN_FIELD_NUMBER = 11;
  private java.util.List<java.lang.Double> gangxingXiajian_;
  /**
   * <pre>
   *刚性固定下部剪力
   * </pre>
   *
   * <code>repeated double gangxingXiajian = 11;</code>
   */
  public java.util.List<java.lang.Double>
      getGangxingXiajianList() {
    return gangxingXiajian_;
  }
  /**
   * <pre>
   *刚性固定下部剪力
   * </pre>
   *
   * <code>repeated double gangxingXiajian = 11;</code>
   */
  public int getGangxingXiajianCount() {
    return gangxingXiajian_.size();
  }
  /**
   * <pre>
   *刚性固定下部剪力
   * </pre>
   *
   * <code>repeated double gangxingXiajian = 11;</code>
   */
  public double getGangxingXiajian(int index) {
    return gangxingXiajian_.get(index);
  }
  private int gangxingXiajianMemoizedSerializedSize = -1;

  public static final int YINGLIZHONGYING_FIELD_NUMBER = 12;
  private java.util.List<java.lang.Double> yingliZhongying_;
  /**
   * <pre>
   *应力值中部应力
   * </pre>
   *
   * <code>repeated double yingliZhongying = 12;</code>
   */
  public java.util.List<java.lang.Double>
      getYingliZhongyingList() {
    return yingliZhongying_;
  }
  /**
   * <pre>
   *应力值中部应力
   * </pre>
   *
   * <code>repeated double yingliZhongying = 12;</code>
   */
  public int getYingliZhongyingCount() {
    return yingliZhongying_.size();
  }
  /**
   * <pre>
   *应力值中部应力
   * </pre>
   *
   * <code>repeated double yingliZhongying = 12;</code>
   */
  public double getYingliZhongying(int index) {
    return yingliZhongying_.get(index);
  }
  private int yingliZhongyingMemoizedSerializedSize = -1;

  public static final int YINGLISHANGYING_FIELD_NUMBER = 13;
  private java.util.List<java.lang.Double> yingliShangying_;
  /**
   * <pre>
   *应力值上部应力
   * </pre>
   *
   * <code>repeated double yingliShangying = 13;</code>
   */
  public java.util.List<java.lang.Double>
      getYingliShangyingList() {
    return yingliShangying_;
  }
  /**
   * <pre>
   *应力值上部应力
   * </pre>
   *
   * <code>repeated double yingliShangying = 13;</code>
   */
  public int getYingliShangyingCount() {
    return yingliShangying_.size();
  }
  /**
   * <pre>
   *应力值上部应力
   * </pre>
   *
   * <code>repeated double yingliShangying = 13;</code>
   */
  public double getYingliShangying(int index) {
    return yingliShangying_.get(index);
  }
  private int yingliShangyingMemoizedSerializedSize = -1;

  public static final int YINGLIXIAYING_FIELD_NUMBER = 14;
  private java.util.List<java.lang.Double> yingliXiaying_;
  /**
   * <pre>
   *应力值下部应力
   * </pre>
   *
   * <code>repeated double yingliXiaying = 14;</code>
   */
  public java.util.List<java.lang.Double>
      getYingliXiayingList() {
    return yingliXiaying_;
  }
  /**
   * <pre>
   *应力值下部应力
   * </pre>
   *
   * <code>repeated double yingliXiaying = 14;</code>
   */
  public int getYingliXiayingCount() {
    return yingliXiaying_.size();
  }
  /**
   * <pre>
   *应力值下部应力
   * </pre>
   *
   * <code>repeated double yingliXiaying = 14;</code>
   */
  public double getYingliXiaying(int index) {
    return yingliXiaying_.get(index);
  }
  private int yingliXiayingMemoizedSerializedSize = -1;

  public static final int YINGLIXUYING_FIELD_NUMBER = 15;
  private java.util.List<java.lang.Double> yingliXuying_;
  /**
   * <pre>
   *应力值许用应力
   * </pre>
   *
   * <code>repeated double yingliXuying = 15;</code>
   */
  public java.util.List<java.lang.Double>
      getYingliXuyingList() {
    return yingliXuying_;
  }
  /**
   * <pre>
   *应力值许用应力
   * </pre>
   *
   * <code>repeated double yingliXuying = 15;</code>
   */
  public int getYingliXuyingCount() {
    return yingliXuying_.size();
  }
  /**
   * <pre>
   *应力值许用应力
   * </pre>
   *
   * <code>repeated double yingliXuying = 15;</code>
   */
  public double getYingliXuying(int index) {
    return yingliXuying_.get(index);
  }
  private int yingliXuyingMemoizedSerializedSize = -1;

  public static final int YINGLISHANGJIAN_FIELD_NUMBER = 16;
  private java.util.List<java.lang.Double> yingliShangjian_;
  /**
   * <pre>
   *应力值上部剪力
   * </pre>
   *
   * <code>repeated double yingliShangjian = 16;</code>
   */
  public java.util.List<java.lang.Double>
      getYingliShangjianList() {
    return yingliShangjian_;
  }
  /**
   * <pre>
   *应力值上部剪力
   * </pre>
   *
   * <code>repeated double yingliShangjian = 16;</code>
   */
  public int getYingliShangjianCount() {
    return yingliShangjian_.size();
  }
  /**
   * <pre>
   *应力值上部剪力
   * </pre>
   *
   * <code>repeated double yingliShangjian = 16;</code>
   */
  public double getYingliShangjian(int index) {
    return yingliShangjian_.get(index);
  }
  private int yingliShangjianMemoizedSerializedSize = -1;

  public static final int YINGLIXIAJIAN_FIELD_NUMBER = 17;
  private java.util.List<java.lang.Double> yingliXiajian_;
  /**
   * <pre>
   *应力值下部剪力
   * </pre>
   *
   * <code>repeated double yingliXiajian = 17;</code>
   */
  public java.util.List<java.lang.Double>
      getYingliXiajianList() {
    return yingliXiajian_;
  }
  /**
   * <pre>
   *应力值下部剪力
   * </pre>
   *
   * <code>repeated double yingliXiajian = 17;</code>
   */
  public int getYingliXiajianCount() {
    return yingliXiajian_.size();
  }
  /**
   * <pre>
   *应力值下部剪力
   * </pre>
   *
   * <code>repeated double yingliXiajian = 17;</code>
   */
  public double getYingliXiajian(int index) {
    return yingliXiajian_.get(index);
  }
  private int yingliXiajianMemoizedSerializedSize = -1;

  public static final int YINGLIXUJIAN_FIELD_NUMBER = 18;
  private java.util.List<java.lang.Double> yingliXujian_;
  /**
   * <pre>
   *应力值许用剪力
   * </pre>
   *
   * <code>repeated double yingliXujian = 18;</code>
   */
  public java.util.List<java.lang.Double>
      getYingliXujianList() {
    return yingliXujian_;
  }
  /**
   * <pre>
   *应力值许用剪力
   * </pre>
   *
   * <code>repeated double yingliXujian = 18;</code>
   */
  public int getYingliXujianCount() {
    return yingliXujian_.size();
  }
  /**
   * <pre>
   *应力值许用剪力
   * </pre>
   *
   * <code>repeated double yingliXujian = 18;</code>
   */
  public double getYingliXujian(int index) {
    return yingliXujian_.get(index);
  }
  private int yingliXujianMemoizedSerializedSize = -1;

  public static final int M_MAX_EL_FIELD_NUMBER = 19;
  private java.util.List<java.lang.Double> mMaxEl_;
  /**
   * <pre>
   *new614----------------
   *弹性连续梁最大弯矩
   * </pre>
   *
   * <code>repeated double M_max_el = 19;</code>
   */
  public java.util.List<java.lang.Double>
      getMMaxElList() {
    return mMaxEl_;
  }
  /**
   * <pre>
   *new614----------------
   *弹性连续梁最大弯矩
   * </pre>
   *
   * <code>repeated double M_max_el = 19;</code>
   */
  public int getMMaxElCount() {
    return mMaxEl_.size();
  }
  /**
   * <pre>
   *new614----------------
   *弹性连续梁最大弯矩
   * </pre>
   *
   * <code>repeated double M_max_el = 19;</code>
   */
  public double getMMaxEl(int index) {
    return mMaxEl_.get(index);
  }
  private int mMaxElMemoizedSerializedSize = -1;

  public static final int N_MAX_EL_FIELD_NUMBER = 20;
  private java.util.List<java.lang.Double> nMaxEl_;
  /**
   * <pre>
   *弹性连续梁最大支撑力
   * </pre>
   *
   * <code>repeated double N_max_el = 20;</code>
   */
  public java.util.List<java.lang.Double>
      getNMaxElList() {
    return nMaxEl_;
  }
  /**
   * <pre>
   *弹性连续梁最大支撑力
   * </pre>
   *
   * <code>repeated double N_max_el = 20;</code>
   */
  public int getNMaxElCount() {
    return nMaxEl_.size();
  }
  /**
   * <pre>
   *弹性连续梁最大支撑力
   * </pre>
   *
   * <code>repeated double N_max_el = 20;</code>
   */
  public double getNMaxEl(int index) {
    return nMaxEl_.get(index);
  }
  private int nMaxElMemoizedSerializedSize = -1;

  public static final int STRESS_MAX_EL_FIELD_NUMBER = 21;
  private java.util.List<java.lang.Double> stressMaxEl_;
  /**
   * <pre>
   *弹性连续梁最大正应力
   * </pre>
   *
   * <code>repeated double Stress_max_el = 21;</code>
   */
  public java.util.List<java.lang.Double>
      getStressMaxElList() {
    return stressMaxEl_;
  }
  /**
   * <pre>
   *弹性连续梁最大正应力
   * </pre>
   *
   * <code>repeated double Stress_max_el = 21;</code>
   */
  public int getStressMaxElCount() {
    return stressMaxEl_.size();
  }
  /**
   * <pre>
   *弹性连续梁最大正应力
   * </pre>
   *
   * <code>repeated double Stress_max_el = 21;</code>
   */
  public double getStressMaxEl(int index) {
    return stressMaxEl_.get(index);
  }
  private int stressMaxElMemoizedSerializedSize = -1;

  public static final int SHEAR_MAX_EL_FIELD_NUMBER = 22;
  private java.util.List<java.lang.Double> shearMaxEl_;
  /**
   * <pre>
   *弹性连续梁最大剪切力
   * </pre>
   *
   * <code>repeated double Shear_max_el = 22;</code>
   */
  public java.util.List<java.lang.Double>
      getShearMaxElList() {
    return shearMaxEl_;
  }
  /**
   * <pre>
   *弹性连续梁最大剪切力
   * </pre>
   *
   * <code>repeated double Shear_max_el = 22;</code>
   */
  public int getShearMaxElCount() {
    return shearMaxEl_.size();
  }
  /**
   * <pre>
   *弹性连续梁最大剪切力
   * </pre>
   *
   * <code>repeated double Shear_max_el = 22;</code>
   */
  public double getShearMaxEl(int index) {
    return shearMaxEl_.get(index);
  }
  private int shearMaxElMemoizedSerializedSize = -1;

  public static final int CODE_FIELD_NUMBER = 23;
  private int code_;
  /**
   * <pre>
   *0-正常 1-异常
   * </pre>
   *
   * <code>int32 code = 23;</code>
   */
  public int getCode() {
    return code_;
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    getSerializedSize();
    if (getUpperLoadList().size() > 0) {
      output.writeUInt32NoTag(10);
      output.writeUInt32NoTag(upperLoadMemoizedSerializedSize);
    }
    for (int i = 0; i < upperLoad_.size(); i++) {
      output.writeDoubleNoTag(upperLoad_.get(i));
    }
    if (getLowerLoadList().size() > 0) {
      output.writeUInt32NoTag(18);
      output.writeUInt32NoTag(lowerLoadMemoizedSerializedSize);
    }
    for (int i = 0; i < lowerLoad_.size(); i++) {
      output.writeDoubleNoTag(lowerLoad_.get(i));
    }
    if (getZiyouZhongwanList().size() > 0) {
      output.writeUInt32NoTag(26);
      output.writeUInt32NoTag(ziyouZhongwanMemoizedSerializedSize);
    }
    for (int i = 0; i < ziyouZhongwan_.size(); i++) {
      output.writeDoubleNoTag(ziyouZhongwan_.get(i));
    }
    if (getZiyouShangwanList().size() > 0) {
      output.writeUInt32NoTag(34);
      output.writeUInt32NoTag(ziyouShangwanMemoizedSerializedSize);
    }
    for (int i = 0; i < ziyouShangwan_.size(); i++) {
      output.writeDoubleNoTag(ziyouShangwan_.get(i));
    }
    if (getZiyouXiawanList().size() > 0) {
      output.writeUInt32NoTag(42);
      output.writeUInt32NoTag(ziyouXiawanMemoizedSerializedSize);
    }
    for (int i = 0; i < ziyouXiawan_.size(); i++) {
      output.writeDoubleNoTag(ziyouXiawan_.get(i));
    }
    if (getZiyouShangjianList().size() > 0) {
      output.writeUInt32NoTag(50);
      output.writeUInt32NoTag(ziyouShangjianMemoizedSerializedSize);
    }
    for (int i = 0; i < ziyouShangjian_.size(); i++) {
      output.writeDoubleNoTag(ziyouShangjian_.get(i));
    }
    if (getZiyouXiajianList().size() > 0) {
      output.writeUInt32NoTag(58);
      output.writeUInt32NoTag(ziyouXiajianMemoizedSerializedSize);
    }
    for (int i = 0; i < ziyouXiajian_.size(); i++) {
      output.writeDoubleNoTag(ziyouXiajian_.get(i));
    }
    if (getGangxingShangwanList().size() > 0) {
      output.writeUInt32NoTag(66);
      output.writeUInt32NoTag(gangxingShangwanMemoizedSerializedSize);
    }
    for (int i = 0; i < gangxingShangwan_.size(); i++) {
      output.writeDoubleNoTag(gangxingShangwan_.get(i));
    }
    if (getGangxingXiawanList().size() > 0) {
      output.writeUInt32NoTag(74);
      output.writeUInt32NoTag(gangxingXiawanMemoizedSerializedSize);
    }
    for (int i = 0; i < gangxingXiawan_.size(); i++) {
      output.writeDoubleNoTag(gangxingXiawan_.get(i));
    }
    if (getGangxingShangjianList().size() > 0) {
      output.writeUInt32NoTag(82);
      output.writeUInt32NoTag(gangxingShangjianMemoizedSerializedSize);
    }
    for (int i = 0; i < gangxingShangjian_.size(); i++) {
      output.writeDoubleNoTag(gangxingShangjian_.get(i));
    }
    if (getGangxingXiajianList().size() > 0) {
      output.writeUInt32NoTag(90);
      output.writeUInt32NoTag(gangxingXiajianMemoizedSerializedSize);
    }
    for (int i = 0; i < gangxingXiajian_.size(); i++) {
      output.writeDoubleNoTag(gangxingXiajian_.get(i));
    }
    if (getYingliZhongyingList().size() > 0) {
      output.writeUInt32NoTag(98);
      output.writeUInt32NoTag(yingliZhongyingMemoizedSerializedSize);
    }
    for (int i = 0; i < yingliZhongying_.size(); i++) {
      output.writeDoubleNoTag(yingliZhongying_.get(i));
    }
    if (getYingliShangyingList().size() > 0) {
      output.writeUInt32NoTag(106);
      output.writeUInt32NoTag(yingliShangyingMemoizedSerializedSize);
    }
    for (int i = 0; i < yingliShangying_.size(); i++) {
      output.writeDoubleNoTag(yingliShangying_.get(i));
    }
    if (getYingliXiayingList().size() > 0) {
      output.writeUInt32NoTag(114);
      output.writeUInt32NoTag(yingliXiayingMemoizedSerializedSize);
    }
    for (int i = 0; i < yingliXiaying_.size(); i++) {
      output.writeDoubleNoTag(yingliXiaying_.get(i));
    }
    if (getYingliXuyingList().size() > 0) {
      output.writeUInt32NoTag(122);
      output.writeUInt32NoTag(yingliXuyingMemoizedSerializedSize);
    }
    for (int i = 0; i < yingliXuying_.size(); i++) {
      output.writeDoubleNoTag(yingliXuying_.get(i));
    }
    if (getYingliShangjianList().size() > 0) {
      output.writeUInt32NoTag(130);
      output.writeUInt32NoTag(yingliShangjianMemoizedSerializedSize);
    }
    for (int i = 0; i < yingliShangjian_.size(); i++) {
      output.writeDoubleNoTag(yingliShangjian_.get(i));
    }
    if (getYingliXiajianList().size() > 0) {
      output.writeUInt32NoTag(138);
      output.writeUInt32NoTag(yingliXiajianMemoizedSerializedSize);
    }
    for (int i = 0; i < yingliXiajian_.size(); i++) {
      output.writeDoubleNoTag(yingliXiajian_.get(i));
    }
    if (getYingliXujianList().size() > 0) {
      output.writeUInt32NoTag(146);
      output.writeUInt32NoTag(yingliXujianMemoizedSerializedSize);
    }
    for (int i = 0; i < yingliXujian_.size(); i++) {
      output.writeDoubleNoTag(yingliXujian_.get(i));
    }
    if (getMMaxElList().size() > 0) {
      output.writeUInt32NoTag(154);
      output.writeUInt32NoTag(mMaxElMemoizedSerializedSize);
    }
    for (int i = 0; i < mMaxEl_.size(); i++) {
      output.writeDoubleNoTag(mMaxEl_.get(i));
    }
    if (getNMaxElList().size() > 0) {
      output.writeUInt32NoTag(162);
      output.writeUInt32NoTag(nMaxElMemoizedSerializedSize);
    }
    for (int i = 0; i < nMaxEl_.size(); i++) {
      output.writeDoubleNoTag(nMaxEl_.get(i));
    }
    if (getStressMaxElList().size() > 0) {
      output.writeUInt32NoTag(170);
      output.writeUInt32NoTag(stressMaxElMemoizedSerializedSize);
    }
    for (int i = 0; i < stressMaxEl_.size(); i++) {
      output.writeDoubleNoTag(stressMaxEl_.get(i));
    }
    if (getShearMaxElList().size() > 0) {
      output.writeUInt32NoTag(178);
      output.writeUInt32NoTag(shearMaxElMemoizedSerializedSize);
    }
    for (int i = 0; i < shearMaxEl_.size(); i++) {
      output.writeDoubleNoTag(shearMaxEl_.get(i));
    }
    if (code_ != 0) {
      output.writeInt32(23, code_);
    }
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    {
      int dataSize = 0;
      dataSize = 8 * getUpperLoadList().size();
      size += dataSize;
      if (!getUpperLoadList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      upperLoadMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 8 * getLowerLoadList().size();
      size += dataSize;
      if (!getLowerLoadList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      lowerLoadMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 8 * getZiyouZhongwanList().size();
      size += dataSize;
      if (!getZiyouZhongwanList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      ziyouZhongwanMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 8 * getZiyouShangwanList().size();
      size += dataSize;
      if (!getZiyouShangwanList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      ziyouShangwanMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 8 * getZiyouXiawanList().size();
      size += dataSize;
      if (!getZiyouXiawanList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      ziyouXiawanMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 8 * getZiyouShangjianList().size();
      size += dataSize;
      if (!getZiyouShangjianList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      ziyouShangjianMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 8 * getZiyouXiajianList().size();
      size += dataSize;
      if (!getZiyouXiajianList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      ziyouXiajianMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 8 * getGangxingShangwanList().size();
      size += dataSize;
      if (!getGangxingShangwanList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      gangxingShangwanMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 8 * getGangxingXiawanList().size();
      size += dataSize;
      if (!getGangxingXiawanList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      gangxingXiawanMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 8 * getGangxingShangjianList().size();
      size += dataSize;
      if (!getGangxingShangjianList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      gangxingShangjianMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 8 * getGangxingXiajianList().size();
      size += dataSize;
      if (!getGangxingXiajianList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      gangxingXiajianMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 8 * getYingliZhongyingList().size();
      size += dataSize;
      if (!getYingliZhongyingList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      yingliZhongyingMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 8 * getYingliShangyingList().size();
      size += dataSize;
      if (!getYingliShangyingList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      yingliShangyingMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 8 * getYingliXiayingList().size();
      size += dataSize;
      if (!getYingliXiayingList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      yingliXiayingMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 8 * getYingliXuyingList().size();
      size += dataSize;
      if (!getYingliXuyingList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      yingliXuyingMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 8 * getYingliShangjianList().size();
      size += dataSize;
      if (!getYingliShangjianList().isEmpty()) {
        size += 2;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      yingliShangjianMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 8 * getYingliXiajianList().size();
      size += dataSize;
      if (!getYingliXiajianList().isEmpty()) {
        size += 2;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      yingliXiajianMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 8 * getYingliXujianList().size();
      size += dataSize;
      if (!getYingliXujianList().isEmpty()) {
        size += 2;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      yingliXujianMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 8 * getMMaxElList().size();
      size += dataSize;
      if (!getMMaxElList().isEmpty()) {
        size += 2;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      mMaxElMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 8 * getNMaxElList().size();
      size += dataSize;
      if (!getNMaxElList().isEmpty()) {
        size += 2;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      nMaxElMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 8 * getStressMaxElList().size();
      size += dataSize;
      if (!getStressMaxElList().isEmpty()) {
        size += 2;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      stressMaxElMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 8 * getShearMaxElList().size();
      size += dataSize;
      if (!getShearMaxElList().isEmpty()) {
        size += 2;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      shearMaxElMemoizedSerializedSize = dataSize;
    }
    if (code_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(23, code_);
    }
    memoizedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.iscas.biz.calculation.grpc.SupportingMaterialStrengthResponse)) {
      return super.equals(obj);
    }
    com.iscas.biz.calculation.grpc.SupportingMaterialStrengthResponse other = (com.iscas.biz.calculation.grpc.SupportingMaterialStrengthResponse) obj;

    boolean result = true;
    result = result && getUpperLoadList()
        .equals(other.getUpperLoadList());
    result = result && getLowerLoadList()
        .equals(other.getLowerLoadList());
    result = result && getZiyouZhongwanList()
        .equals(other.getZiyouZhongwanList());
    result = result && getZiyouShangwanList()
        .equals(other.getZiyouShangwanList());
    result = result && getZiyouXiawanList()
        .equals(other.getZiyouXiawanList());
    result = result && getZiyouShangjianList()
        .equals(other.getZiyouShangjianList());
    result = result && getZiyouXiajianList()
        .equals(other.getZiyouXiajianList());
    result = result && getGangxingShangwanList()
        .equals(other.getGangxingShangwanList());
    result = result && getGangxingXiawanList()
        .equals(other.getGangxingXiawanList());
    result = result && getGangxingShangjianList()
        .equals(other.getGangxingShangjianList());
    result = result && getGangxingXiajianList()
        .equals(other.getGangxingXiajianList());
    result = result && getYingliZhongyingList()
        .equals(other.getYingliZhongyingList());
    result = result && getYingliShangyingList()
        .equals(other.getYingliShangyingList());
    result = result && getYingliXiayingList()
        .equals(other.getYingliXiayingList());
    result = result && getYingliXuyingList()
        .equals(other.getYingliXuyingList());
    result = result && getYingliShangjianList()
        .equals(other.getYingliShangjianList());
    result = result && getYingliXiajianList()
        .equals(other.getYingliXiajianList());
    result = result && getYingliXujianList()
        .equals(other.getYingliXujianList());
    result = result && getMMaxElList()
        .equals(other.getMMaxElList());
    result = result && getNMaxElList()
        .equals(other.getNMaxElList());
    result = result && getStressMaxElList()
        .equals(other.getStressMaxElList());
    result = result && getShearMaxElList()
        .equals(other.getShearMaxElList());
    result = result && (getCode()
        == other.getCode());
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getUpperLoadCount() > 0) {
      hash = (37 * hash) + UPPERLOAD_FIELD_NUMBER;
      hash = (53 * hash) + getUpperLoadList().hashCode();
    }
    if (getLowerLoadCount() > 0) {
      hash = (37 * hash) + LOWERLOAD_FIELD_NUMBER;
      hash = (53 * hash) + getLowerLoadList().hashCode();
    }
    if (getZiyouZhongwanCount() > 0) {
      hash = (37 * hash) + ZIYOUZHONGWAN_FIELD_NUMBER;
      hash = (53 * hash) + getZiyouZhongwanList().hashCode();
    }
    if (getZiyouShangwanCount() > 0) {
      hash = (37 * hash) + ZIYOUSHANGWAN_FIELD_NUMBER;
      hash = (53 * hash) + getZiyouShangwanList().hashCode();
    }
    if (getZiyouXiawanCount() > 0) {
      hash = (37 * hash) + ZIYOUXIAWAN_FIELD_NUMBER;
      hash = (53 * hash) + getZiyouXiawanList().hashCode();
    }
    if (getZiyouShangjianCount() > 0) {
      hash = (37 * hash) + ZIYOUSHANGJIAN_FIELD_NUMBER;
      hash = (53 * hash) + getZiyouShangjianList().hashCode();
    }
    if (getZiyouXiajianCount() > 0) {
      hash = (37 * hash) + ZIYOUXIAJIAN_FIELD_NUMBER;
      hash = (53 * hash) + getZiyouXiajianList().hashCode();
    }
    if (getGangxingShangwanCount() > 0) {
      hash = (37 * hash) + GANGXINGSHANGWAN_FIELD_NUMBER;
      hash = (53 * hash) + getGangxingShangwanList().hashCode();
    }
    if (getGangxingXiawanCount() > 0) {
      hash = (37 * hash) + GANGXINGXIAWAN_FIELD_NUMBER;
      hash = (53 * hash) + getGangxingXiawanList().hashCode();
    }
    if (getGangxingShangjianCount() > 0) {
      hash = (37 * hash) + GANGXINGSHANGJIAN_FIELD_NUMBER;
      hash = (53 * hash) + getGangxingShangjianList().hashCode();
    }
    if (getGangxingXiajianCount() > 0) {
      hash = (37 * hash) + GANGXINGXIAJIAN_FIELD_NUMBER;
      hash = (53 * hash) + getGangxingXiajianList().hashCode();
    }
    if (getYingliZhongyingCount() > 0) {
      hash = (37 * hash) + YINGLIZHONGYING_FIELD_NUMBER;
      hash = (53 * hash) + getYingliZhongyingList().hashCode();
    }
    if (getYingliShangyingCount() > 0) {
      hash = (37 * hash) + YINGLISHANGYING_FIELD_NUMBER;
      hash = (53 * hash) + getYingliShangyingList().hashCode();
    }
    if (getYingliXiayingCount() > 0) {
      hash = (37 * hash) + YINGLIXIAYING_FIELD_NUMBER;
      hash = (53 * hash) + getYingliXiayingList().hashCode();
    }
    if (getYingliXuyingCount() > 0) {
      hash = (37 * hash) + YINGLIXUYING_FIELD_NUMBER;
      hash = (53 * hash) + getYingliXuyingList().hashCode();
    }
    if (getYingliShangjianCount() > 0) {
      hash = (37 * hash) + YINGLISHANGJIAN_FIELD_NUMBER;
      hash = (53 * hash) + getYingliShangjianList().hashCode();
    }
    if (getYingliXiajianCount() > 0) {
      hash = (37 * hash) + YINGLIXIAJIAN_FIELD_NUMBER;
      hash = (53 * hash) + getYingliXiajianList().hashCode();
    }
    if (getYingliXujianCount() > 0) {
      hash = (37 * hash) + YINGLIXUJIAN_FIELD_NUMBER;
      hash = (53 * hash) + getYingliXujianList().hashCode();
    }
    if (getMMaxElCount() > 0) {
      hash = (37 * hash) + M_MAX_EL_FIELD_NUMBER;
      hash = (53 * hash) + getMMaxElList().hashCode();
    }
    if (getNMaxElCount() > 0) {
      hash = (37 * hash) + N_MAX_EL_FIELD_NUMBER;
      hash = (53 * hash) + getNMaxElList().hashCode();
    }
    if (getStressMaxElCount() > 0) {
      hash = (37 * hash) + STRESS_MAX_EL_FIELD_NUMBER;
      hash = (53 * hash) + getStressMaxElList().hashCode();
    }
    if (getShearMaxElCount() > 0) {
      hash = (37 * hash) + SHEAR_MAX_EL_FIELD_NUMBER;
      hash = (53 * hash) + getShearMaxElList().hashCode();
    }
    hash = (37 * hash) + CODE_FIELD_NUMBER;
    hash = (53 * hash) + getCode();
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.iscas.biz.calculation.grpc.SupportingMaterialStrengthResponse parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.iscas.biz.calculation.grpc.SupportingMaterialStrengthResponse parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.iscas.biz.calculation.grpc.SupportingMaterialStrengthResponse parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.iscas.biz.calculation.grpc.SupportingMaterialStrengthResponse parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.iscas.biz.calculation.grpc.SupportingMaterialStrengthResponse parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.iscas.biz.calculation.grpc.SupportingMaterialStrengthResponse parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.iscas.biz.calculation.grpc.SupportingMaterialStrengthResponse parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.iscas.biz.calculation.grpc.SupportingMaterialStrengthResponse parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.iscas.biz.calculation.grpc.SupportingMaterialStrengthResponse parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.iscas.biz.calculation.grpc.SupportingMaterialStrengthResponse parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.iscas.biz.calculation.grpc.SupportingMaterialStrengthResponse prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code com.iscas.biz.calculation.grpc.SupportingMaterialStrengthResponse}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:com.iscas.biz.calculation.grpc.SupportingMaterialStrengthResponse)
      com.iscas.biz.calculation.grpc.SupportingMaterialStrengthResponseOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.iscas.biz.calculation.grpc.CalculationProto.internal_static_com_iscas_biz_calculation_grpc_SupportingMaterialStrengthResponse_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.iscas.biz.calculation.grpc.CalculationProto.internal_static_com_iscas_biz_calculation_grpc_SupportingMaterialStrengthResponse_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.iscas.biz.calculation.grpc.SupportingMaterialStrengthResponse.class, com.iscas.biz.calculation.grpc.SupportingMaterialStrengthResponse.Builder.class);
    }

    // Construct using com.iscas.biz.calculation.grpc.SupportingMaterialStrengthResponse.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    public Builder clear() {
      super.clear();
      upperLoad_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000001);
      lowerLoad_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000002);
      ziyouZhongwan_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000004);
      ziyouShangwan_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000008);
      ziyouXiawan_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000010);
      ziyouShangjian_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000020);
      ziyouXiajian_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000040);
      gangxingShangwan_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000080);
      gangxingXiawan_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000100);
      gangxingShangjian_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000200);
      gangxingXiajian_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000400);
      yingliZhongying_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000800);
      yingliShangying_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00001000);
      yingliXiaying_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00002000);
      yingliXuying_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00004000);
      yingliShangjian_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00008000);
      yingliXiajian_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00010000);
      yingliXujian_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00020000);
      mMaxEl_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00040000);
      nMaxEl_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00080000);
      stressMaxEl_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00100000);
      shearMaxEl_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00200000);
      code_ = 0;

      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.iscas.biz.calculation.grpc.CalculationProto.internal_static_com_iscas_biz_calculation_grpc_SupportingMaterialStrengthResponse_descriptor;
    }

    public com.iscas.biz.calculation.grpc.SupportingMaterialStrengthResponse getDefaultInstanceForType() {
      return com.iscas.biz.calculation.grpc.SupportingMaterialStrengthResponse.getDefaultInstance();
    }

    public com.iscas.biz.calculation.grpc.SupportingMaterialStrengthResponse build() {
      com.iscas.biz.calculation.grpc.SupportingMaterialStrengthResponse result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public com.iscas.biz.calculation.grpc.SupportingMaterialStrengthResponse buildPartial() {
      com.iscas.biz.calculation.grpc.SupportingMaterialStrengthResponse result = new com.iscas.biz.calculation.grpc.SupportingMaterialStrengthResponse(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        upperLoad_ = java.util.Collections.unmodifiableList(upperLoad_);
        bitField0_ = (bitField0_ & ~0x00000001);
      }
      result.upperLoad_ = upperLoad_;
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        lowerLoad_ = java.util.Collections.unmodifiableList(lowerLoad_);
        bitField0_ = (bitField0_ & ~0x00000002);
      }
      result.lowerLoad_ = lowerLoad_;
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        ziyouZhongwan_ = java.util.Collections.unmodifiableList(ziyouZhongwan_);
        bitField0_ = (bitField0_ & ~0x00000004);
      }
      result.ziyouZhongwan_ = ziyouZhongwan_;
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        ziyouShangwan_ = java.util.Collections.unmodifiableList(ziyouShangwan_);
        bitField0_ = (bitField0_ & ~0x00000008);
      }
      result.ziyouShangwan_ = ziyouShangwan_;
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        ziyouXiawan_ = java.util.Collections.unmodifiableList(ziyouXiawan_);
        bitField0_ = (bitField0_ & ~0x00000010);
      }
      result.ziyouXiawan_ = ziyouXiawan_;
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        ziyouShangjian_ = java.util.Collections.unmodifiableList(ziyouShangjian_);
        bitField0_ = (bitField0_ & ~0x00000020);
      }
      result.ziyouShangjian_ = ziyouShangjian_;
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        ziyouXiajian_ = java.util.Collections.unmodifiableList(ziyouXiajian_);
        bitField0_ = (bitField0_ & ~0x00000040);
      }
      result.ziyouXiajian_ = ziyouXiajian_;
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        gangxingShangwan_ = java.util.Collections.unmodifiableList(gangxingShangwan_);
        bitField0_ = (bitField0_ & ~0x00000080);
      }
      result.gangxingShangwan_ = gangxingShangwan_;
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        gangxingXiawan_ = java.util.Collections.unmodifiableList(gangxingXiawan_);
        bitField0_ = (bitField0_ & ~0x00000100);
      }
      result.gangxingXiawan_ = gangxingXiawan_;
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        gangxingShangjian_ = java.util.Collections.unmodifiableList(gangxingShangjian_);
        bitField0_ = (bitField0_ & ~0x00000200);
      }
      result.gangxingShangjian_ = gangxingShangjian_;
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        gangxingXiajian_ = java.util.Collections.unmodifiableList(gangxingXiajian_);
        bitField0_ = (bitField0_ & ~0x00000400);
      }
      result.gangxingXiajian_ = gangxingXiajian_;
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        yingliZhongying_ = java.util.Collections.unmodifiableList(yingliZhongying_);
        bitField0_ = (bitField0_ & ~0x00000800);
      }
      result.yingliZhongying_ = yingliZhongying_;
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        yingliShangying_ = java.util.Collections.unmodifiableList(yingliShangying_);
        bitField0_ = (bitField0_ & ~0x00001000);
      }
      result.yingliShangying_ = yingliShangying_;
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        yingliXiaying_ = java.util.Collections.unmodifiableList(yingliXiaying_);
        bitField0_ = (bitField0_ & ~0x00002000);
      }
      result.yingliXiaying_ = yingliXiaying_;
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        yingliXuying_ = java.util.Collections.unmodifiableList(yingliXuying_);
        bitField0_ = (bitField0_ & ~0x00004000);
      }
      result.yingliXuying_ = yingliXuying_;
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        yingliShangjian_ = java.util.Collections.unmodifiableList(yingliShangjian_);
        bitField0_ = (bitField0_ & ~0x00008000);
      }
      result.yingliShangjian_ = yingliShangjian_;
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        yingliXiajian_ = java.util.Collections.unmodifiableList(yingliXiajian_);
        bitField0_ = (bitField0_ & ~0x00010000);
      }
      result.yingliXiajian_ = yingliXiajian_;
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        yingliXujian_ = java.util.Collections.unmodifiableList(yingliXujian_);
        bitField0_ = (bitField0_ & ~0x00020000);
      }
      result.yingliXujian_ = yingliXujian_;
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        mMaxEl_ = java.util.Collections.unmodifiableList(mMaxEl_);
        bitField0_ = (bitField0_ & ~0x00040000);
      }
      result.mMaxEl_ = mMaxEl_;
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        nMaxEl_ = java.util.Collections.unmodifiableList(nMaxEl_);
        bitField0_ = (bitField0_ & ~0x00080000);
      }
      result.nMaxEl_ = nMaxEl_;
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        stressMaxEl_ = java.util.Collections.unmodifiableList(stressMaxEl_);
        bitField0_ = (bitField0_ & ~0x00100000);
      }
      result.stressMaxEl_ = stressMaxEl_;
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        shearMaxEl_ = java.util.Collections.unmodifiableList(shearMaxEl_);
        bitField0_ = (bitField0_ & ~0x00200000);
      }
      result.shearMaxEl_ = shearMaxEl_;
      result.code_ = code_;
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.iscas.biz.calculation.grpc.SupportingMaterialStrengthResponse) {
        return mergeFrom((com.iscas.biz.calculation.grpc.SupportingMaterialStrengthResponse)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.iscas.biz.calculation.grpc.SupportingMaterialStrengthResponse other) {
      if (other == com.iscas.biz.calculation.grpc.SupportingMaterialStrengthResponse.getDefaultInstance()) return this;
      if (!other.upperLoad_.isEmpty()) {
        if (upperLoad_.isEmpty()) {
          upperLoad_ = other.upperLoad_;
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          ensureUpperLoadIsMutable();
          upperLoad_.addAll(other.upperLoad_);
        }
        onChanged();
      }
      if (!other.lowerLoad_.isEmpty()) {
        if (lowerLoad_.isEmpty()) {
          lowerLoad_ = other.lowerLoad_;
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          ensureLowerLoadIsMutable();
          lowerLoad_.addAll(other.lowerLoad_);
        }
        onChanged();
      }
      if (!other.ziyouZhongwan_.isEmpty()) {
        if (ziyouZhongwan_.isEmpty()) {
          ziyouZhongwan_ = other.ziyouZhongwan_;
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          ensureZiyouZhongwanIsMutable();
          ziyouZhongwan_.addAll(other.ziyouZhongwan_);
        }
        onChanged();
      }
      if (!other.ziyouShangwan_.isEmpty()) {
        if (ziyouShangwan_.isEmpty()) {
          ziyouShangwan_ = other.ziyouShangwan_;
          bitField0_ = (bitField0_ & ~0x00000008);
        } else {
          ensureZiyouShangwanIsMutable();
          ziyouShangwan_.addAll(other.ziyouShangwan_);
        }
        onChanged();
      }
      if (!other.ziyouXiawan_.isEmpty()) {
        if (ziyouXiawan_.isEmpty()) {
          ziyouXiawan_ = other.ziyouXiawan_;
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          ensureZiyouXiawanIsMutable();
          ziyouXiawan_.addAll(other.ziyouXiawan_);
        }
        onChanged();
      }
      if (!other.ziyouShangjian_.isEmpty()) {
        if (ziyouShangjian_.isEmpty()) {
          ziyouShangjian_ = other.ziyouShangjian_;
          bitField0_ = (bitField0_ & ~0x00000020);
        } else {
          ensureZiyouShangjianIsMutable();
          ziyouShangjian_.addAll(other.ziyouShangjian_);
        }
        onChanged();
      }
      if (!other.ziyouXiajian_.isEmpty()) {
        if (ziyouXiajian_.isEmpty()) {
          ziyouXiajian_ = other.ziyouXiajian_;
          bitField0_ = (bitField0_ & ~0x00000040);
        } else {
          ensureZiyouXiajianIsMutable();
          ziyouXiajian_.addAll(other.ziyouXiajian_);
        }
        onChanged();
      }
      if (!other.gangxingShangwan_.isEmpty()) {
        if (gangxingShangwan_.isEmpty()) {
          gangxingShangwan_ = other.gangxingShangwan_;
          bitField0_ = (bitField0_ & ~0x00000080);
        } else {
          ensureGangxingShangwanIsMutable();
          gangxingShangwan_.addAll(other.gangxingShangwan_);
        }
        onChanged();
      }
      if (!other.gangxingXiawan_.isEmpty()) {
        if (gangxingXiawan_.isEmpty()) {
          gangxingXiawan_ = other.gangxingXiawan_;
          bitField0_ = (bitField0_ & ~0x00000100);
        } else {
          ensureGangxingXiawanIsMutable();
          gangxingXiawan_.addAll(other.gangxingXiawan_);
        }
        onChanged();
      }
      if (!other.gangxingShangjian_.isEmpty()) {
        if (gangxingShangjian_.isEmpty()) {
          gangxingShangjian_ = other.gangxingShangjian_;
          bitField0_ = (bitField0_ & ~0x00000200);
        } else {
          ensureGangxingShangjianIsMutable();
          gangxingShangjian_.addAll(other.gangxingShangjian_);
        }
        onChanged();
      }
      if (!other.gangxingXiajian_.isEmpty()) {
        if (gangxingXiajian_.isEmpty()) {
          gangxingXiajian_ = other.gangxingXiajian_;
          bitField0_ = (bitField0_ & ~0x00000400);
        } else {
          ensureGangxingXiajianIsMutable();
          gangxingXiajian_.addAll(other.gangxingXiajian_);
        }
        onChanged();
      }
      if (!other.yingliZhongying_.isEmpty()) {
        if (yingliZhongying_.isEmpty()) {
          yingliZhongying_ = other.yingliZhongying_;
          bitField0_ = (bitField0_ & ~0x00000800);
        } else {
          ensureYingliZhongyingIsMutable();
          yingliZhongying_.addAll(other.yingliZhongying_);
        }
        onChanged();
      }
      if (!other.yingliShangying_.isEmpty()) {
        if (yingliShangying_.isEmpty()) {
          yingliShangying_ = other.yingliShangying_;
          bitField0_ = (bitField0_ & ~0x00001000);
        } else {
          ensureYingliShangyingIsMutable();
          yingliShangying_.addAll(other.yingliShangying_);
        }
        onChanged();
      }
      if (!other.yingliXiaying_.isEmpty()) {
        if (yingliXiaying_.isEmpty()) {
          yingliXiaying_ = other.yingliXiaying_;
          bitField0_ = (bitField0_ & ~0x00002000);
        } else {
          ensureYingliXiayingIsMutable();
          yingliXiaying_.addAll(other.yingliXiaying_);
        }
        onChanged();
      }
      if (!other.yingliXuying_.isEmpty()) {
        if (yingliXuying_.isEmpty()) {
          yingliXuying_ = other.yingliXuying_;
          bitField0_ = (bitField0_ & ~0x00004000);
        } else {
          ensureYingliXuyingIsMutable();
          yingliXuying_.addAll(other.yingliXuying_);
        }
        onChanged();
      }
      if (!other.yingliShangjian_.isEmpty()) {
        if (yingliShangjian_.isEmpty()) {
          yingliShangjian_ = other.yingliShangjian_;
          bitField0_ = (bitField0_ & ~0x00008000);
        } else {
          ensureYingliShangjianIsMutable();
          yingliShangjian_.addAll(other.yingliShangjian_);
        }
        onChanged();
      }
      if (!other.yingliXiajian_.isEmpty()) {
        if (yingliXiajian_.isEmpty()) {
          yingliXiajian_ = other.yingliXiajian_;
          bitField0_ = (bitField0_ & ~0x00010000);
        } else {
          ensureYingliXiajianIsMutable();
          yingliXiajian_.addAll(other.yingliXiajian_);
        }
        onChanged();
      }
      if (!other.yingliXujian_.isEmpty()) {
        if (yingliXujian_.isEmpty()) {
          yingliXujian_ = other.yingliXujian_;
          bitField0_ = (bitField0_ & ~0x00020000);
        } else {
          ensureYingliXujianIsMutable();
          yingliXujian_.addAll(other.yingliXujian_);
        }
        onChanged();
      }
      if (!other.mMaxEl_.isEmpty()) {
        if (mMaxEl_.isEmpty()) {
          mMaxEl_ = other.mMaxEl_;
          bitField0_ = (bitField0_ & ~0x00040000);
        } else {
          ensureMMaxElIsMutable();
          mMaxEl_.addAll(other.mMaxEl_);
        }
        onChanged();
      }
      if (!other.nMaxEl_.isEmpty()) {
        if (nMaxEl_.isEmpty()) {
          nMaxEl_ = other.nMaxEl_;
          bitField0_ = (bitField0_ & ~0x00080000);
        } else {
          ensureNMaxElIsMutable();
          nMaxEl_.addAll(other.nMaxEl_);
        }
        onChanged();
      }
      if (!other.stressMaxEl_.isEmpty()) {
        if (stressMaxEl_.isEmpty()) {
          stressMaxEl_ = other.stressMaxEl_;
          bitField0_ = (bitField0_ & ~0x00100000);
        } else {
          ensureStressMaxElIsMutable();
          stressMaxEl_.addAll(other.stressMaxEl_);
        }
        onChanged();
      }
      if (!other.shearMaxEl_.isEmpty()) {
        if (shearMaxEl_.isEmpty()) {
          shearMaxEl_ = other.shearMaxEl_;
          bitField0_ = (bitField0_ & ~0x00200000);
        } else {
          ensureShearMaxElIsMutable();
          shearMaxEl_.addAll(other.shearMaxEl_);
        }
        onChanged();
      }
      if (other.getCode() != 0) {
        setCode(other.getCode());
      }
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.iscas.biz.calculation.grpc.SupportingMaterialStrengthResponse parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.iscas.biz.calculation.grpc.SupportingMaterialStrengthResponse) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.util.List<java.lang.Double> upperLoad_ = java.util.Collections.emptyList();
    private void ensureUpperLoadIsMutable() {
      if (!((bitField0_ & 0x00000001) == 0x00000001)) {
        upperLoad_ = new java.util.ArrayList<java.lang.Double>(upperLoad_);
        bitField0_ |= 0x00000001;
       }
    }
    /**
     * <pre>
     *上端载荷
     * </pre>
     *
     * <code>repeated double upperLoad = 1;</code>
     */
    public java.util.List<java.lang.Double>
        getUpperLoadList() {
      return java.util.Collections.unmodifiableList(upperLoad_);
    }
    /**
     * <pre>
     *上端载荷
     * </pre>
     *
     * <code>repeated double upperLoad = 1;</code>
     */
    public int getUpperLoadCount() {
      return upperLoad_.size();
    }
    /**
     * <pre>
     *上端载荷
     * </pre>
     *
     * <code>repeated double upperLoad = 1;</code>
     */
    public double getUpperLoad(int index) {
      return upperLoad_.get(index);
    }
    /**
     * <pre>
     *上端载荷
     * </pre>
     *
     * <code>repeated double upperLoad = 1;</code>
     */
    public Builder setUpperLoad(
        int index, double value) {
      ensureUpperLoadIsMutable();
      upperLoad_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *上端载荷
     * </pre>
     *
     * <code>repeated double upperLoad = 1;</code>
     */
    public Builder addUpperLoad(double value) {
      ensureUpperLoadIsMutable();
      upperLoad_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *上端载荷
     * </pre>
     *
     * <code>repeated double upperLoad = 1;</code>
     */
    public Builder addAllUpperLoad(
        java.lang.Iterable<? extends java.lang.Double> values) {
      ensureUpperLoadIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, upperLoad_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *上端载荷
     * </pre>
     *
     * <code>repeated double upperLoad = 1;</code>
     */
    public Builder clearUpperLoad() {
      upperLoad_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }

    private java.util.List<java.lang.Double> lowerLoad_ = java.util.Collections.emptyList();
    private void ensureLowerLoadIsMutable() {
      if (!((bitField0_ & 0x00000002) == 0x00000002)) {
        lowerLoad_ = new java.util.ArrayList<java.lang.Double>(lowerLoad_);
        bitField0_ |= 0x00000002;
       }
    }
    /**
     * <pre>
     *下端载荷
     * </pre>
     *
     * <code>repeated double lowerLoad = 2;</code>
     */
    public java.util.List<java.lang.Double>
        getLowerLoadList() {
      return java.util.Collections.unmodifiableList(lowerLoad_);
    }
    /**
     * <pre>
     *下端载荷
     * </pre>
     *
     * <code>repeated double lowerLoad = 2;</code>
     */
    public int getLowerLoadCount() {
      return lowerLoad_.size();
    }
    /**
     * <pre>
     *下端载荷
     * </pre>
     *
     * <code>repeated double lowerLoad = 2;</code>
     */
    public double getLowerLoad(int index) {
      return lowerLoad_.get(index);
    }
    /**
     * <pre>
     *下端载荷
     * </pre>
     *
     * <code>repeated double lowerLoad = 2;</code>
     */
    public Builder setLowerLoad(
        int index, double value) {
      ensureLowerLoadIsMutable();
      lowerLoad_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *下端载荷
     * </pre>
     *
     * <code>repeated double lowerLoad = 2;</code>
     */
    public Builder addLowerLoad(double value) {
      ensureLowerLoadIsMutable();
      lowerLoad_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *下端载荷
     * </pre>
     *
     * <code>repeated double lowerLoad = 2;</code>
     */
    public Builder addAllLowerLoad(
        java.lang.Iterable<? extends java.lang.Double> values) {
      ensureLowerLoadIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, lowerLoad_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *下端载荷
     * </pre>
     *
     * <code>repeated double lowerLoad = 2;</code>
     */
    public Builder clearLowerLoad() {
      lowerLoad_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }

    private java.util.List<java.lang.Double> ziyouZhongwan_ = java.util.Collections.emptyList();
    private void ensureZiyouZhongwanIsMutable() {
      if (!((bitField0_ & 0x00000004) == 0x00000004)) {
        ziyouZhongwan_ = new java.util.ArrayList<java.lang.Double>(ziyouZhongwan_);
        bitField0_ |= 0x00000004;
       }
    }
    /**
     * <pre>
     *自由支持中部弯矩
     * </pre>
     *
     * <code>repeated double ziyouZhongwan = 3;</code>
     */
    public java.util.List<java.lang.Double>
        getZiyouZhongwanList() {
      return java.util.Collections.unmodifiableList(ziyouZhongwan_);
    }
    /**
     * <pre>
     *自由支持中部弯矩
     * </pre>
     *
     * <code>repeated double ziyouZhongwan = 3;</code>
     */
    public int getZiyouZhongwanCount() {
      return ziyouZhongwan_.size();
    }
    /**
     * <pre>
     *自由支持中部弯矩
     * </pre>
     *
     * <code>repeated double ziyouZhongwan = 3;</code>
     */
    public double getZiyouZhongwan(int index) {
      return ziyouZhongwan_.get(index);
    }
    /**
     * <pre>
     *自由支持中部弯矩
     * </pre>
     *
     * <code>repeated double ziyouZhongwan = 3;</code>
     */
    public Builder setZiyouZhongwan(
        int index, double value) {
      ensureZiyouZhongwanIsMutable();
      ziyouZhongwan_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *自由支持中部弯矩
     * </pre>
     *
     * <code>repeated double ziyouZhongwan = 3;</code>
     */
    public Builder addZiyouZhongwan(double value) {
      ensureZiyouZhongwanIsMutable();
      ziyouZhongwan_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *自由支持中部弯矩
     * </pre>
     *
     * <code>repeated double ziyouZhongwan = 3;</code>
     */
    public Builder addAllZiyouZhongwan(
        java.lang.Iterable<? extends java.lang.Double> values) {
      ensureZiyouZhongwanIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, ziyouZhongwan_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *自由支持中部弯矩
     * </pre>
     *
     * <code>repeated double ziyouZhongwan = 3;</code>
     */
    public Builder clearZiyouZhongwan() {
      ziyouZhongwan_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000004);
      onChanged();
      return this;
    }

    private java.util.List<java.lang.Double> ziyouShangwan_ = java.util.Collections.emptyList();
    private void ensureZiyouShangwanIsMutable() {
      if (!((bitField0_ & 0x00000008) == 0x00000008)) {
        ziyouShangwan_ = new java.util.ArrayList<java.lang.Double>(ziyouShangwan_);
        bitField0_ |= 0x00000008;
       }
    }
    /**
     * <pre>
     *自由支持上部弯矩
     * </pre>
     *
     * <code>repeated double ziyouShangwan = 4;</code>
     */
    public java.util.List<java.lang.Double>
        getZiyouShangwanList() {
      return java.util.Collections.unmodifiableList(ziyouShangwan_);
    }
    /**
     * <pre>
     *自由支持上部弯矩
     * </pre>
     *
     * <code>repeated double ziyouShangwan = 4;</code>
     */
    public int getZiyouShangwanCount() {
      return ziyouShangwan_.size();
    }
    /**
     * <pre>
     *自由支持上部弯矩
     * </pre>
     *
     * <code>repeated double ziyouShangwan = 4;</code>
     */
    public double getZiyouShangwan(int index) {
      return ziyouShangwan_.get(index);
    }
    /**
     * <pre>
     *自由支持上部弯矩
     * </pre>
     *
     * <code>repeated double ziyouShangwan = 4;</code>
     */
    public Builder setZiyouShangwan(
        int index, double value) {
      ensureZiyouShangwanIsMutable();
      ziyouShangwan_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *自由支持上部弯矩
     * </pre>
     *
     * <code>repeated double ziyouShangwan = 4;</code>
     */
    public Builder addZiyouShangwan(double value) {
      ensureZiyouShangwanIsMutable();
      ziyouShangwan_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *自由支持上部弯矩
     * </pre>
     *
     * <code>repeated double ziyouShangwan = 4;</code>
     */
    public Builder addAllZiyouShangwan(
        java.lang.Iterable<? extends java.lang.Double> values) {
      ensureZiyouShangwanIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, ziyouShangwan_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *自由支持上部弯矩
     * </pre>
     *
     * <code>repeated double ziyouShangwan = 4;</code>
     */
    public Builder clearZiyouShangwan() {
      ziyouShangwan_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000008);
      onChanged();
      return this;
    }

    private java.util.List<java.lang.Double> ziyouXiawan_ = java.util.Collections.emptyList();
    private void ensureZiyouXiawanIsMutable() {
      if (!((bitField0_ & 0x00000010) == 0x00000010)) {
        ziyouXiawan_ = new java.util.ArrayList<java.lang.Double>(ziyouXiawan_);
        bitField0_ |= 0x00000010;
       }
    }
    /**
     * <pre>
     *自由支持下部弯矩
     * </pre>
     *
     * <code>repeated double ziyouXiawan = 5;</code>
     */
    public java.util.List<java.lang.Double>
        getZiyouXiawanList() {
      return java.util.Collections.unmodifiableList(ziyouXiawan_);
    }
    /**
     * <pre>
     *自由支持下部弯矩
     * </pre>
     *
     * <code>repeated double ziyouXiawan = 5;</code>
     */
    public int getZiyouXiawanCount() {
      return ziyouXiawan_.size();
    }
    /**
     * <pre>
     *自由支持下部弯矩
     * </pre>
     *
     * <code>repeated double ziyouXiawan = 5;</code>
     */
    public double getZiyouXiawan(int index) {
      return ziyouXiawan_.get(index);
    }
    /**
     * <pre>
     *自由支持下部弯矩
     * </pre>
     *
     * <code>repeated double ziyouXiawan = 5;</code>
     */
    public Builder setZiyouXiawan(
        int index, double value) {
      ensureZiyouXiawanIsMutable();
      ziyouXiawan_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *自由支持下部弯矩
     * </pre>
     *
     * <code>repeated double ziyouXiawan = 5;</code>
     */
    public Builder addZiyouXiawan(double value) {
      ensureZiyouXiawanIsMutable();
      ziyouXiawan_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *自由支持下部弯矩
     * </pre>
     *
     * <code>repeated double ziyouXiawan = 5;</code>
     */
    public Builder addAllZiyouXiawan(
        java.lang.Iterable<? extends java.lang.Double> values) {
      ensureZiyouXiawanIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, ziyouXiawan_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *自由支持下部弯矩
     * </pre>
     *
     * <code>repeated double ziyouXiawan = 5;</code>
     */
    public Builder clearZiyouXiawan() {
      ziyouXiawan_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000010);
      onChanged();
      return this;
    }

    private java.util.List<java.lang.Double> ziyouShangjian_ = java.util.Collections.emptyList();
    private void ensureZiyouShangjianIsMutable() {
      if (!((bitField0_ & 0x00000020) == 0x00000020)) {
        ziyouShangjian_ = new java.util.ArrayList<java.lang.Double>(ziyouShangjian_);
        bitField0_ |= 0x00000020;
       }
    }
    /**
     * <pre>
     *自由支持上部剪力
     * </pre>
     *
     * <code>repeated double ziyouShangjian = 6;</code>
     */
    public java.util.List<java.lang.Double>
        getZiyouShangjianList() {
      return java.util.Collections.unmodifiableList(ziyouShangjian_);
    }
    /**
     * <pre>
     *自由支持上部剪力
     * </pre>
     *
     * <code>repeated double ziyouShangjian = 6;</code>
     */
    public int getZiyouShangjianCount() {
      return ziyouShangjian_.size();
    }
    /**
     * <pre>
     *自由支持上部剪力
     * </pre>
     *
     * <code>repeated double ziyouShangjian = 6;</code>
     */
    public double getZiyouShangjian(int index) {
      return ziyouShangjian_.get(index);
    }
    /**
     * <pre>
     *自由支持上部剪力
     * </pre>
     *
     * <code>repeated double ziyouShangjian = 6;</code>
     */
    public Builder setZiyouShangjian(
        int index, double value) {
      ensureZiyouShangjianIsMutable();
      ziyouShangjian_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *自由支持上部剪力
     * </pre>
     *
     * <code>repeated double ziyouShangjian = 6;</code>
     */
    public Builder addZiyouShangjian(double value) {
      ensureZiyouShangjianIsMutable();
      ziyouShangjian_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *自由支持上部剪力
     * </pre>
     *
     * <code>repeated double ziyouShangjian = 6;</code>
     */
    public Builder addAllZiyouShangjian(
        java.lang.Iterable<? extends java.lang.Double> values) {
      ensureZiyouShangjianIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, ziyouShangjian_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *自由支持上部剪力
     * </pre>
     *
     * <code>repeated double ziyouShangjian = 6;</code>
     */
    public Builder clearZiyouShangjian() {
      ziyouShangjian_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000020);
      onChanged();
      return this;
    }

    private java.util.List<java.lang.Double> ziyouXiajian_ = java.util.Collections.emptyList();
    private void ensureZiyouXiajianIsMutable() {
      if (!((bitField0_ & 0x00000040) == 0x00000040)) {
        ziyouXiajian_ = new java.util.ArrayList<java.lang.Double>(ziyouXiajian_);
        bitField0_ |= 0x00000040;
       }
    }
    /**
     * <pre>
     *自由支持下部剪力
     * </pre>
     *
     * <code>repeated double ziyouXiajian = 7;</code>
     */
    public java.util.List<java.lang.Double>
        getZiyouXiajianList() {
      return java.util.Collections.unmodifiableList(ziyouXiajian_);
    }
    /**
     * <pre>
     *自由支持下部剪力
     * </pre>
     *
     * <code>repeated double ziyouXiajian = 7;</code>
     */
    public int getZiyouXiajianCount() {
      return ziyouXiajian_.size();
    }
    /**
     * <pre>
     *自由支持下部剪力
     * </pre>
     *
     * <code>repeated double ziyouXiajian = 7;</code>
     */
    public double getZiyouXiajian(int index) {
      return ziyouXiajian_.get(index);
    }
    /**
     * <pre>
     *自由支持下部剪力
     * </pre>
     *
     * <code>repeated double ziyouXiajian = 7;</code>
     */
    public Builder setZiyouXiajian(
        int index, double value) {
      ensureZiyouXiajianIsMutable();
      ziyouXiajian_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *自由支持下部剪力
     * </pre>
     *
     * <code>repeated double ziyouXiajian = 7;</code>
     */
    public Builder addZiyouXiajian(double value) {
      ensureZiyouXiajianIsMutable();
      ziyouXiajian_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *自由支持下部剪力
     * </pre>
     *
     * <code>repeated double ziyouXiajian = 7;</code>
     */
    public Builder addAllZiyouXiajian(
        java.lang.Iterable<? extends java.lang.Double> values) {
      ensureZiyouXiajianIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, ziyouXiajian_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *自由支持下部剪力
     * </pre>
     *
     * <code>repeated double ziyouXiajian = 7;</code>
     */
    public Builder clearZiyouXiajian() {
      ziyouXiajian_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000040);
      onChanged();
      return this;
    }

    private java.util.List<java.lang.Double> gangxingShangwan_ = java.util.Collections.emptyList();
    private void ensureGangxingShangwanIsMutable() {
      if (!((bitField0_ & 0x00000080) == 0x00000080)) {
        gangxingShangwan_ = new java.util.ArrayList<java.lang.Double>(gangxingShangwan_);
        bitField0_ |= 0x00000080;
       }
    }
    /**
     * <pre>
     *刚性固定上部弯矩
     * </pre>
     *
     * <code>repeated double gangxingShangwan = 8;</code>
     */
    public java.util.List<java.lang.Double>
        getGangxingShangwanList() {
      return java.util.Collections.unmodifiableList(gangxingShangwan_);
    }
    /**
     * <pre>
     *刚性固定上部弯矩
     * </pre>
     *
     * <code>repeated double gangxingShangwan = 8;</code>
     */
    public int getGangxingShangwanCount() {
      return gangxingShangwan_.size();
    }
    /**
     * <pre>
     *刚性固定上部弯矩
     * </pre>
     *
     * <code>repeated double gangxingShangwan = 8;</code>
     */
    public double getGangxingShangwan(int index) {
      return gangxingShangwan_.get(index);
    }
    /**
     * <pre>
     *刚性固定上部弯矩
     * </pre>
     *
     * <code>repeated double gangxingShangwan = 8;</code>
     */
    public Builder setGangxingShangwan(
        int index, double value) {
      ensureGangxingShangwanIsMutable();
      gangxingShangwan_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *刚性固定上部弯矩
     * </pre>
     *
     * <code>repeated double gangxingShangwan = 8;</code>
     */
    public Builder addGangxingShangwan(double value) {
      ensureGangxingShangwanIsMutable();
      gangxingShangwan_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *刚性固定上部弯矩
     * </pre>
     *
     * <code>repeated double gangxingShangwan = 8;</code>
     */
    public Builder addAllGangxingShangwan(
        java.lang.Iterable<? extends java.lang.Double> values) {
      ensureGangxingShangwanIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, gangxingShangwan_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *刚性固定上部弯矩
     * </pre>
     *
     * <code>repeated double gangxingShangwan = 8;</code>
     */
    public Builder clearGangxingShangwan() {
      gangxingShangwan_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000080);
      onChanged();
      return this;
    }

    private java.util.List<java.lang.Double> gangxingXiawan_ = java.util.Collections.emptyList();
    private void ensureGangxingXiawanIsMutable() {
      if (!((bitField0_ & 0x00000100) == 0x00000100)) {
        gangxingXiawan_ = new java.util.ArrayList<java.lang.Double>(gangxingXiawan_);
        bitField0_ |= 0x00000100;
       }
    }
    /**
     * <pre>
     *刚性固定下部弯矩
     * </pre>
     *
     * <code>repeated double gangxingXiawan = 9;</code>
     */
    public java.util.List<java.lang.Double>
        getGangxingXiawanList() {
      return java.util.Collections.unmodifiableList(gangxingXiawan_);
    }
    /**
     * <pre>
     *刚性固定下部弯矩
     * </pre>
     *
     * <code>repeated double gangxingXiawan = 9;</code>
     */
    public int getGangxingXiawanCount() {
      return gangxingXiawan_.size();
    }
    /**
     * <pre>
     *刚性固定下部弯矩
     * </pre>
     *
     * <code>repeated double gangxingXiawan = 9;</code>
     */
    public double getGangxingXiawan(int index) {
      return gangxingXiawan_.get(index);
    }
    /**
     * <pre>
     *刚性固定下部弯矩
     * </pre>
     *
     * <code>repeated double gangxingXiawan = 9;</code>
     */
    public Builder setGangxingXiawan(
        int index, double value) {
      ensureGangxingXiawanIsMutable();
      gangxingXiawan_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *刚性固定下部弯矩
     * </pre>
     *
     * <code>repeated double gangxingXiawan = 9;</code>
     */
    public Builder addGangxingXiawan(double value) {
      ensureGangxingXiawanIsMutable();
      gangxingXiawan_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *刚性固定下部弯矩
     * </pre>
     *
     * <code>repeated double gangxingXiawan = 9;</code>
     */
    public Builder addAllGangxingXiawan(
        java.lang.Iterable<? extends java.lang.Double> values) {
      ensureGangxingXiawanIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, gangxingXiawan_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *刚性固定下部弯矩
     * </pre>
     *
     * <code>repeated double gangxingXiawan = 9;</code>
     */
    public Builder clearGangxingXiawan() {
      gangxingXiawan_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000100);
      onChanged();
      return this;
    }

    private java.util.List<java.lang.Double> gangxingShangjian_ = java.util.Collections.emptyList();
    private void ensureGangxingShangjianIsMutable() {
      if (!((bitField0_ & 0x00000200) == 0x00000200)) {
        gangxingShangjian_ = new java.util.ArrayList<java.lang.Double>(gangxingShangjian_);
        bitField0_ |= 0x00000200;
       }
    }
    /**
     * <pre>
     *刚性固定上部剪力
     * </pre>
     *
     * <code>repeated double gangxingShangjian = 10;</code>
     */
    public java.util.List<java.lang.Double>
        getGangxingShangjianList() {
      return java.util.Collections.unmodifiableList(gangxingShangjian_);
    }
    /**
     * <pre>
     *刚性固定上部剪力
     * </pre>
     *
     * <code>repeated double gangxingShangjian = 10;</code>
     */
    public int getGangxingShangjianCount() {
      return gangxingShangjian_.size();
    }
    /**
     * <pre>
     *刚性固定上部剪力
     * </pre>
     *
     * <code>repeated double gangxingShangjian = 10;</code>
     */
    public double getGangxingShangjian(int index) {
      return gangxingShangjian_.get(index);
    }
    /**
     * <pre>
     *刚性固定上部剪力
     * </pre>
     *
     * <code>repeated double gangxingShangjian = 10;</code>
     */
    public Builder setGangxingShangjian(
        int index, double value) {
      ensureGangxingShangjianIsMutable();
      gangxingShangjian_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *刚性固定上部剪力
     * </pre>
     *
     * <code>repeated double gangxingShangjian = 10;</code>
     */
    public Builder addGangxingShangjian(double value) {
      ensureGangxingShangjianIsMutable();
      gangxingShangjian_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *刚性固定上部剪力
     * </pre>
     *
     * <code>repeated double gangxingShangjian = 10;</code>
     */
    public Builder addAllGangxingShangjian(
        java.lang.Iterable<? extends java.lang.Double> values) {
      ensureGangxingShangjianIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, gangxingShangjian_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *刚性固定上部剪力
     * </pre>
     *
     * <code>repeated double gangxingShangjian = 10;</code>
     */
    public Builder clearGangxingShangjian() {
      gangxingShangjian_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000200);
      onChanged();
      return this;
    }

    private java.util.List<java.lang.Double> gangxingXiajian_ = java.util.Collections.emptyList();
    private void ensureGangxingXiajianIsMutable() {
      if (!((bitField0_ & 0x00000400) == 0x00000400)) {
        gangxingXiajian_ = new java.util.ArrayList<java.lang.Double>(gangxingXiajian_);
        bitField0_ |= 0x00000400;
       }
    }
    /**
     * <pre>
     *刚性固定下部剪力
     * </pre>
     *
     * <code>repeated double gangxingXiajian = 11;</code>
     */
    public java.util.List<java.lang.Double>
        getGangxingXiajianList() {
      return java.util.Collections.unmodifiableList(gangxingXiajian_);
    }
    /**
     * <pre>
     *刚性固定下部剪力
     * </pre>
     *
     * <code>repeated double gangxingXiajian = 11;</code>
     */
    public int getGangxingXiajianCount() {
      return gangxingXiajian_.size();
    }
    /**
     * <pre>
     *刚性固定下部剪力
     * </pre>
     *
     * <code>repeated double gangxingXiajian = 11;</code>
     */
    public double getGangxingXiajian(int index) {
      return gangxingXiajian_.get(index);
    }
    /**
     * <pre>
     *刚性固定下部剪力
     * </pre>
     *
     * <code>repeated double gangxingXiajian = 11;</code>
     */
    public Builder setGangxingXiajian(
        int index, double value) {
      ensureGangxingXiajianIsMutable();
      gangxingXiajian_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *刚性固定下部剪力
     * </pre>
     *
     * <code>repeated double gangxingXiajian = 11;</code>
     */
    public Builder addGangxingXiajian(double value) {
      ensureGangxingXiajianIsMutable();
      gangxingXiajian_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *刚性固定下部剪力
     * </pre>
     *
     * <code>repeated double gangxingXiajian = 11;</code>
     */
    public Builder addAllGangxingXiajian(
        java.lang.Iterable<? extends java.lang.Double> values) {
      ensureGangxingXiajianIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, gangxingXiajian_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *刚性固定下部剪力
     * </pre>
     *
     * <code>repeated double gangxingXiajian = 11;</code>
     */
    public Builder clearGangxingXiajian() {
      gangxingXiajian_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000400);
      onChanged();
      return this;
    }

    private java.util.List<java.lang.Double> yingliZhongying_ = java.util.Collections.emptyList();
    private void ensureYingliZhongyingIsMutable() {
      if (!((bitField0_ & 0x00000800) == 0x00000800)) {
        yingliZhongying_ = new java.util.ArrayList<java.lang.Double>(yingliZhongying_);
        bitField0_ |= 0x00000800;
       }
    }
    /**
     * <pre>
     *应力值中部应力
     * </pre>
     *
     * <code>repeated double yingliZhongying = 12;</code>
     */
    public java.util.List<java.lang.Double>
        getYingliZhongyingList() {
      return java.util.Collections.unmodifiableList(yingliZhongying_);
    }
    /**
     * <pre>
     *应力值中部应力
     * </pre>
     *
     * <code>repeated double yingliZhongying = 12;</code>
     */
    public int getYingliZhongyingCount() {
      return yingliZhongying_.size();
    }
    /**
     * <pre>
     *应力值中部应力
     * </pre>
     *
     * <code>repeated double yingliZhongying = 12;</code>
     */
    public double getYingliZhongying(int index) {
      return yingliZhongying_.get(index);
    }
    /**
     * <pre>
     *应力值中部应力
     * </pre>
     *
     * <code>repeated double yingliZhongying = 12;</code>
     */
    public Builder setYingliZhongying(
        int index, double value) {
      ensureYingliZhongyingIsMutable();
      yingliZhongying_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *应力值中部应力
     * </pre>
     *
     * <code>repeated double yingliZhongying = 12;</code>
     */
    public Builder addYingliZhongying(double value) {
      ensureYingliZhongyingIsMutable();
      yingliZhongying_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *应力值中部应力
     * </pre>
     *
     * <code>repeated double yingliZhongying = 12;</code>
     */
    public Builder addAllYingliZhongying(
        java.lang.Iterable<? extends java.lang.Double> values) {
      ensureYingliZhongyingIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, yingliZhongying_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *应力值中部应力
     * </pre>
     *
     * <code>repeated double yingliZhongying = 12;</code>
     */
    public Builder clearYingliZhongying() {
      yingliZhongying_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000800);
      onChanged();
      return this;
    }

    private java.util.List<java.lang.Double> yingliShangying_ = java.util.Collections.emptyList();
    private void ensureYingliShangyingIsMutable() {
      if (!((bitField0_ & 0x00001000) == 0x00001000)) {
        yingliShangying_ = new java.util.ArrayList<java.lang.Double>(yingliShangying_);
        bitField0_ |= 0x00001000;
       }
    }
    /**
     * <pre>
     *应力值上部应力
     * </pre>
     *
     * <code>repeated double yingliShangying = 13;</code>
     */
    public java.util.List<java.lang.Double>
        getYingliShangyingList() {
      return java.util.Collections.unmodifiableList(yingliShangying_);
    }
    /**
     * <pre>
     *应力值上部应力
     * </pre>
     *
     * <code>repeated double yingliShangying = 13;</code>
     */
    public int getYingliShangyingCount() {
      return yingliShangying_.size();
    }
    /**
     * <pre>
     *应力值上部应力
     * </pre>
     *
     * <code>repeated double yingliShangying = 13;</code>
     */
    public double getYingliShangying(int index) {
      return yingliShangying_.get(index);
    }
    /**
     * <pre>
     *应力值上部应力
     * </pre>
     *
     * <code>repeated double yingliShangying = 13;</code>
     */
    public Builder setYingliShangying(
        int index, double value) {
      ensureYingliShangyingIsMutable();
      yingliShangying_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *应力值上部应力
     * </pre>
     *
     * <code>repeated double yingliShangying = 13;</code>
     */
    public Builder addYingliShangying(double value) {
      ensureYingliShangyingIsMutable();
      yingliShangying_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *应力值上部应力
     * </pre>
     *
     * <code>repeated double yingliShangying = 13;</code>
     */
    public Builder addAllYingliShangying(
        java.lang.Iterable<? extends java.lang.Double> values) {
      ensureYingliShangyingIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, yingliShangying_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *应力值上部应力
     * </pre>
     *
     * <code>repeated double yingliShangying = 13;</code>
     */
    public Builder clearYingliShangying() {
      yingliShangying_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00001000);
      onChanged();
      return this;
    }

    private java.util.List<java.lang.Double> yingliXiaying_ = java.util.Collections.emptyList();
    private void ensureYingliXiayingIsMutable() {
      if (!((bitField0_ & 0x00002000) == 0x00002000)) {
        yingliXiaying_ = new java.util.ArrayList<java.lang.Double>(yingliXiaying_);
        bitField0_ |= 0x00002000;
       }
    }
    /**
     * <pre>
     *应力值下部应力
     * </pre>
     *
     * <code>repeated double yingliXiaying = 14;</code>
     */
    public java.util.List<java.lang.Double>
        getYingliXiayingList() {
      return java.util.Collections.unmodifiableList(yingliXiaying_);
    }
    /**
     * <pre>
     *应力值下部应力
     * </pre>
     *
     * <code>repeated double yingliXiaying = 14;</code>
     */
    public int getYingliXiayingCount() {
      return yingliXiaying_.size();
    }
    /**
     * <pre>
     *应力值下部应力
     * </pre>
     *
     * <code>repeated double yingliXiaying = 14;</code>
     */
    public double getYingliXiaying(int index) {
      return yingliXiaying_.get(index);
    }
    /**
     * <pre>
     *应力值下部应力
     * </pre>
     *
     * <code>repeated double yingliXiaying = 14;</code>
     */
    public Builder setYingliXiaying(
        int index, double value) {
      ensureYingliXiayingIsMutable();
      yingliXiaying_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *应力值下部应力
     * </pre>
     *
     * <code>repeated double yingliXiaying = 14;</code>
     */
    public Builder addYingliXiaying(double value) {
      ensureYingliXiayingIsMutable();
      yingliXiaying_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *应力值下部应力
     * </pre>
     *
     * <code>repeated double yingliXiaying = 14;</code>
     */
    public Builder addAllYingliXiaying(
        java.lang.Iterable<? extends java.lang.Double> values) {
      ensureYingliXiayingIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, yingliXiaying_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *应力值下部应力
     * </pre>
     *
     * <code>repeated double yingliXiaying = 14;</code>
     */
    public Builder clearYingliXiaying() {
      yingliXiaying_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00002000);
      onChanged();
      return this;
    }

    private java.util.List<java.lang.Double> yingliXuying_ = java.util.Collections.emptyList();
    private void ensureYingliXuyingIsMutable() {
      if (!((bitField0_ & 0x00004000) == 0x00004000)) {
        yingliXuying_ = new java.util.ArrayList<java.lang.Double>(yingliXuying_);
        bitField0_ |= 0x00004000;
       }
    }
    /**
     * <pre>
     *应力值许用应力
     * </pre>
     *
     * <code>repeated double yingliXuying = 15;</code>
     */
    public java.util.List<java.lang.Double>
        getYingliXuyingList() {
      return java.util.Collections.unmodifiableList(yingliXuying_);
    }
    /**
     * <pre>
     *应力值许用应力
     * </pre>
     *
     * <code>repeated double yingliXuying = 15;</code>
     */
    public int getYingliXuyingCount() {
      return yingliXuying_.size();
    }
    /**
     * <pre>
     *应力值许用应力
     * </pre>
     *
     * <code>repeated double yingliXuying = 15;</code>
     */
    public double getYingliXuying(int index) {
      return yingliXuying_.get(index);
    }
    /**
     * <pre>
     *应力值许用应力
     * </pre>
     *
     * <code>repeated double yingliXuying = 15;</code>
     */
    public Builder setYingliXuying(
        int index, double value) {
      ensureYingliXuyingIsMutable();
      yingliXuying_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *应力值许用应力
     * </pre>
     *
     * <code>repeated double yingliXuying = 15;</code>
     */
    public Builder addYingliXuying(double value) {
      ensureYingliXuyingIsMutable();
      yingliXuying_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *应力值许用应力
     * </pre>
     *
     * <code>repeated double yingliXuying = 15;</code>
     */
    public Builder addAllYingliXuying(
        java.lang.Iterable<? extends java.lang.Double> values) {
      ensureYingliXuyingIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, yingliXuying_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *应力值许用应力
     * </pre>
     *
     * <code>repeated double yingliXuying = 15;</code>
     */
    public Builder clearYingliXuying() {
      yingliXuying_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00004000);
      onChanged();
      return this;
    }

    private java.util.List<java.lang.Double> yingliShangjian_ = java.util.Collections.emptyList();
    private void ensureYingliShangjianIsMutable() {
      if (!((bitField0_ & 0x00008000) == 0x00008000)) {
        yingliShangjian_ = new java.util.ArrayList<java.lang.Double>(yingliShangjian_);
        bitField0_ |= 0x00008000;
       }
    }
    /**
     * <pre>
     *应力值上部剪力
     * </pre>
     *
     * <code>repeated double yingliShangjian = 16;</code>
     */
    public java.util.List<java.lang.Double>
        getYingliShangjianList() {
      return java.util.Collections.unmodifiableList(yingliShangjian_);
    }
    /**
     * <pre>
     *应力值上部剪力
     * </pre>
     *
     * <code>repeated double yingliShangjian = 16;</code>
     */
    public int getYingliShangjianCount() {
      return yingliShangjian_.size();
    }
    /**
     * <pre>
     *应力值上部剪力
     * </pre>
     *
     * <code>repeated double yingliShangjian = 16;</code>
     */
    public double getYingliShangjian(int index) {
      return yingliShangjian_.get(index);
    }
    /**
     * <pre>
     *应力值上部剪力
     * </pre>
     *
     * <code>repeated double yingliShangjian = 16;</code>
     */
    public Builder setYingliShangjian(
        int index, double value) {
      ensureYingliShangjianIsMutable();
      yingliShangjian_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *应力值上部剪力
     * </pre>
     *
     * <code>repeated double yingliShangjian = 16;</code>
     */
    public Builder addYingliShangjian(double value) {
      ensureYingliShangjianIsMutable();
      yingliShangjian_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *应力值上部剪力
     * </pre>
     *
     * <code>repeated double yingliShangjian = 16;</code>
     */
    public Builder addAllYingliShangjian(
        java.lang.Iterable<? extends java.lang.Double> values) {
      ensureYingliShangjianIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, yingliShangjian_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *应力值上部剪力
     * </pre>
     *
     * <code>repeated double yingliShangjian = 16;</code>
     */
    public Builder clearYingliShangjian() {
      yingliShangjian_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00008000);
      onChanged();
      return this;
    }

    private java.util.List<java.lang.Double> yingliXiajian_ = java.util.Collections.emptyList();
    private void ensureYingliXiajianIsMutable() {
      if (!((bitField0_ & 0x00010000) == 0x00010000)) {
        yingliXiajian_ = new java.util.ArrayList<java.lang.Double>(yingliXiajian_);
        bitField0_ |= 0x00010000;
       }
    }
    /**
     * <pre>
     *应力值下部剪力
     * </pre>
     *
     * <code>repeated double yingliXiajian = 17;</code>
     */
    public java.util.List<java.lang.Double>
        getYingliXiajianList() {
      return java.util.Collections.unmodifiableList(yingliXiajian_);
    }
    /**
     * <pre>
     *应力值下部剪力
     * </pre>
     *
     * <code>repeated double yingliXiajian = 17;</code>
     */
    public int getYingliXiajianCount() {
      return yingliXiajian_.size();
    }
    /**
     * <pre>
     *应力值下部剪力
     * </pre>
     *
     * <code>repeated double yingliXiajian = 17;</code>
     */
    public double getYingliXiajian(int index) {
      return yingliXiajian_.get(index);
    }
    /**
     * <pre>
     *应力值下部剪力
     * </pre>
     *
     * <code>repeated double yingliXiajian = 17;</code>
     */
    public Builder setYingliXiajian(
        int index, double value) {
      ensureYingliXiajianIsMutable();
      yingliXiajian_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *应力值下部剪力
     * </pre>
     *
     * <code>repeated double yingliXiajian = 17;</code>
     */
    public Builder addYingliXiajian(double value) {
      ensureYingliXiajianIsMutable();
      yingliXiajian_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *应力值下部剪力
     * </pre>
     *
     * <code>repeated double yingliXiajian = 17;</code>
     */
    public Builder addAllYingliXiajian(
        java.lang.Iterable<? extends java.lang.Double> values) {
      ensureYingliXiajianIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, yingliXiajian_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *应力值下部剪力
     * </pre>
     *
     * <code>repeated double yingliXiajian = 17;</code>
     */
    public Builder clearYingliXiajian() {
      yingliXiajian_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00010000);
      onChanged();
      return this;
    }

    private java.util.List<java.lang.Double> yingliXujian_ = java.util.Collections.emptyList();
    private void ensureYingliXujianIsMutable() {
      if (!((bitField0_ & 0x00020000) == 0x00020000)) {
        yingliXujian_ = new java.util.ArrayList<java.lang.Double>(yingliXujian_);
        bitField0_ |= 0x00020000;
       }
    }
    /**
     * <pre>
     *应力值许用剪力
     * </pre>
     *
     * <code>repeated double yingliXujian = 18;</code>
     */
    public java.util.List<java.lang.Double>
        getYingliXujianList() {
      return java.util.Collections.unmodifiableList(yingliXujian_);
    }
    /**
     * <pre>
     *应力值许用剪力
     * </pre>
     *
     * <code>repeated double yingliXujian = 18;</code>
     */
    public int getYingliXujianCount() {
      return yingliXujian_.size();
    }
    /**
     * <pre>
     *应力值许用剪力
     * </pre>
     *
     * <code>repeated double yingliXujian = 18;</code>
     */
    public double getYingliXujian(int index) {
      return yingliXujian_.get(index);
    }
    /**
     * <pre>
     *应力值许用剪力
     * </pre>
     *
     * <code>repeated double yingliXujian = 18;</code>
     */
    public Builder setYingliXujian(
        int index, double value) {
      ensureYingliXujianIsMutable();
      yingliXujian_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *应力值许用剪力
     * </pre>
     *
     * <code>repeated double yingliXujian = 18;</code>
     */
    public Builder addYingliXujian(double value) {
      ensureYingliXujianIsMutable();
      yingliXujian_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *应力值许用剪力
     * </pre>
     *
     * <code>repeated double yingliXujian = 18;</code>
     */
    public Builder addAllYingliXujian(
        java.lang.Iterable<? extends java.lang.Double> values) {
      ensureYingliXujianIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, yingliXujian_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *应力值许用剪力
     * </pre>
     *
     * <code>repeated double yingliXujian = 18;</code>
     */
    public Builder clearYingliXujian() {
      yingliXujian_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00020000);
      onChanged();
      return this;
    }

    private java.util.List<java.lang.Double> mMaxEl_ = java.util.Collections.emptyList();
    private void ensureMMaxElIsMutable() {
      if (!((bitField0_ & 0x00040000) == 0x00040000)) {
        mMaxEl_ = new java.util.ArrayList<java.lang.Double>(mMaxEl_);
        bitField0_ |= 0x00040000;
       }
    }
    /**
     * <pre>
     *new614----------------
     *弹性连续梁最大弯矩
     * </pre>
     *
     * <code>repeated double M_max_el = 19;</code>
     */
    public java.util.List<java.lang.Double>
        getMMaxElList() {
      return java.util.Collections.unmodifiableList(mMaxEl_);
    }
    /**
     * <pre>
     *new614----------------
     *弹性连续梁最大弯矩
     * </pre>
     *
     * <code>repeated double M_max_el = 19;</code>
     */
    public int getMMaxElCount() {
      return mMaxEl_.size();
    }
    /**
     * <pre>
     *new614----------------
     *弹性连续梁最大弯矩
     * </pre>
     *
     * <code>repeated double M_max_el = 19;</code>
     */
    public double getMMaxEl(int index) {
      return mMaxEl_.get(index);
    }
    /**
     * <pre>
     *new614----------------
     *弹性连续梁最大弯矩
     * </pre>
     *
     * <code>repeated double M_max_el = 19;</code>
     */
    public Builder setMMaxEl(
        int index, double value) {
      ensureMMaxElIsMutable();
      mMaxEl_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *new614----------------
     *弹性连续梁最大弯矩
     * </pre>
     *
     * <code>repeated double M_max_el = 19;</code>
     */
    public Builder addMMaxEl(double value) {
      ensureMMaxElIsMutable();
      mMaxEl_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *new614----------------
     *弹性连续梁最大弯矩
     * </pre>
     *
     * <code>repeated double M_max_el = 19;</code>
     */
    public Builder addAllMMaxEl(
        java.lang.Iterable<? extends java.lang.Double> values) {
      ensureMMaxElIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, mMaxEl_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *new614----------------
     *弹性连续梁最大弯矩
     * </pre>
     *
     * <code>repeated double M_max_el = 19;</code>
     */
    public Builder clearMMaxEl() {
      mMaxEl_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00040000);
      onChanged();
      return this;
    }

    private java.util.List<java.lang.Double> nMaxEl_ = java.util.Collections.emptyList();
    private void ensureNMaxElIsMutable() {
      if (!((bitField0_ & 0x00080000) == 0x00080000)) {
        nMaxEl_ = new java.util.ArrayList<java.lang.Double>(nMaxEl_);
        bitField0_ |= 0x00080000;
       }
    }
    /**
     * <pre>
     *弹性连续梁最大支撑力
     * </pre>
     *
     * <code>repeated double N_max_el = 20;</code>
     */
    public java.util.List<java.lang.Double>
        getNMaxElList() {
      return java.util.Collections.unmodifiableList(nMaxEl_);
    }
    /**
     * <pre>
     *弹性连续梁最大支撑力
     * </pre>
     *
     * <code>repeated double N_max_el = 20;</code>
     */
    public int getNMaxElCount() {
      return nMaxEl_.size();
    }
    /**
     * <pre>
     *弹性连续梁最大支撑力
     * </pre>
     *
     * <code>repeated double N_max_el = 20;</code>
     */
    public double getNMaxEl(int index) {
      return nMaxEl_.get(index);
    }
    /**
     * <pre>
     *弹性连续梁最大支撑力
     * </pre>
     *
     * <code>repeated double N_max_el = 20;</code>
     */
    public Builder setNMaxEl(
        int index, double value) {
      ensureNMaxElIsMutable();
      nMaxEl_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *弹性连续梁最大支撑力
     * </pre>
     *
     * <code>repeated double N_max_el = 20;</code>
     */
    public Builder addNMaxEl(double value) {
      ensureNMaxElIsMutable();
      nMaxEl_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *弹性连续梁最大支撑力
     * </pre>
     *
     * <code>repeated double N_max_el = 20;</code>
     */
    public Builder addAllNMaxEl(
        java.lang.Iterable<? extends java.lang.Double> values) {
      ensureNMaxElIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, nMaxEl_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *弹性连续梁最大支撑力
     * </pre>
     *
     * <code>repeated double N_max_el = 20;</code>
     */
    public Builder clearNMaxEl() {
      nMaxEl_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00080000);
      onChanged();
      return this;
    }

    private java.util.List<java.lang.Double> stressMaxEl_ = java.util.Collections.emptyList();
    private void ensureStressMaxElIsMutable() {
      if (!((bitField0_ & 0x00100000) == 0x00100000)) {
        stressMaxEl_ = new java.util.ArrayList<java.lang.Double>(stressMaxEl_);
        bitField0_ |= 0x00100000;
       }
    }
    /**
     * <pre>
     *弹性连续梁最大正应力
     * </pre>
     *
     * <code>repeated double Stress_max_el = 21;</code>
     */
    public java.util.List<java.lang.Double>
        getStressMaxElList() {
      return java.util.Collections.unmodifiableList(stressMaxEl_);
    }
    /**
     * <pre>
     *弹性连续梁最大正应力
     * </pre>
     *
     * <code>repeated double Stress_max_el = 21;</code>
     */
    public int getStressMaxElCount() {
      return stressMaxEl_.size();
    }
    /**
     * <pre>
     *弹性连续梁最大正应力
     * </pre>
     *
     * <code>repeated double Stress_max_el = 21;</code>
     */
    public double getStressMaxEl(int index) {
      return stressMaxEl_.get(index);
    }
    /**
     * <pre>
     *弹性连续梁最大正应力
     * </pre>
     *
     * <code>repeated double Stress_max_el = 21;</code>
     */
    public Builder setStressMaxEl(
        int index, double value) {
      ensureStressMaxElIsMutable();
      stressMaxEl_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *弹性连续梁最大正应力
     * </pre>
     *
     * <code>repeated double Stress_max_el = 21;</code>
     */
    public Builder addStressMaxEl(double value) {
      ensureStressMaxElIsMutable();
      stressMaxEl_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *弹性连续梁最大正应力
     * </pre>
     *
     * <code>repeated double Stress_max_el = 21;</code>
     */
    public Builder addAllStressMaxEl(
        java.lang.Iterable<? extends java.lang.Double> values) {
      ensureStressMaxElIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, stressMaxEl_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *弹性连续梁最大正应力
     * </pre>
     *
     * <code>repeated double Stress_max_el = 21;</code>
     */
    public Builder clearStressMaxEl() {
      stressMaxEl_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00100000);
      onChanged();
      return this;
    }

    private java.util.List<java.lang.Double> shearMaxEl_ = java.util.Collections.emptyList();
    private void ensureShearMaxElIsMutable() {
      if (!((bitField0_ & 0x00200000) == 0x00200000)) {
        shearMaxEl_ = new java.util.ArrayList<java.lang.Double>(shearMaxEl_);
        bitField0_ |= 0x00200000;
       }
    }
    /**
     * <pre>
     *弹性连续梁最大剪切力
     * </pre>
     *
     * <code>repeated double Shear_max_el = 22;</code>
     */
    public java.util.List<java.lang.Double>
        getShearMaxElList() {
      return java.util.Collections.unmodifiableList(shearMaxEl_);
    }
    /**
     * <pre>
     *弹性连续梁最大剪切力
     * </pre>
     *
     * <code>repeated double Shear_max_el = 22;</code>
     */
    public int getShearMaxElCount() {
      return shearMaxEl_.size();
    }
    /**
     * <pre>
     *弹性连续梁最大剪切力
     * </pre>
     *
     * <code>repeated double Shear_max_el = 22;</code>
     */
    public double getShearMaxEl(int index) {
      return shearMaxEl_.get(index);
    }
    /**
     * <pre>
     *弹性连续梁最大剪切力
     * </pre>
     *
     * <code>repeated double Shear_max_el = 22;</code>
     */
    public Builder setShearMaxEl(
        int index, double value) {
      ensureShearMaxElIsMutable();
      shearMaxEl_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *弹性连续梁最大剪切力
     * </pre>
     *
     * <code>repeated double Shear_max_el = 22;</code>
     */
    public Builder addShearMaxEl(double value) {
      ensureShearMaxElIsMutable();
      shearMaxEl_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *弹性连续梁最大剪切力
     * </pre>
     *
     * <code>repeated double Shear_max_el = 22;</code>
     */
    public Builder addAllShearMaxEl(
        java.lang.Iterable<? extends java.lang.Double> values) {
      ensureShearMaxElIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, shearMaxEl_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *弹性连续梁最大剪切力
     * </pre>
     *
     * <code>repeated double Shear_max_el = 22;</code>
     */
    public Builder clearShearMaxEl() {
      shearMaxEl_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00200000);
      onChanged();
      return this;
    }

    private int code_ ;
    /**
     * <pre>
     *0-正常 1-异常
     * </pre>
     *
     * <code>int32 code = 23;</code>
     */
    public int getCode() {
      return code_;
    }
    /**
     * <pre>
     *0-正常 1-异常
     * </pre>
     *
     * <code>int32 code = 23;</code>
     */
    public Builder setCode(int value) {
      
      code_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *0-正常 1-异常
     * </pre>
     *
     * <code>int32 code = 23;</code>
     */
    public Builder clearCode() {
      
      code_ = 0;
      onChanged();
      return this;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }


    // @@protoc_insertion_point(builder_scope:com.iscas.biz.calculation.grpc.SupportingMaterialStrengthResponse)
  }

  // @@protoc_insertion_point(class_scope:com.iscas.biz.calculation.grpc.SupportingMaterialStrengthResponse)
  private static final com.iscas.biz.calculation.grpc.SupportingMaterialStrengthResponse DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.iscas.biz.calculation.grpc.SupportingMaterialStrengthResponse();
  }

  public static com.iscas.biz.calculation.grpc.SupportingMaterialStrengthResponse getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<SupportingMaterialStrengthResponse>
      PARSER = new com.google.protobuf.AbstractParser<SupportingMaterialStrengthResponse>() {
    public SupportingMaterialStrengthResponse parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
        return new SupportingMaterialStrengthResponse(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<SupportingMaterialStrengthResponse> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<SupportingMaterialStrengthResponse> getParserForType() {
    return PARSER;
  }

  public com.iscas.biz.calculation.grpc.SupportingMaterialStrengthResponse getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

