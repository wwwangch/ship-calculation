// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: calculation.proto

package com.iscas.biz.calculation.grpc;

/**
 * Protobuf type {@code com.iscas.biz.calculation.grpc.CompartmentBulkheadSheetResponse}
 */
public  final class CompartmentBulkheadSheetResponse extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:com.iscas.biz.calculation.grpc.CompartmentBulkheadSheetResponse)
    CompartmentBulkheadSheetResponseOrBuilder {
  // Use CompartmentBulkheadSheetResponse.newBuilder() to construct.
  private CompartmentBulkheadSheetResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private CompartmentBulkheadSheetResponse() {
    yatou_ = java.util.Collections.emptyList();
    disload_ = java.util.Collections.emptyList();
    lgvList_ = java.util.Collections.emptyList();
    uList_ = java.util.Collections.emptyList();
    chi1List_ = java.util.Collections.emptyList();
    chi2List_ = java.util.Collections.emptyList();
    stressXlList_ = java.util.Collections.emptyList();
    stressKuozhong_ = java.util.Collections.emptyList();
    stressZhizuo_ = java.util.Collections.emptyList();
    shearAllow_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
  }
  private CompartmentBulkheadSheetResponse(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    int mutable_bitField0_ = 0;
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!input.skipField(tag)) {
              done = true;
            }
            break;
          }
          case 9: {
            if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
              yatou_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000001;
            }
            yatou_.add(input.readDouble());
            break;
          }
          case 10: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
              yatou_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000001;
            }
            while (input.getBytesUntilLimit() > 0) {
              yatou_.add(input.readDouble());
            }
            input.popLimit(limit);
            break;
          }
          case 17: {
            if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
              disload_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000002;
            }
            disload_.add(input.readDouble());
            break;
          }
          case 18: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
              disload_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000002;
            }
            while (input.getBytesUntilLimit() > 0) {
              disload_.add(input.readDouble());
            }
            input.popLimit(limit);
            break;
          }
          case 25: {
            if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
              lgvList_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000004;
            }
            lgvList_.add(input.readDouble());
            break;
          }
          case 26: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
              lgvList_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000004;
            }
            while (input.getBytesUntilLimit() > 0) {
              lgvList_.add(input.readDouble());
            }
            input.popLimit(limit);
            break;
          }
          case 33: {
            if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
              uList_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000008;
            }
            uList_.add(input.readDouble());
            break;
          }
          case 34: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
              uList_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000008;
            }
            while (input.getBytesUntilLimit() > 0) {
              uList_.add(input.readDouble());
            }
            input.popLimit(limit);
            break;
          }
          case 41: {
            if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
              chi1List_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000010;
            }
            chi1List_.add(input.readDouble());
            break;
          }
          case 42: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000010) == 0x00000010) && input.getBytesUntilLimit() > 0) {
              chi1List_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000010;
            }
            while (input.getBytesUntilLimit() > 0) {
              chi1List_.add(input.readDouble());
            }
            input.popLimit(limit);
            break;
          }
          case 49: {
            if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
              chi2List_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000020;
            }
            chi2List_.add(input.readDouble());
            break;
          }
          case 50: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
              chi2List_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000020;
            }
            while (input.getBytesUntilLimit() > 0) {
              chi2List_.add(input.readDouble());
            }
            input.popLimit(limit);
            break;
          }
          case 57: {
            if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
              stressXlList_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000040;
            }
            stressXlList_.add(input.readDouble());
            break;
          }
          case 58: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
              stressXlList_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000040;
            }
            while (input.getBytesUntilLimit() > 0) {
              stressXlList_.add(input.readDouble());
            }
            input.popLimit(limit);
            break;
          }
          case 65: {
            if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
              stressKuozhong_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000080;
            }
            stressKuozhong_.add(input.readDouble());
            break;
          }
          case 66: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000080) == 0x00000080) && input.getBytesUntilLimit() > 0) {
              stressKuozhong_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000080;
            }
            while (input.getBytesUntilLimit() > 0) {
              stressKuozhong_.add(input.readDouble());
            }
            input.popLimit(limit);
            break;
          }
          case 73: {
            if (!((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
              stressZhizuo_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000100;
            }
            stressZhizuo_.add(input.readDouble());
            break;
          }
          case 74: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000100) == 0x00000100) && input.getBytesUntilLimit() > 0) {
              stressZhizuo_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000100;
            }
            while (input.getBytesUntilLimit() > 0) {
              stressZhizuo_.add(input.readDouble());
            }
            input.popLimit(limit);
            break;
          }
          case 81: {
            if (!((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
              shearAllow_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000200;
            }
            shearAllow_.add(input.readDouble());
            break;
          }
          case 82: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000200) == 0x00000200) && input.getBytesUntilLimit() > 0) {
              shearAllow_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000200;
            }
            while (input.getBytesUntilLimit() > 0) {
              shearAllow_.add(input.readDouble());
            }
            input.popLimit(limit);
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
        yatou_ = java.util.Collections.unmodifiableList(yatou_);
      }
      if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
        disload_ = java.util.Collections.unmodifiableList(disload_);
      }
      if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
        lgvList_ = java.util.Collections.unmodifiableList(lgvList_);
      }
      if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
        uList_ = java.util.Collections.unmodifiableList(uList_);
      }
      if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
        chi1List_ = java.util.Collections.unmodifiableList(chi1List_);
      }
      if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
        chi2List_ = java.util.Collections.unmodifiableList(chi2List_);
      }
      if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
        stressXlList_ = java.util.Collections.unmodifiableList(stressXlList_);
      }
      if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
        stressKuozhong_ = java.util.Collections.unmodifiableList(stressKuozhong_);
      }
      if (((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
        stressZhizuo_ = java.util.Collections.unmodifiableList(stressZhizuo_);
      }
      if (((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
        shearAllow_ = java.util.Collections.unmodifiableList(shearAllow_);
      }
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.iscas.biz.calculation.grpc.CalculationProto.internal_static_com_iscas_biz_calculation_grpc_CompartmentBulkheadSheetResponse_descriptor;
  }

  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.iscas.biz.calculation.grpc.CalculationProto.internal_static_com_iscas_biz_calculation_grpc_CompartmentBulkheadSheetResponse_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.iscas.biz.calculation.grpc.CompartmentBulkheadSheetResponse.class, com.iscas.biz.calculation.grpc.CompartmentBulkheadSheetResponse.Builder.class);
  }

  public static final int YATOU_FIELD_NUMBER = 1;
  private java.util.List<java.lang.Double> yatou_;
  /**
   * <pre>
   *破损压头水压值
   * </pre>
   *
   * <code>repeated double yatou = 1;</code>
   */
  public java.util.List<java.lang.Double>
      getYatouList() {
    return yatou_;
  }
  /**
   * <pre>
   *破损压头水压值
   * </pre>
   *
   * <code>repeated double yatou = 1;</code>
   */
  public int getYatouCount() {
    return yatou_.size();
  }
  /**
   * <pre>
   *破损压头水压值
   * </pre>
   *
   * <code>repeated double yatou = 1;</code>
   */
  public double getYatou(int index) {
    return yatou_.get(index);
  }
  private int yatouMemoizedSerializedSize = -1;

  public static final int DISLOAD_FIELD_NUMBER = 2;
  private java.util.List<java.lang.Double> disload_;
  /**
   * <pre>
   *均布载荷
   * </pre>
   *
   * <code>repeated double disload = 2;</code>
   */
  public java.util.List<java.lang.Double>
      getDisloadList() {
    return disload_;
  }
  /**
   * <pre>
   *均布载荷
   * </pre>
   *
   * <code>repeated double disload = 2;</code>
   */
  public int getDisloadCount() {
    return disload_.size();
  }
  /**
   * <pre>
   *均布载荷
   * </pre>
   *
   * <code>repeated double disload = 2;</code>
   */
  public double getDisload(int index) {
    return disload_.get(index);
  }
  private int disloadMemoizedSerializedSize = -1;

  public static final int LGVLIST_FIELD_NUMBER = 3;
  private java.util.List<java.lang.Double> lgvList_;
  /**
   * <pre>
   *lgv
   * </pre>
   *
   * <code>repeated double lgvList = 3;</code>
   */
  public java.util.List<java.lang.Double>
      getLgvListList() {
    return lgvList_;
  }
  /**
   * <pre>
   *lgv
   * </pre>
   *
   * <code>repeated double lgvList = 3;</code>
   */
  public int getLgvListCount() {
    return lgvList_.size();
  }
  /**
   * <pre>
   *lgv
   * </pre>
   *
   * <code>repeated double lgvList = 3;</code>
   */
  public double getLgvList(int index) {
    return lgvList_.get(index);
  }
  private int lgvListMemoizedSerializedSize = -1;

  public static final int ULIST_FIELD_NUMBER = 4;
  private java.util.List<java.lang.Double> uList_;
  /**
   * <pre>
   *u输出
   * </pre>
   *
   * <code>repeated double uList = 4;</code>
   */
  public java.util.List<java.lang.Double>
      getUListList() {
    return uList_;
  }
  /**
   * <pre>
   *u输出
   * </pre>
   *
   * <code>repeated double uList = 4;</code>
   */
  public int getUListCount() {
    return uList_.size();
  }
  /**
   * <pre>
   *u输出
   * </pre>
   *
   * <code>repeated double uList = 4;</code>
   */
  public double getUList(int index) {
    return uList_.get(index);
  }
  private int uListMemoizedSerializedSize = -1;

  public static final int CHI1LIST_FIELD_NUMBER = 5;
  private java.util.List<java.lang.Double> chi1List_;
  /**
   * <pre>
   *chi1 输出
   * </pre>
   *
   * <code>repeated double chi1List = 5;</code>
   */
  public java.util.List<java.lang.Double>
      getChi1ListList() {
    return chi1List_;
  }
  /**
   * <pre>
   *chi1 输出
   * </pre>
   *
   * <code>repeated double chi1List = 5;</code>
   */
  public int getChi1ListCount() {
    return chi1List_.size();
  }
  /**
   * <pre>
   *chi1 输出
   * </pre>
   *
   * <code>repeated double chi1List = 5;</code>
   */
  public double getChi1List(int index) {
    return chi1List_.get(index);
  }
  private int chi1ListMemoizedSerializedSize = -1;

  public static final int CHI2LIST_FIELD_NUMBER = 6;
  private java.util.List<java.lang.Double> chi2List_;
  /**
   * <pre>
   *chi2 输出
   * </pre>
   *
   * <code>repeated double chi2List = 6;</code>
   */
  public java.util.List<java.lang.Double>
      getChi2ListList() {
    return chi2List_;
  }
  /**
   * <pre>
   *chi2 输出
   * </pre>
   *
   * <code>repeated double chi2List = 6;</code>
   */
  public int getChi2ListCount() {
    return chi2List_.size();
  }
  /**
   * <pre>
   *chi2 输出
   * </pre>
   *
   * <code>repeated double chi2List = 6;</code>
   */
  public double getChi2List(int index) {
    return chi2List_.get(index);
  }
  private int chi2ListMemoizedSerializedSize = -1;

  public static final int STRESSXLLIST_FIELD_NUMBER = 7;
  private java.util.List<java.lang.Double> stressXlList_;
  /**
   * <pre>
   *悬链应力
   * </pre>
   *
   * <code>repeated double stressXlList = 7;</code>
   */
  public java.util.List<java.lang.Double>
      getStressXlListList() {
    return stressXlList_;
  }
  /**
   * <pre>
   *悬链应力
   * </pre>
   *
   * <code>repeated double stressXlList = 7;</code>
   */
  public int getStressXlListCount() {
    return stressXlList_.size();
  }
  /**
   * <pre>
   *悬链应力
   * </pre>
   *
   * <code>repeated double stressXlList = 7;</code>
   */
  public double getStressXlList(int index) {
    return stressXlList_.get(index);
  }
  private int stressXlListMemoizedSerializedSize = -1;

  public static final int STRESSKUOZHONG_FIELD_NUMBER = 8;
  private java.util.List<java.lang.Double> stressKuozhong_;
  /**
   * <pre>
   *跨中应力
   * </pre>
   *
   * <code>repeated double stressKuozhong = 8;</code>
   */
  public java.util.List<java.lang.Double>
      getStressKuozhongList() {
    return stressKuozhong_;
  }
  /**
   * <pre>
   *跨中应力
   * </pre>
   *
   * <code>repeated double stressKuozhong = 8;</code>
   */
  public int getStressKuozhongCount() {
    return stressKuozhong_.size();
  }
  /**
   * <pre>
   *跨中应力
   * </pre>
   *
   * <code>repeated double stressKuozhong = 8;</code>
   */
  public double getStressKuozhong(int index) {
    return stressKuozhong_.get(index);
  }
  private int stressKuozhongMemoizedSerializedSize = -1;

  public static final int STRESSZHIZUO_FIELD_NUMBER = 9;
  private java.util.List<java.lang.Double> stressZhizuo_;
  /**
   * <pre>
   *支座应力
   * </pre>
   *
   * <code>repeated double stressZhizuo = 9;</code>
   */
  public java.util.List<java.lang.Double>
      getStressZhizuoList() {
    return stressZhizuo_;
  }
  /**
   * <pre>
   *支座应力
   * </pre>
   *
   * <code>repeated double stressZhizuo = 9;</code>
   */
  public int getStressZhizuoCount() {
    return stressZhizuo_.size();
  }
  /**
   * <pre>
   *支座应力
   * </pre>
   *
   * <code>repeated double stressZhizuo = 9;</code>
   */
  public double getStressZhizuo(int index) {
    return stressZhizuo_.get(index);
  }
  private int stressZhizuoMemoizedSerializedSize = -1;

  public static final int SHEARALLOW_FIELD_NUMBER = 10;
  private java.util.List<java.lang.Double> shearAllow_;
  /**
   * <pre>
   *许用剪力
   * </pre>
   *
   * <code>repeated double shearAllow = 10;</code>
   */
  public java.util.List<java.lang.Double>
      getShearAllowList() {
    return shearAllow_;
  }
  /**
   * <pre>
   *许用剪力
   * </pre>
   *
   * <code>repeated double shearAllow = 10;</code>
   */
  public int getShearAllowCount() {
    return shearAllow_.size();
  }
  /**
   * <pre>
   *许用剪力
   * </pre>
   *
   * <code>repeated double shearAllow = 10;</code>
   */
  public double getShearAllow(int index) {
    return shearAllow_.get(index);
  }
  private int shearAllowMemoizedSerializedSize = -1;

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    getSerializedSize();
    if (getYatouList().size() > 0) {
      output.writeUInt32NoTag(10);
      output.writeUInt32NoTag(yatouMemoizedSerializedSize);
    }
    for (int i = 0; i < yatou_.size(); i++) {
      output.writeDoubleNoTag(yatou_.get(i));
    }
    if (getDisloadList().size() > 0) {
      output.writeUInt32NoTag(18);
      output.writeUInt32NoTag(disloadMemoizedSerializedSize);
    }
    for (int i = 0; i < disload_.size(); i++) {
      output.writeDoubleNoTag(disload_.get(i));
    }
    if (getLgvListList().size() > 0) {
      output.writeUInt32NoTag(26);
      output.writeUInt32NoTag(lgvListMemoizedSerializedSize);
    }
    for (int i = 0; i < lgvList_.size(); i++) {
      output.writeDoubleNoTag(lgvList_.get(i));
    }
    if (getUListList().size() > 0) {
      output.writeUInt32NoTag(34);
      output.writeUInt32NoTag(uListMemoizedSerializedSize);
    }
    for (int i = 0; i < uList_.size(); i++) {
      output.writeDoubleNoTag(uList_.get(i));
    }
    if (getChi1ListList().size() > 0) {
      output.writeUInt32NoTag(42);
      output.writeUInt32NoTag(chi1ListMemoizedSerializedSize);
    }
    for (int i = 0; i < chi1List_.size(); i++) {
      output.writeDoubleNoTag(chi1List_.get(i));
    }
    if (getChi2ListList().size() > 0) {
      output.writeUInt32NoTag(50);
      output.writeUInt32NoTag(chi2ListMemoizedSerializedSize);
    }
    for (int i = 0; i < chi2List_.size(); i++) {
      output.writeDoubleNoTag(chi2List_.get(i));
    }
    if (getStressXlListList().size() > 0) {
      output.writeUInt32NoTag(58);
      output.writeUInt32NoTag(stressXlListMemoizedSerializedSize);
    }
    for (int i = 0; i < stressXlList_.size(); i++) {
      output.writeDoubleNoTag(stressXlList_.get(i));
    }
    if (getStressKuozhongList().size() > 0) {
      output.writeUInt32NoTag(66);
      output.writeUInt32NoTag(stressKuozhongMemoizedSerializedSize);
    }
    for (int i = 0; i < stressKuozhong_.size(); i++) {
      output.writeDoubleNoTag(stressKuozhong_.get(i));
    }
    if (getStressZhizuoList().size() > 0) {
      output.writeUInt32NoTag(74);
      output.writeUInt32NoTag(stressZhizuoMemoizedSerializedSize);
    }
    for (int i = 0; i < stressZhizuo_.size(); i++) {
      output.writeDoubleNoTag(stressZhizuo_.get(i));
    }
    if (getShearAllowList().size() > 0) {
      output.writeUInt32NoTag(82);
      output.writeUInt32NoTag(shearAllowMemoizedSerializedSize);
    }
    for (int i = 0; i < shearAllow_.size(); i++) {
      output.writeDoubleNoTag(shearAllow_.get(i));
    }
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    {
      int dataSize = 0;
      dataSize = 8 * getYatouList().size();
      size += dataSize;
      if (!getYatouList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      yatouMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 8 * getDisloadList().size();
      size += dataSize;
      if (!getDisloadList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      disloadMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 8 * getLgvListList().size();
      size += dataSize;
      if (!getLgvListList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      lgvListMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 8 * getUListList().size();
      size += dataSize;
      if (!getUListList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      uListMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 8 * getChi1ListList().size();
      size += dataSize;
      if (!getChi1ListList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      chi1ListMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 8 * getChi2ListList().size();
      size += dataSize;
      if (!getChi2ListList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      chi2ListMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 8 * getStressXlListList().size();
      size += dataSize;
      if (!getStressXlListList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      stressXlListMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 8 * getStressKuozhongList().size();
      size += dataSize;
      if (!getStressKuozhongList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      stressKuozhongMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 8 * getStressZhizuoList().size();
      size += dataSize;
      if (!getStressZhizuoList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      stressZhizuoMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 8 * getShearAllowList().size();
      size += dataSize;
      if (!getShearAllowList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      shearAllowMemoizedSerializedSize = dataSize;
    }
    memoizedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.iscas.biz.calculation.grpc.CompartmentBulkheadSheetResponse)) {
      return super.equals(obj);
    }
    com.iscas.biz.calculation.grpc.CompartmentBulkheadSheetResponse other = (com.iscas.biz.calculation.grpc.CompartmentBulkheadSheetResponse) obj;

    boolean result = true;
    result = result && getYatouList()
        .equals(other.getYatouList());
    result = result && getDisloadList()
        .equals(other.getDisloadList());
    result = result && getLgvListList()
        .equals(other.getLgvListList());
    result = result && getUListList()
        .equals(other.getUListList());
    result = result && getChi1ListList()
        .equals(other.getChi1ListList());
    result = result && getChi2ListList()
        .equals(other.getChi2ListList());
    result = result && getStressXlListList()
        .equals(other.getStressXlListList());
    result = result && getStressKuozhongList()
        .equals(other.getStressKuozhongList());
    result = result && getStressZhizuoList()
        .equals(other.getStressZhizuoList());
    result = result && getShearAllowList()
        .equals(other.getShearAllowList());
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getYatouCount() > 0) {
      hash = (37 * hash) + YATOU_FIELD_NUMBER;
      hash = (53 * hash) + getYatouList().hashCode();
    }
    if (getDisloadCount() > 0) {
      hash = (37 * hash) + DISLOAD_FIELD_NUMBER;
      hash = (53 * hash) + getDisloadList().hashCode();
    }
    if (getLgvListCount() > 0) {
      hash = (37 * hash) + LGVLIST_FIELD_NUMBER;
      hash = (53 * hash) + getLgvListList().hashCode();
    }
    if (getUListCount() > 0) {
      hash = (37 * hash) + ULIST_FIELD_NUMBER;
      hash = (53 * hash) + getUListList().hashCode();
    }
    if (getChi1ListCount() > 0) {
      hash = (37 * hash) + CHI1LIST_FIELD_NUMBER;
      hash = (53 * hash) + getChi1ListList().hashCode();
    }
    if (getChi2ListCount() > 0) {
      hash = (37 * hash) + CHI2LIST_FIELD_NUMBER;
      hash = (53 * hash) + getChi2ListList().hashCode();
    }
    if (getStressXlListCount() > 0) {
      hash = (37 * hash) + STRESSXLLIST_FIELD_NUMBER;
      hash = (53 * hash) + getStressXlListList().hashCode();
    }
    if (getStressKuozhongCount() > 0) {
      hash = (37 * hash) + STRESSKUOZHONG_FIELD_NUMBER;
      hash = (53 * hash) + getStressKuozhongList().hashCode();
    }
    if (getStressZhizuoCount() > 0) {
      hash = (37 * hash) + STRESSZHIZUO_FIELD_NUMBER;
      hash = (53 * hash) + getStressZhizuoList().hashCode();
    }
    if (getShearAllowCount() > 0) {
      hash = (37 * hash) + SHEARALLOW_FIELD_NUMBER;
      hash = (53 * hash) + getShearAllowList().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.iscas.biz.calculation.grpc.CompartmentBulkheadSheetResponse parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.iscas.biz.calculation.grpc.CompartmentBulkheadSheetResponse parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.iscas.biz.calculation.grpc.CompartmentBulkheadSheetResponse parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.iscas.biz.calculation.grpc.CompartmentBulkheadSheetResponse parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.iscas.biz.calculation.grpc.CompartmentBulkheadSheetResponse parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.iscas.biz.calculation.grpc.CompartmentBulkheadSheetResponse parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.iscas.biz.calculation.grpc.CompartmentBulkheadSheetResponse parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.iscas.biz.calculation.grpc.CompartmentBulkheadSheetResponse parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.iscas.biz.calculation.grpc.CompartmentBulkheadSheetResponse parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.iscas.biz.calculation.grpc.CompartmentBulkheadSheetResponse parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.iscas.biz.calculation.grpc.CompartmentBulkheadSheetResponse prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code com.iscas.biz.calculation.grpc.CompartmentBulkheadSheetResponse}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:com.iscas.biz.calculation.grpc.CompartmentBulkheadSheetResponse)
      com.iscas.biz.calculation.grpc.CompartmentBulkheadSheetResponseOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.iscas.biz.calculation.grpc.CalculationProto.internal_static_com_iscas_biz_calculation_grpc_CompartmentBulkheadSheetResponse_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.iscas.biz.calculation.grpc.CalculationProto.internal_static_com_iscas_biz_calculation_grpc_CompartmentBulkheadSheetResponse_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.iscas.biz.calculation.grpc.CompartmentBulkheadSheetResponse.class, com.iscas.biz.calculation.grpc.CompartmentBulkheadSheetResponse.Builder.class);
    }

    // Construct using com.iscas.biz.calculation.grpc.CompartmentBulkheadSheetResponse.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    public Builder clear() {
      super.clear();
      yatou_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000001);
      disload_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000002);
      lgvList_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000004);
      uList_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000008);
      chi1List_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000010);
      chi2List_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000020);
      stressXlList_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000040);
      stressKuozhong_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000080);
      stressZhizuo_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000100);
      shearAllow_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000200);
      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.iscas.biz.calculation.grpc.CalculationProto.internal_static_com_iscas_biz_calculation_grpc_CompartmentBulkheadSheetResponse_descriptor;
    }

    public com.iscas.biz.calculation.grpc.CompartmentBulkheadSheetResponse getDefaultInstanceForType() {
      return com.iscas.biz.calculation.grpc.CompartmentBulkheadSheetResponse.getDefaultInstance();
    }

    public com.iscas.biz.calculation.grpc.CompartmentBulkheadSheetResponse build() {
      com.iscas.biz.calculation.grpc.CompartmentBulkheadSheetResponse result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public com.iscas.biz.calculation.grpc.CompartmentBulkheadSheetResponse buildPartial() {
      com.iscas.biz.calculation.grpc.CompartmentBulkheadSheetResponse result = new com.iscas.biz.calculation.grpc.CompartmentBulkheadSheetResponse(this);
      int from_bitField0_ = bitField0_;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        yatou_ = java.util.Collections.unmodifiableList(yatou_);
        bitField0_ = (bitField0_ & ~0x00000001);
      }
      result.yatou_ = yatou_;
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        disload_ = java.util.Collections.unmodifiableList(disload_);
        bitField0_ = (bitField0_ & ~0x00000002);
      }
      result.disload_ = disload_;
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        lgvList_ = java.util.Collections.unmodifiableList(lgvList_);
        bitField0_ = (bitField0_ & ~0x00000004);
      }
      result.lgvList_ = lgvList_;
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        uList_ = java.util.Collections.unmodifiableList(uList_);
        bitField0_ = (bitField0_ & ~0x00000008);
      }
      result.uList_ = uList_;
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        chi1List_ = java.util.Collections.unmodifiableList(chi1List_);
        bitField0_ = (bitField0_ & ~0x00000010);
      }
      result.chi1List_ = chi1List_;
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        chi2List_ = java.util.Collections.unmodifiableList(chi2List_);
        bitField0_ = (bitField0_ & ~0x00000020);
      }
      result.chi2List_ = chi2List_;
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        stressXlList_ = java.util.Collections.unmodifiableList(stressXlList_);
        bitField0_ = (bitField0_ & ~0x00000040);
      }
      result.stressXlList_ = stressXlList_;
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        stressKuozhong_ = java.util.Collections.unmodifiableList(stressKuozhong_);
        bitField0_ = (bitField0_ & ~0x00000080);
      }
      result.stressKuozhong_ = stressKuozhong_;
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        stressZhizuo_ = java.util.Collections.unmodifiableList(stressZhizuo_);
        bitField0_ = (bitField0_ & ~0x00000100);
      }
      result.stressZhizuo_ = stressZhizuo_;
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        shearAllow_ = java.util.Collections.unmodifiableList(shearAllow_);
        bitField0_ = (bitField0_ & ~0x00000200);
      }
      result.shearAllow_ = shearAllow_;
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.iscas.biz.calculation.grpc.CompartmentBulkheadSheetResponse) {
        return mergeFrom((com.iscas.biz.calculation.grpc.CompartmentBulkheadSheetResponse)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.iscas.biz.calculation.grpc.CompartmentBulkheadSheetResponse other) {
      if (other == com.iscas.biz.calculation.grpc.CompartmentBulkheadSheetResponse.getDefaultInstance()) return this;
      if (!other.yatou_.isEmpty()) {
        if (yatou_.isEmpty()) {
          yatou_ = other.yatou_;
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          ensureYatouIsMutable();
          yatou_.addAll(other.yatou_);
        }
        onChanged();
      }
      if (!other.disload_.isEmpty()) {
        if (disload_.isEmpty()) {
          disload_ = other.disload_;
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          ensureDisloadIsMutable();
          disload_.addAll(other.disload_);
        }
        onChanged();
      }
      if (!other.lgvList_.isEmpty()) {
        if (lgvList_.isEmpty()) {
          lgvList_ = other.lgvList_;
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          ensureLgvListIsMutable();
          lgvList_.addAll(other.lgvList_);
        }
        onChanged();
      }
      if (!other.uList_.isEmpty()) {
        if (uList_.isEmpty()) {
          uList_ = other.uList_;
          bitField0_ = (bitField0_ & ~0x00000008);
        } else {
          ensureUListIsMutable();
          uList_.addAll(other.uList_);
        }
        onChanged();
      }
      if (!other.chi1List_.isEmpty()) {
        if (chi1List_.isEmpty()) {
          chi1List_ = other.chi1List_;
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          ensureChi1ListIsMutable();
          chi1List_.addAll(other.chi1List_);
        }
        onChanged();
      }
      if (!other.chi2List_.isEmpty()) {
        if (chi2List_.isEmpty()) {
          chi2List_ = other.chi2List_;
          bitField0_ = (bitField0_ & ~0x00000020);
        } else {
          ensureChi2ListIsMutable();
          chi2List_.addAll(other.chi2List_);
        }
        onChanged();
      }
      if (!other.stressXlList_.isEmpty()) {
        if (stressXlList_.isEmpty()) {
          stressXlList_ = other.stressXlList_;
          bitField0_ = (bitField0_ & ~0x00000040);
        } else {
          ensureStressXlListIsMutable();
          stressXlList_.addAll(other.stressXlList_);
        }
        onChanged();
      }
      if (!other.stressKuozhong_.isEmpty()) {
        if (stressKuozhong_.isEmpty()) {
          stressKuozhong_ = other.stressKuozhong_;
          bitField0_ = (bitField0_ & ~0x00000080);
        } else {
          ensureStressKuozhongIsMutable();
          stressKuozhong_.addAll(other.stressKuozhong_);
        }
        onChanged();
      }
      if (!other.stressZhizuo_.isEmpty()) {
        if (stressZhizuo_.isEmpty()) {
          stressZhizuo_ = other.stressZhizuo_;
          bitField0_ = (bitField0_ & ~0x00000100);
        } else {
          ensureStressZhizuoIsMutable();
          stressZhizuo_.addAll(other.stressZhizuo_);
        }
        onChanged();
      }
      if (!other.shearAllow_.isEmpty()) {
        if (shearAllow_.isEmpty()) {
          shearAllow_ = other.shearAllow_;
          bitField0_ = (bitField0_ & ~0x00000200);
        } else {
          ensureShearAllowIsMutable();
          shearAllow_.addAll(other.shearAllow_);
        }
        onChanged();
      }
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.iscas.biz.calculation.grpc.CompartmentBulkheadSheetResponse parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.iscas.biz.calculation.grpc.CompartmentBulkheadSheetResponse) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.util.List<java.lang.Double> yatou_ = java.util.Collections.emptyList();
    private void ensureYatouIsMutable() {
      if (!((bitField0_ & 0x00000001) == 0x00000001)) {
        yatou_ = new java.util.ArrayList<java.lang.Double>(yatou_);
        bitField0_ |= 0x00000001;
       }
    }
    /**
     * <pre>
     *破损压头水压值
     * </pre>
     *
     * <code>repeated double yatou = 1;</code>
     */
    public java.util.List<java.lang.Double>
        getYatouList() {
      return java.util.Collections.unmodifiableList(yatou_);
    }
    /**
     * <pre>
     *破损压头水压值
     * </pre>
     *
     * <code>repeated double yatou = 1;</code>
     */
    public int getYatouCount() {
      return yatou_.size();
    }
    /**
     * <pre>
     *破损压头水压值
     * </pre>
     *
     * <code>repeated double yatou = 1;</code>
     */
    public double getYatou(int index) {
      return yatou_.get(index);
    }
    /**
     * <pre>
     *破损压头水压值
     * </pre>
     *
     * <code>repeated double yatou = 1;</code>
     */
    public Builder setYatou(
        int index, double value) {
      ensureYatouIsMutable();
      yatou_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *破损压头水压值
     * </pre>
     *
     * <code>repeated double yatou = 1;</code>
     */
    public Builder addYatou(double value) {
      ensureYatouIsMutable();
      yatou_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *破损压头水压值
     * </pre>
     *
     * <code>repeated double yatou = 1;</code>
     */
    public Builder addAllYatou(
        java.lang.Iterable<? extends java.lang.Double> values) {
      ensureYatouIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, yatou_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *破损压头水压值
     * </pre>
     *
     * <code>repeated double yatou = 1;</code>
     */
    public Builder clearYatou() {
      yatou_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }

    private java.util.List<java.lang.Double> disload_ = java.util.Collections.emptyList();
    private void ensureDisloadIsMutable() {
      if (!((bitField0_ & 0x00000002) == 0x00000002)) {
        disload_ = new java.util.ArrayList<java.lang.Double>(disload_);
        bitField0_ |= 0x00000002;
       }
    }
    /**
     * <pre>
     *均布载荷
     * </pre>
     *
     * <code>repeated double disload = 2;</code>
     */
    public java.util.List<java.lang.Double>
        getDisloadList() {
      return java.util.Collections.unmodifiableList(disload_);
    }
    /**
     * <pre>
     *均布载荷
     * </pre>
     *
     * <code>repeated double disload = 2;</code>
     */
    public int getDisloadCount() {
      return disload_.size();
    }
    /**
     * <pre>
     *均布载荷
     * </pre>
     *
     * <code>repeated double disload = 2;</code>
     */
    public double getDisload(int index) {
      return disload_.get(index);
    }
    /**
     * <pre>
     *均布载荷
     * </pre>
     *
     * <code>repeated double disload = 2;</code>
     */
    public Builder setDisload(
        int index, double value) {
      ensureDisloadIsMutable();
      disload_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *均布载荷
     * </pre>
     *
     * <code>repeated double disload = 2;</code>
     */
    public Builder addDisload(double value) {
      ensureDisloadIsMutable();
      disload_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *均布载荷
     * </pre>
     *
     * <code>repeated double disload = 2;</code>
     */
    public Builder addAllDisload(
        java.lang.Iterable<? extends java.lang.Double> values) {
      ensureDisloadIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, disload_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *均布载荷
     * </pre>
     *
     * <code>repeated double disload = 2;</code>
     */
    public Builder clearDisload() {
      disload_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }

    private java.util.List<java.lang.Double> lgvList_ = java.util.Collections.emptyList();
    private void ensureLgvListIsMutable() {
      if (!((bitField0_ & 0x00000004) == 0x00000004)) {
        lgvList_ = new java.util.ArrayList<java.lang.Double>(lgvList_);
        bitField0_ |= 0x00000004;
       }
    }
    /**
     * <pre>
     *lgv
     * </pre>
     *
     * <code>repeated double lgvList = 3;</code>
     */
    public java.util.List<java.lang.Double>
        getLgvListList() {
      return java.util.Collections.unmodifiableList(lgvList_);
    }
    /**
     * <pre>
     *lgv
     * </pre>
     *
     * <code>repeated double lgvList = 3;</code>
     */
    public int getLgvListCount() {
      return lgvList_.size();
    }
    /**
     * <pre>
     *lgv
     * </pre>
     *
     * <code>repeated double lgvList = 3;</code>
     */
    public double getLgvList(int index) {
      return lgvList_.get(index);
    }
    /**
     * <pre>
     *lgv
     * </pre>
     *
     * <code>repeated double lgvList = 3;</code>
     */
    public Builder setLgvList(
        int index, double value) {
      ensureLgvListIsMutable();
      lgvList_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *lgv
     * </pre>
     *
     * <code>repeated double lgvList = 3;</code>
     */
    public Builder addLgvList(double value) {
      ensureLgvListIsMutable();
      lgvList_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *lgv
     * </pre>
     *
     * <code>repeated double lgvList = 3;</code>
     */
    public Builder addAllLgvList(
        java.lang.Iterable<? extends java.lang.Double> values) {
      ensureLgvListIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, lgvList_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *lgv
     * </pre>
     *
     * <code>repeated double lgvList = 3;</code>
     */
    public Builder clearLgvList() {
      lgvList_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000004);
      onChanged();
      return this;
    }

    private java.util.List<java.lang.Double> uList_ = java.util.Collections.emptyList();
    private void ensureUListIsMutable() {
      if (!((bitField0_ & 0x00000008) == 0x00000008)) {
        uList_ = new java.util.ArrayList<java.lang.Double>(uList_);
        bitField0_ |= 0x00000008;
       }
    }
    /**
     * <pre>
     *u输出
     * </pre>
     *
     * <code>repeated double uList = 4;</code>
     */
    public java.util.List<java.lang.Double>
        getUListList() {
      return java.util.Collections.unmodifiableList(uList_);
    }
    /**
     * <pre>
     *u输出
     * </pre>
     *
     * <code>repeated double uList = 4;</code>
     */
    public int getUListCount() {
      return uList_.size();
    }
    /**
     * <pre>
     *u输出
     * </pre>
     *
     * <code>repeated double uList = 4;</code>
     */
    public double getUList(int index) {
      return uList_.get(index);
    }
    /**
     * <pre>
     *u输出
     * </pre>
     *
     * <code>repeated double uList = 4;</code>
     */
    public Builder setUList(
        int index, double value) {
      ensureUListIsMutable();
      uList_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *u输出
     * </pre>
     *
     * <code>repeated double uList = 4;</code>
     */
    public Builder addUList(double value) {
      ensureUListIsMutable();
      uList_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *u输出
     * </pre>
     *
     * <code>repeated double uList = 4;</code>
     */
    public Builder addAllUList(
        java.lang.Iterable<? extends java.lang.Double> values) {
      ensureUListIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, uList_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *u输出
     * </pre>
     *
     * <code>repeated double uList = 4;</code>
     */
    public Builder clearUList() {
      uList_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000008);
      onChanged();
      return this;
    }

    private java.util.List<java.lang.Double> chi1List_ = java.util.Collections.emptyList();
    private void ensureChi1ListIsMutable() {
      if (!((bitField0_ & 0x00000010) == 0x00000010)) {
        chi1List_ = new java.util.ArrayList<java.lang.Double>(chi1List_);
        bitField0_ |= 0x00000010;
       }
    }
    /**
     * <pre>
     *chi1 输出
     * </pre>
     *
     * <code>repeated double chi1List = 5;</code>
     */
    public java.util.List<java.lang.Double>
        getChi1ListList() {
      return java.util.Collections.unmodifiableList(chi1List_);
    }
    /**
     * <pre>
     *chi1 输出
     * </pre>
     *
     * <code>repeated double chi1List = 5;</code>
     */
    public int getChi1ListCount() {
      return chi1List_.size();
    }
    /**
     * <pre>
     *chi1 输出
     * </pre>
     *
     * <code>repeated double chi1List = 5;</code>
     */
    public double getChi1List(int index) {
      return chi1List_.get(index);
    }
    /**
     * <pre>
     *chi1 输出
     * </pre>
     *
     * <code>repeated double chi1List = 5;</code>
     */
    public Builder setChi1List(
        int index, double value) {
      ensureChi1ListIsMutable();
      chi1List_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *chi1 输出
     * </pre>
     *
     * <code>repeated double chi1List = 5;</code>
     */
    public Builder addChi1List(double value) {
      ensureChi1ListIsMutable();
      chi1List_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *chi1 输出
     * </pre>
     *
     * <code>repeated double chi1List = 5;</code>
     */
    public Builder addAllChi1List(
        java.lang.Iterable<? extends java.lang.Double> values) {
      ensureChi1ListIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, chi1List_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *chi1 输出
     * </pre>
     *
     * <code>repeated double chi1List = 5;</code>
     */
    public Builder clearChi1List() {
      chi1List_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000010);
      onChanged();
      return this;
    }

    private java.util.List<java.lang.Double> chi2List_ = java.util.Collections.emptyList();
    private void ensureChi2ListIsMutable() {
      if (!((bitField0_ & 0x00000020) == 0x00000020)) {
        chi2List_ = new java.util.ArrayList<java.lang.Double>(chi2List_);
        bitField0_ |= 0x00000020;
       }
    }
    /**
     * <pre>
     *chi2 输出
     * </pre>
     *
     * <code>repeated double chi2List = 6;</code>
     */
    public java.util.List<java.lang.Double>
        getChi2ListList() {
      return java.util.Collections.unmodifiableList(chi2List_);
    }
    /**
     * <pre>
     *chi2 输出
     * </pre>
     *
     * <code>repeated double chi2List = 6;</code>
     */
    public int getChi2ListCount() {
      return chi2List_.size();
    }
    /**
     * <pre>
     *chi2 输出
     * </pre>
     *
     * <code>repeated double chi2List = 6;</code>
     */
    public double getChi2List(int index) {
      return chi2List_.get(index);
    }
    /**
     * <pre>
     *chi2 输出
     * </pre>
     *
     * <code>repeated double chi2List = 6;</code>
     */
    public Builder setChi2List(
        int index, double value) {
      ensureChi2ListIsMutable();
      chi2List_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *chi2 输出
     * </pre>
     *
     * <code>repeated double chi2List = 6;</code>
     */
    public Builder addChi2List(double value) {
      ensureChi2ListIsMutable();
      chi2List_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *chi2 输出
     * </pre>
     *
     * <code>repeated double chi2List = 6;</code>
     */
    public Builder addAllChi2List(
        java.lang.Iterable<? extends java.lang.Double> values) {
      ensureChi2ListIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, chi2List_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *chi2 输出
     * </pre>
     *
     * <code>repeated double chi2List = 6;</code>
     */
    public Builder clearChi2List() {
      chi2List_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000020);
      onChanged();
      return this;
    }

    private java.util.List<java.lang.Double> stressXlList_ = java.util.Collections.emptyList();
    private void ensureStressXlListIsMutable() {
      if (!((bitField0_ & 0x00000040) == 0x00000040)) {
        stressXlList_ = new java.util.ArrayList<java.lang.Double>(stressXlList_);
        bitField0_ |= 0x00000040;
       }
    }
    /**
     * <pre>
     *悬链应力
     * </pre>
     *
     * <code>repeated double stressXlList = 7;</code>
     */
    public java.util.List<java.lang.Double>
        getStressXlListList() {
      return java.util.Collections.unmodifiableList(stressXlList_);
    }
    /**
     * <pre>
     *悬链应力
     * </pre>
     *
     * <code>repeated double stressXlList = 7;</code>
     */
    public int getStressXlListCount() {
      return stressXlList_.size();
    }
    /**
     * <pre>
     *悬链应力
     * </pre>
     *
     * <code>repeated double stressXlList = 7;</code>
     */
    public double getStressXlList(int index) {
      return stressXlList_.get(index);
    }
    /**
     * <pre>
     *悬链应力
     * </pre>
     *
     * <code>repeated double stressXlList = 7;</code>
     */
    public Builder setStressXlList(
        int index, double value) {
      ensureStressXlListIsMutable();
      stressXlList_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *悬链应力
     * </pre>
     *
     * <code>repeated double stressXlList = 7;</code>
     */
    public Builder addStressXlList(double value) {
      ensureStressXlListIsMutable();
      stressXlList_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *悬链应力
     * </pre>
     *
     * <code>repeated double stressXlList = 7;</code>
     */
    public Builder addAllStressXlList(
        java.lang.Iterable<? extends java.lang.Double> values) {
      ensureStressXlListIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, stressXlList_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *悬链应力
     * </pre>
     *
     * <code>repeated double stressXlList = 7;</code>
     */
    public Builder clearStressXlList() {
      stressXlList_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000040);
      onChanged();
      return this;
    }

    private java.util.List<java.lang.Double> stressKuozhong_ = java.util.Collections.emptyList();
    private void ensureStressKuozhongIsMutable() {
      if (!((bitField0_ & 0x00000080) == 0x00000080)) {
        stressKuozhong_ = new java.util.ArrayList<java.lang.Double>(stressKuozhong_);
        bitField0_ |= 0x00000080;
       }
    }
    /**
     * <pre>
     *跨中应力
     * </pre>
     *
     * <code>repeated double stressKuozhong = 8;</code>
     */
    public java.util.List<java.lang.Double>
        getStressKuozhongList() {
      return java.util.Collections.unmodifiableList(stressKuozhong_);
    }
    /**
     * <pre>
     *跨中应力
     * </pre>
     *
     * <code>repeated double stressKuozhong = 8;</code>
     */
    public int getStressKuozhongCount() {
      return stressKuozhong_.size();
    }
    /**
     * <pre>
     *跨中应力
     * </pre>
     *
     * <code>repeated double stressKuozhong = 8;</code>
     */
    public double getStressKuozhong(int index) {
      return stressKuozhong_.get(index);
    }
    /**
     * <pre>
     *跨中应力
     * </pre>
     *
     * <code>repeated double stressKuozhong = 8;</code>
     */
    public Builder setStressKuozhong(
        int index, double value) {
      ensureStressKuozhongIsMutable();
      stressKuozhong_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *跨中应力
     * </pre>
     *
     * <code>repeated double stressKuozhong = 8;</code>
     */
    public Builder addStressKuozhong(double value) {
      ensureStressKuozhongIsMutable();
      stressKuozhong_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *跨中应力
     * </pre>
     *
     * <code>repeated double stressKuozhong = 8;</code>
     */
    public Builder addAllStressKuozhong(
        java.lang.Iterable<? extends java.lang.Double> values) {
      ensureStressKuozhongIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, stressKuozhong_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *跨中应力
     * </pre>
     *
     * <code>repeated double stressKuozhong = 8;</code>
     */
    public Builder clearStressKuozhong() {
      stressKuozhong_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000080);
      onChanged();
      return this;
    }

    private java.util.List<java.lang.Double> stressZhizuo_ = java.util.Collections.emptyList();
    private void ensureStressZhizuoIsMutable() {
      if (!((bitField0_ & 0x00000100) == 0x00000100)) {
        stressZhizuo_ = new java.util.ArrayList<java.lang.Double>(stressZhizuo_);
        bitField0_ |= 0x00000100;
       }
    }
    /**
     * <pre>
     *支座应力
     * </pre>
     *
     * <code>repeated double stressZhizuo = 9;</code>
     */
    public java.util.List<java.lang.Double>
        getStressZhizuoList() {
      return java.util.Collections.unmodifiableList(stressZhizuo_);
    }
    /**
     * <pre>
     *支座应力
     * </pre>
     *
     * <code>repeated double stressZhizuo = 9;</code>
     */
    public int getStressZhizuoCount() {
      return stressZhizuo_.size();
    }
    /**
     * <pre>
     *支座应力
     * </pre>
     *
     * <code>repeated double stressZhizuo = 9;</code>
     */
    public double getStressZhizuo(int index) {
      return stressZhizuo_.get(index);
    }
    /**
     * <pre>
     *支座应力
     * </pre>
     *
     * <code>repeated double stressZhizuo = 9;</code>
     */
    public Builder setStressZhizuo(
        int index, double value) {
      ensureStressZhizuoIsMutable();
      stressZhizuo_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *支座应力
     * </pre>
     *
     * <code>repeated double stressZhizuo = 9;</code>
     */
    public Builder addStressZhizuo(double value) {
      ensureStressZhizuoIsMutable();
      stressZhizuo_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *支座应力
     * </pre>
     *
     * <code>repeated double stressZhizuo = 9;</code>
     */
    public Builder addAllStressZhizuo(
        java.lang.Iterable<? extends java.lang.Double> values) {
      ensureStressZhizuoIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, stressZhizuo_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *支座应力
     * </pre>
     *
     * <code>repeated double stressZhizuo = 9;</code>
     */
    public Builder clearStressZhizuo() {
      stressZhizuo_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000100);
      onChanged();
      return this;
    }

    private java.util.List<java.lang.Double> shearAllow_ = java.util.Collections.emptyList();
    private void ensureShearAllowIsMutable() {
      if (!((bitField0_ & 0x00000200) == 0x00000200)) {
        shearAllow_ = new java.util.ArrayList<java.lang.Double>(shearAllow_);
        bitField0_ |= 0x00000200;
       }
    }
    /**
     * <pre>
     *许用剪力
     * </pre>
     *
     * <code>repeated double shearAllow = 10;</code>
     */
    public java.util.List<java.lang.Double>
        getShearAllowList() {
      return java.util.Collections.unmodifiableList(shearAllow_);
    }
    /**
     * <pre>
     *许用剪力
     * </pre>
     *
     * <code>repeated double shearAllow = 10;</code>
     */
    public int getShearAllowCount() {
      return shearAllow_.size();
    }
    /**
     * <pre>
     *许用剪力
     * </pre>
     *
     * <code>repeated double shearAllow = 10;</code>
     */
    public double getShearAllow(int index) {
      return shearAllow_.get(index);
    }
    /**
     * <pre>
     *许用剪力
     * </pre>
     *
     * <code>repeated double shearAllow = 10;</code>
     */
    public Builder setShearAllow(
        int index, double value) {
      ensureShearAllowIsMutable();
      shearAllow_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *许用剪力
     * </pre>
     *
     * <code>repeated double shearAllow = 10;</code>
     */
    public Builder addShearAllow(double value) {
      ensureShearAllowIsMutable();
      shearAllow_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *许用剪力
     * </pre>
     *
     * <code>repeated double shearAllow = 10;</code>
     */
    public Builder addAllShearAllow(
        java.lang.Iterable<? extends java.lang.Double> values) {
      ensureShearAllowIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, shearAllow_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *许用剪力
     * </pre>
     *
     * <code>repeated double shearAllow = 10;</code>
     */
    public Builder clearShearAllow() {
      shearAllow_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000200);
      onChanged();
      return this;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }


    // @@protoc_insertion_point(builder_scope:com.iscas.biz.calculation.grpc.CompartmentBulkheadSheetResponse)
  }

  // @@protoc_insertion_point(class_scope:com.iscas.biz.calculation.grpc.CompartmentBulkheadSheetResponse)
  private static final com.iscas.biz.calculation.grpc.CompartmentBulkheadSheetResponse DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.iscas.biz.calculation.grpc.CompartmentBulkheadSheetResponse();
  }

  public static com.iscas.biz.calculation.grpc.CompartmentBulkheadSheetResponse getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<CompartmentBulkheadSheetResponse>
      PARSER = new com.google.protobuf.AbstractParser<CompartmentBulkheadSheetResponse>() {
    public CompartmentBulkheadSheetResponse parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
        return new CompartmentBulkheadSheetResponse(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<CompartmentBulkheadSheetResponse> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<CompartmentBulkheadSheetResponse> getParserForType() {
    return PARSER;
  }

  public com.iscas.biz.calculation.grpc.CompartmentBulkheadSheetResponse getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

