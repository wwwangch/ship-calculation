// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: calculation.proto

package com.iscas.biz.calculation.grpc;

/**
 * <pre>
 *波浪载荷返回体
 * </pre>
 *
 * Protobuf type {@code com.iscas.biz.calculation.grpc.WaveLoadResponse}
 */
public  final class WaveLoadResponse extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:com.iscas.biz.calculation.grpc.WaveLoadResponse)
    WaveLoadResponseOrBuilder {
  // Use WaveLoadResponse.newBuilder() to construct.
  private WaveLoadResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private WaveLoadResponse() {
    mbb_ = java.util.Collections.emptyList();
    nwvecH_ = java.util.Collections.emptyList();
    mwvecH_ = java.util.Collections.emptyList();
    nwvecMH_ = java.util.Collections.emptyList();
    mwvecMH_ = java.util.Collections.emptyList();
    bdeltaS_ = java.util.Collections.emptyList();
    nwvecS_ = java.util.Collections.emptyList();
    mwvecS_ = java.util.Collections.emptyList();
    nwvecMS_ = java.util.Collections.emptyList();
    mwvecMS_ = java.util.Collections.emptyList();
    code_ = 0;
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
  }
  private WaveLoadResponse(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    int mutable_bitField0_ = 0;
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!input.skipField(tag)) {
              done = true;
            }
            break;
          }
          case 9: {
            if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
              mbb_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000001;
            }
            mbb_.add(input.readDouble());
            break;
          }
          case 10: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
              mbb_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000001;
            }
            while (input.getBytesUntilLimit() > 0) {
              mbb_.add(input.readDouble());
            }
            input.popLimit(limit);
            break;
          }
          case 17: {
            if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
              nwvecH_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000002;
            }
            nwvecH_.add(input.readDouble());
            break;
          }
          case 18: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
              nwvecH_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000002;
            }
            while (input.getBytesUntilLimit() > 0) {
              nwvecH_.add(input.readDouble());
            }
            input.popLimit(limit);
            break;
          }
          case 25: {
            if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
              mwvecH_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000004;
            }
            mwvecH_.add(input.readDouble());
            break;
          }
          case 26: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
              mwvecH_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000004;
            }
            while (input.getBytesUntilLimit() > 0) {
              mwvecH_.add(input.readDouble());
            }
            input.popLimit(limit);
            break;
          }
          case 33: {
            if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
              nwvecMH_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000008;
            }
            nwvecMH_.add(input.readDouble());
            break;
          }
          case 34: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
              nwvecMH_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000008;
            }
            while (input.getBytesUntilLimit() > 0) {
              nwvecMH_.add(input.readDouble());
            }
            input.popLimit(limit);
            break;
          }
          case 41: {
            if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
              mwvecMH_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000010;
            }
            mwvecMH_.add(input.readDouble());
            break;
          }
          case 42: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000010) == 0x00000010) && input.getBytesUntilLimit() > 0) {
              mwvecMH_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000010;
            }
            while (input.getBytesUntilLimit() > 0) {
              mwvecMH_.add(input.readDouble());
            }
            input.popLimit(limit);
            break;
          }
          case 49: {
            if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
              bdeltaS_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000020;
            }
            bdeltaS_.add(input.readDouble());
            break;
          }
          case 50: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
              bdeltaS_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000020;
            }
            while (input.getBytesUntilLimit() > 0) {
              bdeltaS_.add(input.readDouble());
            }
            input.popLimit(limit);
            break;
          }
          case 57: {
            if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
              nwvecS_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000040;
            }
            nwvecS_.add(input.readDouble());
            break;
          }
          case 58: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
              nwvecS_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000040;
            }
            while (input.getBytesUntilLimit() > 0) {
              nwvecS_.add(input.readDouble());
            }
            input.popLimit(limit);
            break;
          }
          case 65: {
            if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
              mwvecS_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000080;
            }
            mwvecS_.add(input.readDouble());
            break;
          }
          case 66: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000080) == 0x00000080) && input.getBytesUntilLimit() > 0) {
              mwvecS_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000080;
            }
            while (input.getBytesUntilLimit() > 0) {
              mwvecS_.add(input.readDouble());
            }
            input.popLimit(limit);
            break;
          }
          case 73: {
            if (!((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
              nwvecMS_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000100;
            }
            nwvecMS_.add(input.readDouble());
            break;
          }
          case 74: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000100) == 0x00000100) && input.getBytesUntilLimit() > 0) {
              nwvecMS_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000100;
            }
            while (input.getBytesUntilLimit() > 0) {
              nwvecMS_.add(input.readDouble());
            }
            input.popLimit(limit);
            break;
          }
          case 81: {
            if (!((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
              mwvecMS_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000200;
            }
            mwvecMS_.add(input.readDouble());
            break;
          }
          case 82: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000200) == 0x00000200) && input.getBytesUntilLimit() > 0) {
              mwvecMS_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000200;
            }
            while (input.getBytesUntilLimit() > 0) {
              mwvecMS_.add(input.readDouble());
            }
            input.popLimit(limit);
            break;
          }
          case 88: {

            code_ = input.readInt32();
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
        mbb_ = java.util.Collections.unmodifiableList(mbb_);
      }
      if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
        nwvecH_ = java.util.Collections.unmodifiableList(nwvecH_);
      }
      if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
        mwvecH_ = java.util.Collections.unmodifiableList(mwvecH_);
      }
      if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
        nwvecMH_ = java.util.Collections.unmodifiableList(nwvecMH_);
      }
      if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
        mwvecMH_ = java.util.Collections.unmodifiableList(mwvecMH_);
      }
      if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
        bdeltaS_ = java.util.Collections.unmodifiableList(bdeltaS_);
      }
      if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
        nwvecS_ = java.util.Collections.unmodifiableList(nwvecS_);
      }
      if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
        mwvecS_ = java.util.Collections.unmodifiableList(mwvecS_);
      }
      if (((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
        nwvecMS_ = java.util.Collections.unmodifiableList(nwvecMS_);
      }
      if (((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
        mwvecMS_ = java.util.Collections.unmodifiableList(mwvecMS_);
      }
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.iscas.biz.calculation.grpc.CalculationProto.internal_static_com_iscas_biz_calculation_grpc_WaveLoadResponse_descriptor;
  }

  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.iscas.biz.calculation.grpc.CalculationProto.internal_static_com_iscas_biz_calculation_grpc_WaveLoadResponse_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.iscas.biz.calculation.grpc.WaveLoadResponse.class, com.iscas.biz.calculation.grpc.WaveLoadResponse.Builder.class);
  }

  private int bitField0_;
  public static final int MBB_FIELD_NUMBER = 1;
  private java.util.List<java.lang.Double> mbb_;
  /**
   * <pre>
   *中拱附加浮力  21个
   * </pre>
   *
   * <code>repeated double mbb = 1;</code>
   */
  public java.util.List<java.lang.Double>
      getMbbList() {
    return mbb_;
  }
  /**
   * <pre>
   *中拱附加浮力  21个
   * </pre>
   *
   * <code>repeated double mbb = 1;</code>
   */
  public int getMbbCount() {
    return mbb_.size();
  }
  /**
   * <pre>
   *中拱附加浮力  21个
   * </pre>
   *
   * <code>repeated double mbb = 1;</code>
   */
  public double getMbb(int index) {
    return mbb_.get(index);
  }
  private int mbbMemoizedSerializedSize = -1;

  public static final int NWVECH_FIELD_NUMBER = 2;
  private java.util.List<java.lang.Double> nwvecH_;
  /**
   * <pre>
   *波峰未修正的静水剪力 目前返回21个
   * </pre>
   *
   * <code>repeated double nwvecH = 2;</code>
   */
  public java.util.List<java.lang.Double>
      getNwvecHList() {
    return nwvecH_;
  }
  /**
   * <pre>
   *波峰未修正的静水剪力 目前返回21个
   * </pre>
   *
   * <code>repeated double nwvecH = 2;</code>
   */
  public int getNwvecHCount() {
    return nwvecH_.size();
  }
  /**
   * <pre>
   *波峰未修正的静水剪力 目前返回21个
   * </pre>
   *
   * <code>repeated double nwvecH = 2;</code>
   */
  public double getNwvecH(int index) {
    return nwvecH_.get(index);
  }
  private int nwvecHMemoizedSerializedSize = -1;

  public static final int MWVECH_FIELD_NUMBER = 3;
  private java.util.List<java.lang.Double> mwvecH_;
  /**
   * <pre>
   * 波峰未修正的弯矩 目前返回21个
   * </pre>
   *
   * <code>repeated double mwvecH = 3;</code>
   */
  public java.util.List<java.lang.Double>
      getMwvecHList() {
    return mwvecH_;
  }
  /**
   * <pre>
   * 波峰未修正的弯矩 目前返回21个
   * </pre>
   *
   * <code>repeated double mwvecH = 3;</code>
   */
  public int getMwvecHCount() {
    return mwvecH_.size();
  }
  /**
   * <pre>
   * 波峰未修正的弯矩 目前返回21个
   * </pre>
   *
   * <code>repeated double mwvecH = 3;</code>
   */
  public double getMwvecH(int index) {
    return mwvecH_.get(index);
  }
  private int mwvecHMemoizedSerializedSize = -1;

  public static final int NWVECMH_FIELD_NUMBER = 4;
  private java.util.List<java.lang.Double> nwvecMH_;
  /**
   * <pre>
   *波峰修正的静水剪力 目前返回21个
   * </pre>
   *
   * <code>repeated double nwvecMH = 4;</code>
   */
  public java.util.List<java.lang.Double>
      getNwvecMHList() {
    return nwvecMH_;
  }
  /**
   * <pre>
   *波峰修正的静水剪力 目前返回21个
   * </pre>
   *
   * <code>repeated double nwvecMH = 4;</code>
   */
  public int getNwvecMHCount() {
    return nwvecMH_.size();
  }
  /**
   * <pre>
   *波峰修正的静水剪力 目前返回21个
   * </pre>
   *
   * <code>repeated double nwvecMH = 4;</code>
   */
  public double getNwvecMH(int index) {
    return nwvecMH_.get(index);
  }
  private int nwvecMHMemoizedSerializedSize = -1;

  public static final int MWVECMH_FIELD_NUMBER = 5;
  private java.util.List<java.lang.Double> mwvecMH_;
  /**
   * <pre>
   *波峰修正的弯矩 目前返回21个
   * </pre>
   *
   * <code>repeated double mwvecMH = 5;</code>
   */
  public java.util.List<java.lang.Double>
      getMwvecMHList() {
    return mwvecMH_;
  }
  /**
   * <pre>
   *波峰修正的弯矩 目前返回21个
   * </pre>
   *
   * <code>repeated double mwvecMH = 5;</code>
   */
  public int getMwvecMHCount() {
    return mwvecMH_.size();
  }
  /**
   * <pre>
   *波峰修正的弯矩 目前返回21个
   * </pre>
   *
   * <code>repeated double mwvecMH = 5;</code>
   */
  public double getMwvecMH(int index) {
    return mwvecMH_.get(index);
  }
  private int mwvecMHMemoizedSerializedSize = -1;

  public static final int BDELTAS_FIELD_NUMBER = 6;
  private java.util.List<java.lang.Double> bdeltaS_;
  /**
   * <pre>
   *中垂附加浮力  21个
   * </pre>
   *
   * <code>repeated double bdeltaS = 6;</code>
   */
  public java.util.List<java.lang.Double>
      getBdeltaSList() {
    return bdeltaS_;
  }
  /**
   * <pre>
   *中垂附加浮力  21个
   * </pre>
   *
   * <code>repeated double bdeltaS = 6;</code>
   */
  public int getBdeltaSCount() {
    return bdeltaS_.size();
  }
  /**
   * <pre>
   *中垂附加浮力  21个
   * </pre>
   *
   * <code>repeated double bdeltaS = 6;</code>
   */
  public double getBdeltaS(int index) {
    return bdeltaS_.get(index);
  }
  private int bdeltaSMemoizedSerializedSize = -1;

  public static final int NWVECS_FIELD_NUMBER = 7;
  private java.util.List<java.lang.Double> nwvecS_;
  /**
   * <pre>
   *波谷未修正的静水剪力 目前返回21个
   * </pre>
   *
   * <code>repeated double nwvecS = 7;</code>
   */
  public java.util.List<java.lang.Double>
      getNwvecSList() {
    return nwvecS_;
  }
  /**
   * <pre>
   *波谷未修正的静水剪力 目前返回21个
   * </pre>
   *
   * <code>repeated double nwvecS = 7;</code>
   */
  public int getNwvecSCount() {
    return nwvecS_.size();
  }
  /**
   * <pre>
   *波谷未修正的静水剪力 目前返回21个
   * </pre>
   *
   * <code>repeated double nwvecS = 7;</code>
   */
  public double getNwvecS(int index) {
    return nwvecS_.get(index);
  }
  private int nwvecSMemoizedSerializedSize = -1;

  public static final int MWVECS_FIELD_NUMBER = 8;
  private java.util.List<java.lang.Double> mwvecS_;
  /**
   * <pre>
   * 波谷未修正的弯矩 目前返回21个
   * </pre>
   *
   * <code>repeated double mwvecS = 8;</code>
   */
  public java.util.List<java.lang.Double>
      getMwvecSList() {
    return mwvecS_;
  }
  /**
   * <pre>
   * 波谷未修正的弯矩 目前返回21个
   * </pre>
   *
   * <code>repeated double mwvecS = 8;</code>
   */
  public int getMwvecSCount() {
    return mwvecS_.size();
  }
  /**
   * <pre>
   * 波谷未修正的弯矩 目前返回21个
   * </pre>
   *
   * <code>repeated double mwvecS = 8;</code>
   */
  public double getMwvecS(int index) {
    return mwvecS_.get(index);
  }
  private int mwvecSMemoizedSerializedSize = -1;

  public static final int NWVECMS_FIELD_NUMBER = 9;
  private java.util.List<java.lang.Double> nwvecMS_;
  /**
   * <pre>
   *波谷修正的静水剪力 目前返回21个
   * </pre>
   *
   * <code>repeated double nwvecMS = 9;</code>
   */
  public java.util.List<java.lang.Double>
      getNwvecMSList() {
    return nwvecMS_;
  }
  /**
   * <pre>
   *波谷修正的静水剪力 目前返回21个
   * </pre>
   *
   * <code>repeated double nwvecMS = 9;</code>
   */
  public int getNwvecMSCount() {
    return nwvecMS_.size();
  }
  /**
   * <pre>
   *波谷修正的静水剪力 目前返回21个
   * </pre>
   *
   * <code>repeated double nwvecMS = 9;</code>
   */
  public double getNwvecMS(int index) {
    return nwvecMS_.get(index);
  }
  private int nwvecMSMemoizedSerializedSize = -1;

  public static final int MWVECMS_FIELD_NUMBER = 10;
  private java.util.List<java.lang.Double> mwvecMS_;
  /**
   * <pre>
   *波谷修正的弯矩 目前返回21个
   * </pre>
   *
   * <code>repeated double mwvecMS = 10;</code>
   */
  public java.util.List<java.lang.Double>
      getMwvecMSList() {
    return mwvecMS_;
  }
  /**
   * <pre>
   *波谷修正的弯矩 目前返回21个
   * </pre>
   *
   * <code>repeated double mwvecMS = 10;</code>
   */
  public int getMwvecMSCount() {
    return mwvecMS_.size();
  }
  /**
   * <pre>
   *波谷修正的弯矩 目前返回21个
   * </pre>
   *
   * <code>repeated double mwvecMS = 10;</code>
   */
  public double getMwvecMS(int index) {
    return mwvecMS_.get(index);
  }
  private int mwvecMSMemoizedSerializedSize = -1;

  public static final int CODE_FIELD_NUMBER = 11;
  private int code_;
  /**
   * <pre>
   *0-正常 1-异常[增0731]
   * </pre>
   *
   * <code>int32 code = 11;</code>
   */
  public int getCode() {
    return code_;
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    getSerializedSize();
    if (getMbbList().size() > 0) {
      output.writeUInt32NoTag(10);
      output.writeUInt32NoTag(mbbMemoizedSerializedSize);
    }
    for (int i = 0; i < mbb_.size(); i++) {
      output.writeDoubleNoTag(mbb_.get(i));
    }
    if (getNwvecHList().size() > 0) {
      output.writeUInt32NoTag(18);
      output.writeUInt32NoTag(nwvecHMemoizedSerializedSize);
    }
    for (int i = 0; i < nwvecH_.size(); i++) {
      output.writeDoubleNoTag(nwvecH_.get(i));
    }
    if (getMwvecHList().size() > 0) {
      output.writeUInt32NoTag(26);
      output.writeUInt32NoTag(mwvecHMemoizedSerializedSize);
    }
    for (int i = 0; i < mwvecH_.size(); i++) {
      output.writeDoubleNoTag(mwvecH_.get(i));
    }
    if (getNwvecMHList().size() > 0) {
      output.writeUInt32NoTag(34);
      output.writeUInt32NoTag(nwvecMHMemoizedSerializedSize);
    }
    for (int i = 0; i < nwvecMH_.size(); i++) {
      output.writeDoubleNoTag(nwvecMH_.get(i));
    }
    if (getMwvecMHList().size() > 0) {
      output.writeUInt32NoTag(42);
      output.writeUInt32NoTag(mwvecMHMemoizedSerializedSize);
    }
    for (int i = 0; i < mwvecMH_.size(); i++) {
      output.writeDoubleNoTag(mwvecMH_.get(i));
    }
    if (getBdeltaSList().size() > 0) {
      output.writeUInt32NoTag(50);
      output.writeUInt32NoTag(bdeltaSMemoizedSerializedSize);
    }
    for (int i = 0; i < bdeltaS_.size(); i++) {
      output.writeDoubleNoTag(bdeltaS_.get(i));
    }
    if (getNwvecSList().size() > 0) {
      output.writeUInt32NoTag(58);
      output.writeUInt32NoTag(nwvecSMemoizedSerializedSize);
    }
    for (int i = 0; i < nwvecS_.size(); i++) {
      output.writeDoubleNoTag(nwvecS_.get(i));
    }
    if (getMwvecSList().size() > 0) {
      output.writeUInt32NoTag(66);
      output.writeUInt32NoTag(mwvecSMemoizedSerializedSize);
    }
    for (int i = 0; i < mwvecS_.size(); i++) {
      output.writeDoubleNoTag(mwvecS_.get(i));
    }
    if (getNwvecMSList().size() > 0) {
      output.writeUInt32NoTag(74);
      output.writeUInt32NoTag(nwvecMSMemoizedSerializedSize);
    }
    for (int i = 0; i < nwvecMS_.size(); i++) {
      output.writeDoubleNoTag(nwvecMS_.get(i));
    }
    if (getMwvecMSList().size() > 0) {
      output.writeUInt32NoTag(82);
      output.writeUInt32NoTag(mwvecMSMemoizedSerializedSize);
    }
    for (int i = 0; i < mwvecMS_.size(); i++) {
      output.writeDoubleNoTag(mwvecMS_.get(i));
    }
    if (code_ != 0) {
      output.writeInt32(11, code_);
    }
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    {
      int dataSize = 0;
      dataSize = 8 * getMbbList().size();
      size += dataSize;
      if (!getMbbList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      mbbMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 8 * getNwvecHList().size();
      size += dataSize;
      if (!getNwvecHList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      nwvecHMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 8 * getMwvecHList().size();
      size += dataSize;
      if (!getMwvecHList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      mwvecHMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 8 * getNwvecMHList().size();
      size += dataSize;
      if (!getNwvecMHList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      nwvecMHMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 8 * getMwvecMHList().size();
      size += dataSize;
      if (!getMwvecMHList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      mwvecMHMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 8 * getBdeltaSList().size();
      size += dataSize;
      if (!getBdeltaSList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      bdeltaSMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 8 * getNwvecSList().size();
      size += dataSize;
      if (!getNwvecSList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      nwvecSMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 8 * getMwvecSList().size();
      size += dataSize;
      if (!getMwvecSList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      mwvecSMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 8 * getNwvecMSList().size();
      size += dataSize;
      if (!getNwvecMSList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      nwvecMSMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 8 * getMwvecMSList().size();
      size += dataSize;
      if (!getMwvecMSList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      mwvecMSMemoizedSerializedSize = dataSize;
    }
    if (code_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(11, code_);
    }
    memoizedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.iscas.biz.calculation.grpc.WaveLoadResponse)) {
      return super.equals(obj);
    }
    com.iscas.biz.calculation.grpc.WaveLoadResponse other = (com.iscas.biz.calculation.grpc.WaveLoadResponse) obj;

    boolean result = true;
    result = result && getMbbList()
        .equals(other.getMbbList());
    result = result && getNwvecHList()
        .equals(other.getNwvecHList());
    result = result && getMwvecHList()
        .equals(other.getMwvecHList());
    result = result && getNwvecMHList()
        .equals(other.getNwvecMHList());
    result = result && getMwvecMHList()
        .equals(other.getMwvecMHList());
    result = result && getBdeltaSList()
        .equals(other.getBdeltaSList());
    result = result && getNwvecSList()
        .equals(other.getNwvecSList());
    result = result && getMwvecSList()
        .equals(other.getMwvecSList());
    result = result && getNwvecMSList()
        .equals(other.getNwvecMSList());
    result = result && getMwvecMSList()
        .equals(other.getMwvecMSList());
    result = result && (getCode()
        == other.getCode());
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getMbbCount() > 0) {
      hash = (37 * hash) + MBB_FIELD_NUMBER;
      hash = (53 * hash) + getMbbList().hashCode();
    }
    if (getNwvecHCount() > 0) {
      hash = (37 * hash) + NWVECH_FIELD_NUMBER;
      hash = (53 * hash) + getNwvecHList().hashCode();
    }
    if (getMwvecHCount() > 0) {
      hash = (37 * hash) + MWVECH_FIELD_NUMBER;
      hash = (53 * hash) + getMwvecHList().hashCode();
    }
    if (getNwvecMHCount() > 0) {
      hash = (37 * hash) + NWVECMH_FIELD_NUMBER;
      hash = (53 * hash) + getNwvecMHList().hashCode();
    }
    if (getMwvecMHCount() > 0) {
      hash = (37 * hash) + MWVECMH_FIELD_NUMBER;
      hash = (53 * hash) + getMwvecMHList().hashCode();
    }
    if (getBdeltaSCount() > 0) {
      hash = (37 * hash) + BDELTAS_FIELD_NUMBER;
      hash = (53 * hash) + getBdeltaSList().hashCode();
    }
    if (getNwvecSCount() > 0) {
      hash = (37 * hash) + NWVECS_FIELD_NUMBER;
      hash = (53 * hash) + getNwvecSList().hashCode();
    }
    if (getMwvecSCount() > 0) {
      hash = (37 * hash) + MWVECS_FIELD_NUMBER;
      hash = (53 * hash) + getMwvecSList().hashCode();
    }
    if (getNwvecMSCount() > 0) {
      hash = (37 * hash) + NWVECMS_FIELD_NUMBER;
      hash = (53 * hash) + getNwvecMSList().hashCode();
    }
    if (getMwvecMSCount() > 0) {
      hash = (37 * hash) + MWVECMS_FIELD_NUMBER;
      hash = (53 * hash) + getMwvecMSList().hashCode();
    }
    hash = (37 * hash) + CODE_FIELD_NUMBER;
    hash = (53 * hash) + getCode();
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.iscas.biz.calculation.grpc.WaveLoadResponse parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.iscas.biz.calculation.grpc.WaveLoadResponse parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.iscas.biz.calculation.grpc.WaveLoadResponse parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.iscas.biz.calculation.grpc.WaveLoadResponse parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.iscas.biz.calculation.grpc.WaveLoadResponse parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.iscas.biz.calculation.grpc.WaveLoadResponse parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.iscas.biz.calculation.grpc.WaveLoadResponse parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.iscas.biz.calculation.grpc.WaveLoadResponse parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.iscas.biz.calculation.grpc.WaveLoadResponse parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.iscas.biz.calculation.grpc.WaveLoadResponse parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.iscas.biz.calculation.grpc.WaveLoadResponse prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   *波浪载荷返回体
   * </pre>
   *
   * Protobuf type {@code com.iscas.biz.calculation.grpc.WaveLoadResponse}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:com.iscas.biz.calculation.grpc.WaveLoadResponse)
      com.iscas.biz.calculation.grpc.WaveLoadResponseOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.iscas.biz.calculation.grpc.CalculationProto.internal_static_com_iscas_biz_calculation_grpc_WaveLoadResponse_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.iscas.biz.calculation.grpc.CalculationProto.internal_static_com_iscas_biz_calculation_grpc_WaveLoadResponse_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.iscas.biz.calculation.grpc.WaveLoadResponse.class, com.iscas.biz.calculation.grpc.WaveLoadResponse.Builder.class);
    }

    // Construct using com.iscas.biz.calculation.grpc.WaveLoadResponse.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    public Builder clear() {
      super.clear();
      mbb_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000001);
      nwvecH_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000002);
      mwvecH_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000004);
      nwvecMH_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000008);
      mwvecMH_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000010);
      bdeltaS_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000020);
      nwvecS_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000040);
      mwvecS_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000080);
      nwvecMS_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000100);
      mwvecMS_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000200);
      code_ = 0;

      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.iscas.biz.calculation.grpc.CalculationProto.internal_static_com_iscas_biz_calculation_grpc_WaveLoadResponse_descriptor;
    }

    public com.iscas.biz.calculation.grpc.WaveLoadResponse getDefaultInstanceForType() {
      return com.iscas.biz.calculation.grpc.WaveLoadResponse.getDefaultInstance();
    }

    public com.iscas.biz.calculation.grpc.WaveLoadResponse build() {
      com.iscas.biz.calculation.grpc.WaveLoadResponse result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public com.iscas.biz.calculation.grpc.WaveLoadResponse buildPartial() {
      com.iscas.biz.calculation.grpc.WaveLoadResponse result = new com.iscas.biz.calculation.grpc.WaveLoadResponse(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        mbb_ = java.util.Collections.unmodifiableList(mbb_);
        bitField0_ = (bitField0_ & ~0x00000001);
      }
      result.mbb_ = mbb_;
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        nwvecH_ = java.util.Collections.unmodifiableList(nwvecH_);
        bitField0_ = (bitField0_ & ~0x00000002);
      }
      result.nwvecH_ = nwvecH_;
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        mwvecH_ = java.util.Collections.unmodifiableList(mwvecH_);
        bitField0_ = (bitField0_ & ~0x00000004);
      }
      result.mwvecH_ = mwvecH_;
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        nwvecMH_ = java.util.Collections.unmodifiableList(nwvecMH_);
        bitField0_ = (bitField0_ & ~0x00000008);
      }
      result.nwvecMH_ = nwvecMH_;
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        mwvecMH_ = java.util.Collections.unmodifiableList(mwvecMH_);
        bitField0_ = (bitField0_ & ~0x00000010);
      }
      result.mwvecMH_ = mwvecMH_;
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        bdeltaS_ = java.util.Collections.unmodifiableList(bdeltaS_);
        bitField0_ = (bitField0_ & ~0x00000020);
      }
      result.bdeltaS_ = bdeltaS_;
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        nwvecS_ = java.util.Collections.unmodifiableList(nwvecS_);
        bitField0_ = (bitField0_ & ~0x00000040);
      }
      result.nwvecS_ = nwvecS_;
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        mwvecS_ = java.util.Collections.unmodifiableList(mwvecS_);
        bitField0_ = (bitField0_ & ~0x00000080);
      }
      result.mwvecS_ = mwvecS_;
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        nwvecMS_ = java.util.Collections.unmodifiableList(nwvecMS_);
        bitField0_ = (bitField0_ & ~0x00000100);
      }
      result.nwvecMS_ = nwvecMS_;
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        mwvecMS_ = java.util.Collections.unmodifiableList(mwvecMS_);
        bitField0_ = (bitField0_ & ~0x00000200);
      }
      result.mwvecMS_ = mwvecMS_;
      result.code_ = code_;
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.iscas.biz.calculation.grpc.WaveLoadResponse) {
        return mergeFrom((com.iscas.biz.calculation.grpc.WaveLoadResponse)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.iscas.biz.calculation.grpc.WaveLoadResponse other) {
      if (other == com.iscas.biz.calculation.grpc.WaveLoadResponse.getDefaultInstance()) return this;
      if (!other.mbb_.isEmpty()) {
        if (mbb_.isEmpty()) {
          mbb_ = other.mbb_;
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          ensureMbbIsMutable();
          mbb_.addAll(other.mbb_);
        }
        onChanged();
      }
      if (!other.nwvecH_.isEmpty()) {
        if (nwvecH_.isEmpty()) {
          nwvecH_ = other.nwvecH_;
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          ensureNwvecHIsMutable();
          nwvecH_.addAll(other.nwvecH_);
        }
        onChanged();
      }
      if (!other.mwvecH_.isEmpty()) {
        if (mwvecH_.isEmpty()) {
          mwvecH_ = other.mwvecH_;
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          ensureMwvecHIsMutable();
          mwvecH_.addAll(other.mwvecH_);
        }
        onChanged();
      }
      if (!other.nwvecMH_.isEmpty()) {
        if (nwvecMH_.isEmpty()) {
          nwvecMH_ = other.nwvecMH_;
          bitField0_ = (bitField0_ & ~0x00000008);
        } else {
          ensureNwvecMHIsMutable();
          nwvecMH_.addAll(other.nwvecMH_);
        }
        onChanged();
      }
      if (!other.mwvecMH_.isEmpty()) {
        if (mwvecMH_.isEmpty()) {
          mwvecMH_ = other.mwvecMH_;
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          ensureMwvecMHIsMutable();
          mwvecMH_.addAll(other.mwvecMH_);
        }
        onChanged();
      }
      if (!other.bdeltaS_.isEmpty()) {
        if (bdeltaS_.isEmpty()) {
          bdeltaS_ = other.bdeltaS_;
          bitField0_ = (bitField0_ & ~0x00000020);
        } else {
          ensureBdeltaSIsMutable();
          bdeltaS_.addAll(other.bdeltaS_);
        }
        onChanged();
      }
      if (!other.nwvecS_.isEmpty()) {
        if (nwvecS_.isEmpty()) {
          nwvecS_ = other.nwvecS_;
          bitField0_ = (bitField0_ & ~0x00000040);
        } else {
          ensureNwvecSIsMutable();
          nwvecS_.addAll(other.nwvecS_);
        }
        onChanged();
      }
      if (!other.mwvecS_.isEmpty()) {
        if (mwvecS_.isEmpty()) {
          mwvecS_ = other.mwvecS_;
          bitField0_ = (bitField0_ & ~0x00000080);
        } else {
          ensureMwvecSIsMutable();
          mwvecS_.addAll(other.mwvecS_);
        }
        onChanged();
      }
      if (!other.nwvecMS_.isEmpty()) {
        if (nwvecMS_.isEmpty()) {
          nwvecMS_ = other.nwvecMS_;
          bitField0_ = (bitField0_ & ~0x00000100);
        } else {
          ensureNwvecMSIsMutable();
          nwvecMS_.addAll(other.nwvecMS_);
        }
        onChanged();
      }
      if (!other.mwvecMS_.isEmpty()) {
        if (mwvecMS_.isEmpty()) {
          mwvecMS_ = other.mwvecMS_;
          bitField0_ = (bitField0_ & ~0x00000200);
        } else {
          ensureMwvecMSIsMutable();
          mwvecMS_.addAll(other.mwvecMS_);
        }
        onChanged();
      }
      if (other.getCode() != 0) {
        setCode(other.getCode());
      }
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.iscas.biz.calculation.grpc.WaveLoadResponse parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.iscas.biz.calculation.grpc.WaveLoadResponse) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.util.List<java.lang.Double> mbb_ = java.util.Collections.emptyList();
    private void ensureMbbIsMutable() {
      if (!((bitField0_ & 0x00000001) == 0x00000001)) {
        mbb_ = new java.util.ArrayList<java.lang.Double>(mbb_);
        bitField0_ |= 0x00000001;
       }
    }
    /**
     * <pre>
     *中拱附加浮力  21个
     * </pre>
     *
     * <code>repeated double mbb = 1;</code>
     */
    public java.util.List<java.lang.Double>
        getMbbList() {
      return java.util.Collections.unmodifiableList(mbb_);
    }
    /**
     * <pre>
     *中拱附加浮力  21个
     * </pre>
     *
     * <code>repeated double mbb = 1;</code>
     */
    public int getMbbCount() {
      return mbb_.size();
    }
    /**
     * <pre>
     *中拱附加浮力  21个
     * </pre>
     *
     * <code>repeated double mbb = 1;</code>
     */
    public double getMbb(int index) {
      return mbb_.get(index);
    }
    /**
     * <pre>
     *中拱附加浮力  21个
     * </pre>
     *
     * <code>repeated double mbb = 1;</code>
     */
    public Builder setMbb(
        int index, double value) {
      ensureMbbIsMutable();
      mbb_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *中拱附加浮力  21个
     * </pre>
     *
     * <code>repeated double mbb = 1;</code>
     */
    public Builder addMbb(double value) {
      ensureMbbIsMutable();
      mbb_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *中拱附加浮力  21个
     * </pre>
     *
     * <code>repeated double mbb = 1;</code>
     */
    public Builder addAllMbb(
        java.lang.Iterable<? extends java.lang.Double> values) {
      ensureMbbIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, mbb_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *中拱附加浮力  21个
     * </pre>
     *
     * <code>repeated double mbb = 1;</code>
     */
    public Builder clearMbb() {
      mbb_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }

    private java.util.List<java.lang.Double> nwvecH_ = java.util.Collections.emptyList();
    private void ensureNwvecHIsMutable() {
      if (!((bitField0_ & 0x00000002) == 0x00000002)) {
        nwvecH_ = new java.util.ArrayList<java.lang.Double>(nwvecH_);
        bitField0_ |= 0x00000002;
       }
    }
    /**
     * <pre>
     *波峰未修正的静水剪力 目前返回21个
     * </pre>
     *
     * <code>repeated double nwvecH = 2;</code>
     */
    public java.util.List<java.lang.Double>
        getNwvecHList() {
      return java.util.Collections.unmodifiableList(nwvecH_);
    }
    /**
     * <pre>
     *波峰未修正的静水剪力 目前返回21个
     * </pre>
     *
     * <code>repeated double nwvecH = 2;</code>
     */
    public int getNwvecHCount() {
      return nwvecH_.size();
    }
    /**
     * <pre>
     *波峰未修正的静水剪力 目前返回21个
     * </pre>
     *
     * <code>repeated double nwvecH = 2;</code>
     */
    public double getNwvecH(int index) {
      return nwvecH_.get(index);
    }
    /**
     * <pre>
     *波峰未修正的静水剪力 目前返回21个
     * </pre>
     *
     * <code>repeated double nwvecH = 2;</code>
     */
    public Builder setNwvecH(
        int index, double value) {
      ensureNwvecHIsMutable();
      nwvecH_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *波峰未修正的静水剪力 目前返回21个
     * </pre>
     *
     * <code>repeated double nwvecH = 2;</code>
     */
    public Builder addNwvecH(double value) {
      ensureNwvecHIsMutable();
      nwvecH_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *波峰未修正的静水剪力 目前返回21个
     * </pre>
     *
     * <code>repeated double nwvecH = 2;</code>
     */
    public Builder addAllNwvecH(
        java.lang.Iterable<? extends java.lang.Double> values) {
      ensureNwvecHIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, nwvecH_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *波峰未修正的静水剪力 目前返回21个
     * </pre>
     *
     * <code>repeated double nwvecH = 2;</code>
     */
    public Builder clearNwvecH() {
      nwvecH_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }

    private java.util.List<java.lang.Double> mwvecH_ = java.util.Collections.emptyList();
    private void ensureMwvecHIsMutable() {
      if (!((bitField0_ & 0x00000004) == 0x00000004)) {
        mwvecH_ = new java.util.ArrayList<java.lang.Double>(mwvecH_);
        bitField0_ |= 0x00000004;
       }
    }
    /**
     * <pre>
     * 波峰未修正的弯矩 目前返回21个
     * </pre>
     *
     * <code>repeated double mwvecH = 3;</code>
     */
    public java.util.List<java.lang.Double>
        getMwvecHList() {
      return java.util.Collections.unmodifiableList(mwvecH_);
    }
    /**
     * <pre>
     * 波峰未修正的弯矩 目前返回21个
     * </pre>
     *
     * <code>repeated double mwvecH = 3;</code>
     */
    public int getMwvecHCount() {
      return mwvecH_.size();
    }
    /**
     * <pre>
     * 波峰未修正的弯矩 目前返回21个
     * </pre>
     *
     * <code>repeated double mwvecH = 3;</code>
     */
    public double getMwvecH(int index) {
      return mwvecH_.get(index);
    }
    /**
     * <pre>
     * 波峰未修正的弯矩 目前返回21个
     * </pre>
     *
     * <code>repeated double mwvecH = 3;</code>
     */
    public Builder setMwvecH(
        int index, double value) {
      ensureMwvecHIsMutable();
      mwvecH_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 波峰未修正的弯矩 目前返回21个
     * </pre>
     *
     * <code>repeated double mwvecH = 3;</code>
     */
    public Builder addMwvecH(double value) {
      ensureMwvecHIsMutable();
      mwvecH_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 波峰未修正的弯矩 目前返回21个
     * </pre>
     *
     * <code>repeated double mwvecH = 3;</code>
     */
    public Builder addAllMwvecH(
        java.lang.Iterable<? extends java.lang.Double> values) {
      ensureMwvecHIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, mwvecH_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 波峰未修正的弯矩 目前返回21个
     * </pre>
     *
     * <code>repeated double mwvecH = 3;</code>
     */
    public Builder clearMwvecH() {
      mwvecH_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000004);
      onChanged();
      return this;
    }

    private java.util.List<java.lang.Double> nwvecMH_ = java.util.Collections.emptyList();
    private void ensureNwvecMHIsMutable() {
      if (!((bitField0_ & 0x00000008) == 0x00000008)) {
        nwvecMH_ = new java.util.ArrayList<java.lang.Double>(nwvecMH_);
        bitField0_ |= 0x00000008;
       }
    }
    /**
     * <pre>
     *波峰修正的静水剪力 目前返回21个
     * </pre>
     *
     * <code>repeated double nwvecMH = 4;</code>
     */
    public java.util.List<java.lang.Double>
        getNwvecMHList() {
      return java.util.Collections.unmodifiableList(nwvecMH_);
    }
    /**
     * <pre>
     *波峰修正的静水剪力 目前返回21个
     * </pre>
     *
     * <code>repeated double nwvecMH = 4;</code>
     */
    public int getNwvecMHCount() {
      return nwvecMH_.size();
    }
    /**
     * <pre>
     *波峰修正的静水剪力 目前返回21个
     * </pre>
     *
     * <code>repeated double nwvecMH = 4;</code>
     */
    public double getNwvecMH(int index) {
      return nwvecMH_.get(index);
    }
    /**
     * <pre>
     *波峰修正的静水剪力 目前返回21个
     * </pre>
     *
     * <code>repeated double nwvecMH = 4;</code>
     */
    public Builder setNwvecMH(
        int index, double value) {
      ensureNwvecMHIsMutable();
      nwvecMH_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *波峰修正的静水剪力 目前返回21个
     * </pre>
     *
     * <code>repeated double nwvecMH = 4;</code>
     */
    public Builder addNwvecMH(double value) {
      ensureNwvecMHIsMutable();
      nwvecMH_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *波峰修正的静水剪力 目前返回21个
     * </pre>
     *
     * <code>repeated double nwvecMH = 4;</code>
     */
    public Builder addAllNwvecMH(
        java.lang.Iterable<? extends java.lang.Double> values) {
      ensureNwvecMHIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, nwvecMH_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *波峰修正的静水剪力 目前返回21个
     * </pre>
     *
     * <code>repeated double nwvecMH = 4;</code>
     */
    public Builder clearNwvecMH() {
      nwvecMH_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000008);
      onChanged();
      return this;
    }

    private java.util.List<java.lang.Double> mwvecMH_ = java.util.Collections.emptyList();
    private void ensureMwvecMHIsMutable() {
      if (!((bitField0_ & 0x00000010) == 0x00000010)) {
        mwvecMH_ = new java.util.ArrayList<java.lang.Double>(mwvecMH_);
        bitField0_ |= 0x00000010;
       }
    }
    /**
     * <pre>
     *波峰修正的弯矩 目前返回21个
     * </pre>
     *
     * <code>repeated double mwvecMH = 5;</code>
     */
    public java.util.List<java.lang.Double>
        getMwvecMHList() {
      return java.util.Collections.unmodifiableList(mwvecMH_);
    }
    /**
     * <pre>
     *波峰修正的弯矩 目前返回21个
     * </pre>
     *
     * <code>repeated double mwvecMH = 5;</code>
     */
    public int getMwvecMHCount() {
      return mwvecMH_.size();
    }
    /**
     * <pre>
     *波峰修正的弯矩 目前返回21个
     * </pre>
     *
     * <code>repeated double mwvecMH = 5;</code>
     */
    public double getMwvecMH(int index) {
      return mwvecMH_.get(index);
    }
    /**
     * <pre>
     *波峰修正的弯矩 目前返回21个
     * </pre>
     *
     * <code>repeated double mwvecMH = 5;</code>
     */
    public Builder setMwvecMH(
        int index, double value) {
      ensureMwvecMHIsMutable();
      mwvecMH_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *波峰修正的弯矩 目前返回21个
     * </pre>
     *
     * <code>repeated double mwvecMH = 5;</code>
     */
    public Builder addMwvecMH(double value) {
      ensureMwvecMHIsMutable();
      mwvecMH_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *波峰修正的弯矩 目前返回21个
     * </pre>
     *
     * <code>repeated double mwvecMH = 5;</code>
     */
    public Builder addAllMwvecMH(
        java.lang.Iterable<? extends java.lang.Double> values) {
      ensureMwvecMHIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, mwvecMH_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *波峰修正的弯矩 目前返回21个
     * </pre>
     *
     * <code>repeated double mwvecMH = 5;</code>
     */
    public Builder clearMwvecMH() {
      mwvecMH_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000010);
      onChanged();
      return this;
    }

    private java.util.List<java.lang.Double> bdeltaS_ = java.util.Collections.emptyList();
    private void ensureBdeltaSIsMutable() {
      if (!((bitField0_ & 0x00000020) == 0x00000020)) {
        bdeltaS_ = new java.util.ArrayList<java.lang.Double>(bdeltaS_);
        bitField0_ |= 0x00000020;
       }
    }
    /**
     * <pre>
     *中垂附加浮力  21个
     * </pre>
     *
     * <code>repeated double bdeltaS = 6;</code>
     */
    public java.util.List<java.lang.Double>
        getBdeltaSList() {
      return java.util.Collections.unmodifiableList(bdeltaS_);
    }
    /**
     * <pre>
     *中垂附加浮力  21个
     * </pre>
     *
     * <code>repeated double bdeltaS = 6;</code>
     */
    public int getBdeltaSCount() {
      return bdeltaS_.size();
    }
    /**
     * <pre>
     *中垂附加浮力  21个
     * </pre>
     *
     * <code>repeated double bdeltaS = 6;</code>
     */
    public double getBdeltaS(int index) {
      return bdeltaS_.get(index);
    }
    /**
     * <pre>
     *中垂附加浮力  21个
     * </pre>
     *
     * <code>repeated double bdeltaS = 6;</code>
     */
    public Builder setBdeltaS(
        int index, double value) {
      ensureBdeltaSIsMutable();
      bdeltaS_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *中垂附加浮力  21个
     * </pre>
     *
     * <code>repeated double bdeltaS = 6;</code>
     */
    public Builder addBdeltaS(double value) {
      ensureBdeltaSIsMutable();
      bdeltaS_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *中垂附加浮力  21个
     * </pre>
     *
     * <code>repeated double bdeltaS = 6;</code>
     */
    public Builder addAllBdeltaS(
        java.lang.Iterable<? extends java.lang.Double> values) {
      ensureBdeltaSIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, bdeltaS_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *中垂附加浮力  21个
     * </pre>
     *
     * <code>repeated double bdeltaS = 6;</code>
     */
    public Builder clearBdeltaS() {
      bdeltaS_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000020);
      onChanged();
      return this;
    }

    private java.util.List<java.lang.Double> nwvecS_ = java.util.Collections.emptyList();
    private void ensureNwvecSIsMutable() {
      if (!((bitField0_ & 0x00000040) == 0x00000040)) {
        nwvecS_ = new java.util.ArrayList<java.lang.Double>(nwvecS_);
        bitField0_ |= 0x00000040;
       }
    }
    /**
     * <pre>
     *波谷未修正的静水剪力 目前返回21个
     * </pre>
     *
     * <code>repeated double nwvecS = 7;</code>
     */
    public java.util.List<java.lang.Double>
        getNwvecSList() {
      return java.util.Collections.unmodifiableList(nwvecS_);
    }
    /**
     * <pre>
     *波谷未修正的静水剪力 目前返回21个
     * </pre>
     *
     * <code>repeated double nwvecS = 7;</code>
     */
    public int getNwvecSCount() {
      return nwvecS_.size();
    }
    /**
     * <pre>
     *波谷未修正的静水剪力 目前返回21个
     * </pre>
     *
     * <code>repeated double nwvecS = 7;</code>
     */
    public double getNwvecS(int index) {
      return nwvecS_.get(index);
    }
    /**
     * <pre>
     *波谷未修正的静水剪力 目前返回21个
     * </pre>
     *
     * <code>repeated double nwvecS = 7;</code>
     */
    public Builder setNwvecS(
        int index, double value) {
      ensureNwvecSIsMutable();
      nwvecS_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *波谷未修正的静水剪力 目前返回21个
     * </pre>
     *
     * <code>repeated double nwvecS = 7;</code>
     */
    public Builder addNwvecS(double value) {
      ensureNwvecSIsMutable();
      nwvecS_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *波谷未修正的静水剪力 目前返回21个
     * </pre>
     *
     * <code>repeated double nwvecS = 7;</code>
     */
    public Builder addAllNwvecS(
        java.lang.Iterable<? extends java.lang.Double> values) {
      ensureNwvecSIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, nwvecS_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *波谷未修正的静水剪力 目前返回21个
     * </pre>
     *
     * <code>repeated double nwvecS = 7;</code>
     */
    public Builder clearNwvecS() {
      nwvecS_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000040);
      onChanged();
      return this;
    }

    private java.util.List<java.lang.Double> mwvecS_ = java.util.Collections.emptyList();
    private void ensureMwvecSIsMutable() {
      if (!((bitField0_ & 0x00000080) == 0x00000080)) {
        mwvecS_ = new java.util.ArrayList<java.lang.Double>(mwvecS_);
        bitField0_ |= 0x00000080;
       }
    }
    /**
     * <pre>
     * 波谷未修正的弯矩 目前返回21个
     * </pre>
     *
     * <code>repeated double mwvecS = 8;</code>
     */
    public java.util.List<java.lang.Double>
        getMwvecSList() {
      return java.util.Collections.unmodifiableList(mwvecS_);
    }
    /**
     * <pre>
     * 波谷未修正的弯矩 目前返回21个
     * </pre>
     *
     * <code>repeated double mwvecS = 8;</code>
     */
    public int getMwvecSCount() {
      return mwvecS_.size();
    }
    /**
     * <pre>
     * 波谷未修正的弯矩 目前返回21个
     * </pre>
     *
     * <code>repeated double mwvecS = 8;</code>
     */
    public double getMwvecS(int index) {
      return mwvecS_.get(index);
    }
    /**
     * <pre>
     * 波谷未修正的弯矩 目前返回21个
     * </pre>
     *
     * <code>repeated double mwvecS = 8;</code>
     */
    public Builder setMwvecS(
        int index, double value) {
      ensureMwvecSIsMutable();
      mwvecS_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 波谷未修正的弯矩 目前返回21个
     * </pre>
     *
     * <code>repeated double mwvecS = 8;</code>
     */
    public Builder addMwvecS(double value) {
      ensureMwvecSIsMutable();
      mwvecS_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 波谷未修正的弯矩 目前返回21个
     * </pre>
     *
     * <code>repeated double mwvecS = 8;</code>
     */
    public Builder addAllMwvecS(
        java.lang.Iterable<? extends java.lang.Double> values) {
      ensureMwvecSIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, mwvecS_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 波谷未修正的弯矩 目前返回21个
     * </pre>
     *
     * <code>repeated double mwvecS = 8;</code>
     */
    public Builder clearMwvecS() {
      mwvecS_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000080);
      onChanged();
      return this;
    }

    private java.util.List<java.lang.Double> nwvecMS_ = java.util.Collections.emptyList();
    private void ensureNwvecMSIsMutable() {
      if (!((bitField0_ & 0x00000100) == 0x00000100)) {
        nwvecMS_ = new java.util.ArrayList<java.lang.Double>(nwvecMS_);
        bitField0_ |= 0x00000100;
       }
    }
    /**
     * <pre>
     *波谷修正的静水剪力 目前返回21个
     * </pre>
     *
     * <code>repeated double nwvecMS = 9;</code>
     */
    public java.util.List<java.lang.Double>
        getNwvecMSList() {
      return java.util.Collections.unmodifiableList(nwvecMS_);
    }
    /**
     * <pre>
     *波谷修正的静水剪力 目前返回21个
     * </pre>
     *
     * <code>repeated double nwvecMS = 9;</code>
     */
    public int getNwvecMSCount() {
      return nwvecMS_.size();
    }
    /**
     * <pre>
     *波谷修正的静水剪力 目前返回21个
     * </pre>
     *
     * <code>repeated double nwvecMS = 9;</code>
     */
    public double getNwvecMS(int index) {
      return nwvecMS_.get(index);
    }
    /**
     * <pre>
     *波谷修正的静水剪力 目前返回21个
     * </pre>
     *
     * <code>repeated double nwvecMS = 9;</code>
     */
    public Builder setNwvecMS(
        int index, double value) {
      ensureNwvecMSIsMutable();
      nwvecMS_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *波谷修正的静水剪力 目前返回21个
     * </pre>
     *
     * <code>repeated double nwvecMS = 9;</code>
     */
    public Builder addNwvecMS(double value) {
      ensureNwvecMSIsMutable();
      nwvecMS_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *波谷修正的静水剪力 目前返回21个
     * </pre>
     *
     * <code>repeated double nwvecMS = 9;</code>
     */
    public Builder addAllNwvecMS(
        java.lang.Iterable<? extends java.lang.Double> values) {
      ensureNwvecMSIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, nwvecMS_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *波谷修正的静水剪力 目前返回21个
     * </pre>
     *
     * <code>repeated double nwvecMS = 9;</code>
     */
    public Builder clearNwvecMS() {
      nwvecMS_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000100);
      onChanged();
      return this;
    }

    private java.util.List<java.lang.Double> mwvecMS_ = java.util.Collections.emptyList();
    private void ensureMwvecMSIsMutable() {
      if (!((bitField0_ & 0x00000200) == 0x00000200)) {
        mwvecMS_ = new java.util.ArrayList<java.lang.Double>(mwvecMS_);
        bitField0_ |= 0x00000200;
       }
    }
    /**
     * <pre>
     *波谷修正的弯矩 目前返回21个
     * </pre>
     *
     * <code>repeated double mwvecMS = 10;</code>
     */
    public java.util.List<java.lang.Double>
        getMwvecMSList() {
      return java.util.Collections.unmodifiableList(mwvecMS_);
    }
    /**
     * <pre>
     *波谷修正的弯矩 目前返回21个
     * </pre>
     *
     * <code>repeated double mwvecMS = 10;</code>
     */
    public int getMwvecMSCount() {
      return mwvecMS_.size();
    }
    /**
     * <pre>
     *波谷修正的弯矩 目前返回21个
     * </pre>
     *
     * <code>repeated double mwvecMS = 10;</code>
     */
    public double getMwvecMS(int index) {
      return mwvecMS_.get(index);
    }
    /**
     * <pre>
     *波谷修正的弯矩 目前返回21个
     * </pre>
     *
     * <code>repeated double mwvecMS = 10;</code>
     */
    public Builder setMwvecMS(
        int index, double value) {
      ensureMwvecMSIsMutable();
      mwvecMS_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *波谷修正的弯矩 目前返回21个
     * </pre>
     *
     * <code>repeated double mwvecMS = 10;</code>
     */
    public Builder addMwvecMS(double value) {
      ensureMwvecMSIsMutable();
      mwvecMS_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *波谷修正的弯矩 目前返回21个
     * </pre>
     *
     * <code>repeated double mwvecMS = 10;</code>
     */
    public Builder addAllMwvecMS(
        java.lang.Iterable<? extends java.lang.Double> values) {
      ensureMwvecMSIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, mwvecMS_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *波谷修正的弯矩 目前返回21个
     * </pre>
     *
     * <code>repeated double mwvecMS = 10;</code>
     */
    public Builder clearMwvecMS() {
      mwvecMS_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000200);
      onChanged();
      return this;
    }

    private int code_ ;
    /**
     * <pre>
     *0-正常 1-异常[增0731]
     * </pre>
     *
     * <code>int32 code = 11;</code>
     */
    public int getCode() {
      return code_;
    }
    /**
     * <pre>
     *0-正常 1-异常[增0731]
     * </pre>
     *
     * <code>int32 code = 11;</code>
     */
    public Builder setCode(int value) {
      
      code_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *0-正常 1-异常[增0731]
     * </pre>
     *
     * <code>int32 code = 11;</code>
     */
    public Builder clearCode() {
      
      code_ = 0;
      onChanged();
      return this;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }


    // @@protoc_insertion_point(builder_scope:com.iscas.biz.calculation.grpc.WaveLoadResponse)
  }

  // @@protoc_insertion_point(class_scope:com.iscas.biz.calculation.grpc.WaveLoadResponse)
  private static final com.iscas.biz.calculation.grpc.WaveLoadResponse DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.iscas.biz.calculation.grpc.WaveLoadResponse();
  }

  public static com.iscas.biz.calculation.grpc.WaveLoadResponse getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<WaveLoadResponse>
      PARSER = new com.google.protobuf.AbstractParser<WaveLoadResponse>() {
    public WaveLoadResponse parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
        return new WaveLoadResponse(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<WaveLoadResponse> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<WaveLoadResponse> getParserForType() {
    return PARSER;
  }

  public com.iscas.biz.calculation.grpc.WaveLoadResponse getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

