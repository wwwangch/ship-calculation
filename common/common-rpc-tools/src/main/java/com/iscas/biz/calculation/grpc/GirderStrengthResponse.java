// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: calculation.proto

package com.iscas.biz.calculation.grpc;

/**
 * <pre>
 *总纵强度校核输出
 * </pre>
 *
 * Protobuf type {@code com.iscas.biz.calculation.grpc.GirderStrengthResponse}
 */
public  final class GirderStrengthResponse extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:com.iscas.biz.calculation.grpc.GirderStrengthResponse)
    GirderStrengthResponseOrBuilder {
  // Use GirderStrengthResponse.newBuilder() to construct.
  private GirderStrengthResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private GirderStrengthResponse() {
    sigma1SH_ = 0D;
    sigma1MidH_ = 0D;
    sigma1SS_ = 0D;
    sigma1MidS_ = 0D;
    stress2SH_ = java.util.Collections.emptyList();
    stress2MidH_ = java.util.Collections.emptyList();
    stress3UpH_ = java.util.Collections.emptyList();
    stress3DownH_ = java.util.Collections.emptyList();
    stress4UpH_ = java.util.Collections.emptyList();
    stress4DownH_ = java.util.Collections.emptyList();
    stress2SS_ = java.util.Collections.emptyList();
    stress2MidS_ = java.util.Collections.emptyList();
    stress3UpS_ = java.util.Collections.emptyList();
    stress3DownS_ = java.util.Collections.emptyList();
    stress4UpS_ = java.util.Collections.emptyList();
    stress4DownS_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
  }
  private GirderStrengthResponse(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    int mutable_bitField0_ = 0;
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!input.skipField(tag)) {
              done = true;
            }
            break;
          }
          case 9: {

            sigma1SH_ = input.readDouble();
            break;
          }
          case 17: {

            sigma1MidH_ = input.readDouble();
            break;
          }
          case 25: {

            sigma1SS_ = input.readDouble();
            break;
          }
          case 33: {

            sigma1MidS_ = input.readDouble();
            break;
          }
          case 41: {
            if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
              stress2SH_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000010;
            }
            stress2SH_.add(input.readDouble());
            break;
          }
          case 42: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000010) == 0x00000010) && input.getBytesUntilLimit() > 0) {
              stress2SH_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000010;
            }
            while (input.getBytesUntilLimit() > 0) {
              stress2SH_.add(input.readDouble());
            }
            input.popLimit(limit);
            break;
          }
          case 49: {
            if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
              stress2MidH_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000020;
            }
            stress2MidH_.add(input.readDouble());
            break;
          }
          case 50: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
              stress2MidH_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000020;
            }
            while (input.getBytesUntilLimit() > 0) {
              stress2MidH_.add(input.readDouble());
            }
            input.popLimit(limit);
            break;
          }
          case 57: {
            if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
              stress3UpH_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000040;
            }
            stress3UpH_.add(input.readDouble());
            break;
          }
          case 58: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
              stress3UpH_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000040;
            }
            while (input.getBytesUntilLimit() > 0) {
              stress3UpH_.add(input.readDouble());
            }
            input.popLimit(limit);
            break;
          }
          case 65: {
            if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
              stress3DownH_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000080;
            }
            stress3DownH_.add(input.readDouble());
            break;
          }
          case 66: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000080) == 0x00000080) && input.getBytesUntilLimit() > 0) {
              stress3DownH_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000080;
            }
            while (input.getBytesUntilLimit() > 0) {
              stress3DownH_.add(input.readDouble());
            }
            input.popLimit(limit);
            break;
          }
          case 73: {
            if (!((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
              stress4UpH_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000100;
            }
            stress4UpH_.add(input.readDouble());
            break;
          }
          case 74: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000100) == 0x00000100) && input.getBytesUntilLimit() > 0) {
              stress4UpH_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000100;
            }
            while (input.getBytesUntilLimit() > 0) {
              stress4UpH_.add(input.readDouble());
            }
            input.popLimit(limit);
            break;
          }
          case 81: {
            if (!((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
              stress4DownH_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000200;
            }
            stress4DownH_.add(input.readDouble());
            break;
          }
          case 82: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000200) == 0x00000200) && input.getBytesUntilLimit() > 0) {
              stress4DownH_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000200;
            }
            while (input.getBytesUntilLimit() > 0) {
              stress4DownH_.add(input.readDouble());
            }
            input.popLimit(limit);
            break;
          }
          case 89: {
            if (!((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
              stress2SS_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000400;
            }
            stress2SS_.add(input.readDouble());
            break;
          }
          case 90: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000400) == 0x00000400) && input.getBytesUntilLimit() > 0) {
              stress2SS_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000400;
            }
            while (input.getBytesUntilLimit() > 0) {
              stress2SS_.add(input.readDouble());
            }
            input.popLimit(limit);
            break;
          }
          case 97: {
            if (!((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
              stress2MidS_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000800;
            }
            stress2MidS_.add(input.readDouble());
            break;
          }
          case 98: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000800) == 0x00000800) && input.getBytesUntilLimit() > 0) {
              stress2MidS_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000800;
            }
            while (input.getBytesUntilLimit() > 0) {
              stress2MidS_.add(input.readDouble());
            }
            input.popLimit(limit);
            break;
          }
          case 105: {
            if (!((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
              stress3UpS_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00001000;
            }
            stress3UpS_.add(input.readDouble());
            break;
          }
          case 106: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00001000) == 0x00001000) && input.getBytesUntilLimit() > 0) {
              stress3UpS_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00001000;
            }
            while (input.getBytesUntilLimit() > 0) {
              stress3UpS_.add(input.readDouble());
            }
            input.popLimit(limit);
            break;
          }
          case 113: {
            if (!((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
              stress3DownS_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00002000;
            }
            stress3DownS_.add(input.readDouble());
            break;
          }
          case 114: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00002000) == 0x00002000) && input.getBytesUntilLimit() > 0) {
              stress3DownS_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00002000;
            }
            while (input.getBytesUntilLimit() > 0) {
              stress3DownS_.add(input.readDouble());
            }
            input.popLimit(limit);
            break;
          }
          case 121: {
            if (!((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
              stress4UpS_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00004000;
            }
            stress4UpS_.add(input.readDouble());
            break;
          }
          case 122: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00004000) == 0x00004000) && input.getBytesUntilLimit() > 0) {
              stress4UpS_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00004000;
            }
            while (input.getBytesUntilLimit() > 0) {
              stress4UpS_.add(input.readDouble());
            }
            input.popLimit(limit);
            break;
          }
          case 129: {
            if (!((mutable_bitField0_ & 0x00008000) == 0x00008000)) {
              stress4DownS_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00008000;
            }
            stress4DownS_.add(input.readDouble());
            break;
          }
          case 130: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00008000) == 0x00008000) && input.getBytesUntilLimit() > 0) {
              stress4DownS_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00008000;
            }
            while (input.getBytesUntilLimit() > 0) {
              stress4DownS_.add(input.readDouble());
            }
            input.popLimit(limit);
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
        stress2SH_ = java.util.Collections.unmodifiableList(stress2SH_);
      }
      if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
        stress2MidH_ = java.util.Collections.unmodifiableList(stress2MidH_);
      }
      if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
        stress3UpH_ = java.util.Collections.unmodifiableList(stress3UpH_);
      }
      if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
        stress3DownH_ = java.util.Collections.unmodifiableList(stress3DownH_);
      }
      if (((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
        stress4UpH_ = java.util.Collections.unmodifiableList(stress4UpH_);
      }
      if (((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
        stress4DownH_ = java.util.Collections.unmodifiableList(stress4DownH_);
      }
      if (((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
        stress2SS_ = java.util.Collections.unmodifiableList(stress2SS_);
      }
      if (((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
        stress2MidS_ = java.util.Collections.unmodifiableList(stress2MidS_);
      }
      if (((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
        stress3UpS_ = java.util.Collections.unmodifiableList(stress3UpS_);
      }
      if (((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
        stress3DownS_ = java.util.Collections.unmodifiableList(stress3DownS_);
      }
      if (((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
        stress4UpS_ = java.util.Collections.unmodifiableList(stress4UpS_);
      }
      if (((mutable_bitField0_ & 0x00008000) == 0x00008000)) {
        stress4DownS_ = java.util.Collections.unmodifiableList(stress4DownS_);
      }
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.iscas.biz.calculation.grpc.CalculationProto.internal_static_com_iscas_biz_calculation_grpc_GirderStrengthResponse_descriptor;
  }

  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.iscas.biz.calculation.grpc.CalculationProto.internal_static_com_iscas_biz_calculation_grpc_GirderStrengthResponse_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.iscas.biz.calculation.grpc.GirderStrengthResponse.class, com.iscas.biz.calculation.grpc.GirderStrengthResponse.Builder.class);
  }

  private int bitField0_;
  public static final int SIGMA1SH_FIELD_NUMBER = 1;
  private double sigma1SH_;
  /**
   * <pre>
   *中拱支座处
   * </pre>
   *
   * <code>double sigma1SH = 1;</code>
   */
  public double getSigma1SH() {
    return sigma1SH_;
  }

  public static final int SIGMA1MIDH_FIELD_NUMBER = 2;
  private double sigma1MidH_;
  /**
   * <pre>
   *中拱跨中处
   * </pre>
   *
   * <code>double sigma1MidH = 2;</code>
   */
  public double getSigma1MidH() {
    return sigma1MidH_;
  }

  public static final int SIGMA1SS_FIELD_NUMBER = 3;
  private double sigma1SS_;
  /**
   * <pre>
   *中垂支座处
   * </pre>
   *
   * <code>double sigma1SS = 3;</code>
   */
  public double getSigma1SS() {
    return sigma1SS_;
  }

  public static final int SIGMA1MIDS_FIELD_NUMBER = 4;
  private double sigma1MidS_;
  /**
   * <pre>
   *中垂跨中处
   * </pre>
   *
   * <code>double sigma1MidS = 4;</code>
   */
  public double getSigma1MidS() {
    return sigma1MidS_;
  }

  public static final int STRESS2SH_FIELD_NUMBER = 5;
  private java.util.List<java.lang.Double> stress2SH_;
  /**
   * <pre>
   *中拱不同桁材处的支座处的sigma2
   * </pre>
   *
   * <code>repeated double stress2SH = 5;</code>
   */
  public java.util.List<java.lang.Double>
      getStress2SHList() {
    return stress2SH_;
  }
  /**
   * <pre>
   *中拱不同桁材处的支座处的sigma2
   * </pre>
   *
   * <code>repeated double stress2SH = 5;</code>
   */
  public int getStress2SHCount() {
    return stress2SH_.size();
  }
  /**
   * <pre>
   *中拱不同桁材处的支座处的sigma2
   * </pre>
   *
   * <code>repeated double stress2SH = 5;</code>
   */
  public double getStress2SH(int index) {
    return stress2SH_.get(index);
  }
  private int stress2SHMemoizedSerializedSize = -1;

  public static final int STRESS2MIDH_FIELD_NUMBER = 6;
  private java.util.List<java.lang.Double> stress2MidH_;
  /**
   * <pre>
   *中拱不同桁材处的跨中处的sigma2
   * </pre>
   *
   * <code>repeated double stress2MidH = 6;</code>
   */
  public java.util.List<java.lang.Double>
      getStress2MidHList() {
    return stress2MidH_;
  }
  /**
   * <pre>
   *中拱不同桁材处的跨中处的sigma2
   * </pre>
   *
   * <code>repeated double stress2MidH = 6;</code>
   */
  public int getStress2MidHCount() {
    return stress2MidH_.size();
  }
  /**
   * <pre>
   *中拱不同桁材处的跨中处的sigma2
   * </pre>
   *
   * <code>repeated double stress2MidH = 6;</code>
   */
  public double getStress2MidH(int index) {
    return stress2MidH_.get(index);
  }
  private int stress2MidHMemoizedSerializedSize = -1;

  public static final int STRESS3UPH_FIELD_NUMBER = 7;
  private java.util.List<java.lang.Double> stress3UpH_;
  /**
   * <pre>
   *中拱骨材上纤维处的应力
   * </pre>
   *
   * <code>repeated double stress3UpH = 7;</code>
   */
  public java.util.List<java.lang.Double>
      getStress3UpHList() {
    return stress3UpH_;
  }
  /**
   * <pre>
   *中拱骨材上纤维处的应力
   * </pre>
   *
   * <code>repeated double stress3UpH = 7;</code>
   */
  public int getStress3UpHCount() {
    return stress3UpH_.size();
  }
  /**
   * <pre>
   *中拱骨材上纤维处的应力
   * </pre>
   *
   * <code>repeated double stress3UpH = 7;</code>
   */
  public double getStress3UpH(int index) {
    return stress3UpH_.get(index);
  }
  private int stress3UpHMemoizedSerializedSize = -1;

  public static final int STRESS3DOWNH_FIELD_NUMBER = 8;
  private java.util.List<java.lang.Double> stress3DownH_;
  /**
   * <pre>
   *中拱骨材下纤维处的应力
   * </pre>
   *
   * <code>repeated double stress3DownH = 8;</code>
   */
  public java.util.List<java.lang.Double>
      getStress3DownHList() {
    return stress3DownH_;
  }
  /**
   * <pre>
   *中拱骨材下纤维处的应力
   * </pre>
   *
   * <code>repeated double stress3DownH = 8;</code>
   */
  public int getStress3DownHCount() {
    return stress3DownH_.size();
  }
  /**
   * <pre>
   *中拱骨材下纤维处的应力
   * </pre>
   *
   * <code>repeated double stress3DownH = 8;</code>
   */
  public double getStress3DownH(int index) {
    return stress3DownH_.get(index);
  }
  private int stress3DownHMemoizedSerializedSize = -1;

  public static final int STRESS4UPH_FIELD_NUMBER = 9;
  private java.util.List<java.lang.Double> stress4UpH_;
  /**
   * <pre>
   *中拱板格的上表面
   * </pre>
   *
   * <code>repeated double stress4UpH = 9;</code>
   */
  public java.util.List<java.lang.Double>
      getStress4UpHList() {
    return stress4UpH_;
  }
  /**
   * <pre>
   *中拱板格的上表面
   * </pre>
   *
   * <code>repeated double stress4UpH = 9;</code>
   */
  public int getStress4UpHCount() {
    return stress4UpH_.size();
  }
  /**
   * <pre>
   *中拱板格的上表面
   * </pre>
   *
   * <code>repeated double stress4UpH = 9;</code>
   */
  public double getStress4UpH(int index) {
    return stress4UpH_.get(index);
  }
  private int stress4UpHMemoizedSerializedSize = -1;

  public static final int STRESS4DOWNH_FIELD_NUMBER = 10;
  private java.util.List<java.lang.Double> stress4DownH_;
  /**
   * <pre>
   *中拱板格的下表面
   * </pre>
   *
   * <code>repeated double stress4downH = 10;</code>
   */
  public java.util.List<java.lang.Double>
      getStress4DownHList() {
    return stress4DownH_;
  }
  /**
   * <pre>
   *中拱板格的下表面
   * </pre>
   *
   * <code>repeated double stress4downH = 10;</code>
   */
  public int getStress4DownHCount() {
    return stress4DownH_.size();
  }
  /**
   * <pre>
   *中拱板格的下表面
   * </pre>
   *
   * <code>repeated double stress4downH = 10;</code>
   */
  public double getStress4DownH(int index) {
    return stress4DownH_.get(index);
  }
  private int stress4DownHMemoizedSerializedSize = -1;

  public static final int STRESS2SS_FIELD_NUMBER = 11;
  private java.util.List<java.lang.Double> stress2SS_;
  /**
   * <pre>
   *中垂不同桁材处的支座处的sigma2
   * </pre>
   *
   * <code>repeated double stress2SS = 11;</code>
   */
  public java.util.List<java.lang.Double>
      getStress2SSList() {
    return stress2SS_;
  }
  /**
   * <pre>
   *中垂不同桁材处的支座处的sigma2
   * </pre>
   *
   * <code>repeated double stress2SS = 11;</code>
   */
  public int getStress2SSCount() {
    return stress2SS_.size();
  }
  /**
   * <pre>
   *中垂不同桁材处的支座处的sigma2
   * </pre>
   *
   * <code>repeated double stress2SS = 11;</code>
   */
  public double getStress2SS(int index) {
    return stress2SS_.get(index);
  }
  private int stress2SSMemoizedSerializedSize = -1;

  public static final int STRESS2MIDS_FIELD_NUMBER = 12;
  private java.util.List<java.lang.Double> stress2MidS_;
  /**
   * <pre>
   *中垂不同桁材处的跨中处的sigma2
   * </pre>
   *
   * <code>repeated double stress2MidS = 12;</code>
   */
  public java.util.List<java.lang.Double>
      getStress2MidSList() {
    return stress2MidS_;
  }
  /**
   * <pre>
   *中垂不同桁材处的跨中处的sigma2
   * </pre>
   *
   * <code>repeated double stress2MidS = 12;</code>
   */
  public int getStress2MidSCount() {
    return stress2MidS_.size();
  }
  /**
   * <pre>
   *中垂不同桁材处的跨中处的sigma2
   * </pre>
   *
   * <code>repeated double stress2MidS = 12;</code>
   */
  public double getStress2MidS(int index) {
    return stress2MidS_.get(index);
  }
  private int stress2MidSMemoizedSerializedSize = -1;

  public static final int STRESS3UPS_FIELD_NUMBER = 13;
  private java.util.List<java.lang.Double> stress3UpS_;
  /**
   * <pre>
   *中垂骨材上纤维处的应力
   * </pre>
   *
   * <code>repeated double stress3UpS = 13;</code>
   */
  public java.util.List<java.lang.Double>
      getStress3UpSList() {
    return stress3UpS_;
  }
  /**
   * <pre>
   *中垂骨材上纤维处的应力
   * </pre>
   *
   * <code>repeated double stress3UpS = 13;</code>
   */
  public int getStress3UpSCount() {
    return stress3UpS_.size();
  }
  /**
   * <pre>
   *中垂骨材上纤维处的应力
   * </pre>
   *
   * <code>repeated double stress3UpS = 13;</code>
   */
  public double getStress3UpS(int index) {
    return stress3UpS_.get(index);
  }
  private int stress3UpSMemoizedSerializedSize = -1;

  public static final int STRESS3DOWNS_FIELD_NUMBER = 14;
  private java.util.List<java.lang.Double> stress3DownS_;
  /**
   * <pre>
   *中垂骨材下纤维处的应力
   * </pre>
   *
   * <code>repeated double stress3DownS = 14;</code>
   */
  public java.util.List<java.lang.Double>
      getStress3DownSList() {
    return stress3DownS_;
  }
  /**
   * <pre>
   *中垂骨材下纤维处的应力
   * </pre>
   *
   * <code>repeated double stress3DownS = 14;</code>
   */
  public int getStress3DownSCount() {
    return stress3DownS_.size();
  }
  /**
   * <pre>
   *中垂骨材下纤维处的应力
   * </pre>
   *
   * <code>repeated double stress3DownS = 14;</code>
   */
  public double getStress3DownS(int index) {
    return stress3DownS_.get(index);
  }
  private int stress3DownSMemoizedSerializedSize = -1;

  public static final int STRESS4UPS_FIELD_NUMBER = 15;
  private java.util.List<java.lang.Double> stress4UpS_;
  /**
   * <pre>
   *中垂板格的上表面
   * </pre>
   *
   * <code>repeated double stress4UpS = 15;</code>
   */
  public java.util.List<java.lang.Double>
      getStress4UpSList() {
    return stress4UpS_;
  }
  /**
   * <pre>
   *中垂板格的上表面
   * </pre>
   *
   * <code>repeated double stress4UpS = 15;</code>
   */
  public int getStress4UpSCount() {
    return stress4UpS_.size();
  }
  /**
   * <pre>
   *中垂板格的上表面
   * </pre>
   *
   * <code>repeated double stress4UpS = 15;</code>
   */
  public double getStress4UpS(int index) {
    return stress4UpS_.get(index);
  }
  private int stress4UpSMemoizedSerializedSize = -1;

  public static final int STRESS4DOWNS_FIELD_NUMBER = 16;
  private java.util.List<java.lang.Double> stress4DownS_;
  /**
   * <pre>
   *中垂板格的下表面
   * </pre>
   *
   * <code>repeated double stress4downS = 16;</code>
   */
  public java.util.List<java.lang.Double>
      getStress4DownSList() {
    return stress4DownS_;
  }
  /**
   * <pre>
   *中垂板格的下表面
   * </pre>
   *
   * <code>repeated double stress4downS = 16;</code>
   */
  public int getStress4DownSCount() {
    return stress4DownS_.size();
  }
  /**
   * <pre>
   *中垂板格的下表面
   * </pre>
   *
   * <code>repeated double stress4downS = 16;</code>
   */
  public double getStress4DownS(int index) {
    return stress4DownS_.get(index);
  }
  private int stress4DownSMemoizedSerializedSize = -1;

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    getSerializedSize();
    if (sigma1SH_ != 0D) {
      output.writeDouble(1, sigma1SH_);
    }
    if (sigma1MidH_ != 0D) {
      output.writeDouble(2, sigma1MidH_);
    }
    if (sigma1SS_ != 0D) {
      output.writeDouble(3, sigma1SS_);
    }
    if (sigma1MidS_ != 0D) {
      output.writeDouble(4, sigma1MidS_);
    }
    if (getStress2SHList().size() > 0) {
      output.writeUInt32NoTag(42);
      output.writeUInt32NoTag(stress2SHMemoizedSerializedSize);
    }
    for (int i = 0; i < stress2SH_.size(); i++) {
      output.writeDoubleNoTag(stress2SH_.get(i));
    }
    if (getStress2MidHList().size() > 0) {
      output.writeUInt32NoTag(50);
      output.writeUInt32NoTag(stress2MidHMemoizedSerializedSize);
    }
    for (int i = 0; i < stress2MidH_.size(); i++) {
      output.writeDoubleNoTag(stress2MidH_.get(i));
    }
    if (getStress3UpHList().size() > 0) {
      output.writeUInt32NoTag(58);
      output.writeUInt32NoTag(stress3UpHMemoizedSerializedSize);
    }
    for (int i = 0; i < stress3UpH_.size(); i++) {
      output.writeDoubleNoTag(stress3UpH_.get(i));
    }
    if (getStress3DownHList().size() > 0) {
      output.writeUInt32NoTag(66);
      output.writeUInt32NoTag(stress3DownHMemoizedSerializedSize);
    }
    for (int i = 0; i < stress3DownH_.size(); i++) {
      output.writeDoubleNoTag(stress3DownH_.get(i));
    }
    if (getStress4UpHList().size() > 0) {
      output.writeUInt32NoTag(74);
      output.writeUInt32NoTag(stress4UpHMemoizedSerializedSize);
    }
    for (int i = 0; i < stress4UpH_.size(); i++) {
      output.writeDoubleNoTag(stress4UpH_.get(i));
    }
    if (getStress4DownHList().size() > 0) {
      output.writeUInt32NoTag(82);
      output.writeUInt32NoTag(stress4DownHMemoizedSerializedSize);
    }
    for (int i = 0; i < stress4DownH_.size(); i++) {
      output.writeDoubleNoTag(stress4DownH_.get(i));
    }
    if (getStress2SSList().size() > 0) {
      output.writeUInt32NoTag(90);
      output.writeUInt32NoTag(stress2SSMemoizedSerializedSize);
    }
    for (int i = 0; i < stress2SS_.size(); i++) {
      output.writeDoubleNoTag(stress2SS_.get(i));
    }
    if (getStress2MidSList().size() > 0) {
      output.writeUInt32NoTag(98);
      output.writeUInt32NoTag(stress2MidSMemoizedSerializedSize);
    }
    for (int i = 0; i < stress2MidS_.size(); i++) {
      output.writeDoubleNoTag(stress2MidS_.get(i));
    }
    if (getStress3UpSList().size() > 0) {
      output.writeUInt32NoTag(106);
      output.writeUInt32NoTag(stress3UpSMemoizedSerializedSize);
    }
    for (int i = 0; i < stress3UpS_.size(); i++) {
      output.writeDoubleNoTag(stress3UpS_.get(i));
    }
    if (getStress3DownSList().size() > 0) {
      output.writeUInt32NoTag(114);
      output.writeUInt32NoTag(stress3DownSMemoizedSerializedSize);
    }
    for (int i = 0; i < stress3DownS_.size(); i++) {
      output.writeDoubleNoTag(stress3DownS_.get(i));
    }
    if (getStress4UpSList().size() > 0) {
      output.writeUInt32NoTag(122);
      output.writeUInt32NoTag(stress4UpSMemoizedSerializedSize);
    }
    for (int i = 0; i < stress4UpS_.size(); i++) {
      output.writeDoubleNoTag(stress4UpS_.get(i));
    }
    if (getStress4DownSList().size() > 0) {
      output.writeUInt32NoTag(130);
      output.writeUInt32NoTag(stress4DownSMemoizedSerializedSize);
    }
    for (int i = 0; i < stress4DownS_.size(); i++) {
      output.writeDoubleNoTag(stress4DownS_.get(i));
    }
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (sigma1SH_ != 0D) {
      size += com.google.protobuf.CodedOutputStream
        .computeDoubleSize(1, sigma1SH_);
    }
    if (sigma1MidH_ != 0D) {
      size += com.google.protobuf.CodedOutputStream
        .computeDoubleSize(2, sigma1MidH_);
    }
    if (sigma1SS_ != 0D) {
      size += com.google.protobuf.CodedOutputStream
        .computeDoubleSize(3, sigma1SS_);
    }
    if (sigma1MidS_ != 0D) {
      size += com.google.protobuf.CodedOutputStream
        .computeDoubleSize(4, sigma1MidS_);
    }
    {
      int dataSize = 0;
      dataSize = 8 * getStress2SHList().size();
      size += dataSize;
      if (!getStress2SHList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      stress2SHMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 8 * getStress2MidHList().size();
      size += dataSize;
      if (!getStress2MidHList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      stress2MidHMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 8 * getStress3UpHList().size();
      size += dataSize;
      if (!getStress3UpHList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      stress3UpHMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 8 * getStress3DownHList().size();
      size += dataSize;
      if (!getStress3DownHList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      stress3DownHMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 8 * getStress4UpHList().size();
      size += dataSize;
      if (!getStress4UpHList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      stress4UpHMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 8 * getStress4DownHList().size();
      size += dataSize;
      if (!getStress4DownHList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      stress4DownHMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 8 * getStress2SSList().size();
      size += dataSize;
      if (!getStress2SSList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      stress2SSMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 8 * getStress2MidSList().size();
      size += dataSize;
      if (!getStress2MidSList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      stress2MidSMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 8 * getStress3UpSList().size();
      size += dataSize;
      if (!getStress3UpSList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      stress3UpSMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 8 * getStress3DownSList().size();
      size += dataSize;
      if (!getStress3DownSList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      stress3DownSMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 8 * getStress4UpSList().size();
      size += dataSize;
      if (!getStress4UpSList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      stress4UpSMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 8 * getStress4DownSList().size();
      size += dataSize;
      if (!getStress4DownSList().isEmpty()) {
        size += 2;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      stress4DownSMemoizedSerializedSize = dataSize;
    }
    memoizedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.iscas.biz.calculation.grpc.GirderStrengthResponse)) {
      return super.equals(obj);
    }
    com.iscas.biz.calculation.grpc.GirderStrengthResponse other = (com.iscas.biz.calculation.grpc.GirderStrengthResponse) obj;

    boolean result = true;
    result = result && (
        java.lang.Double.doubleToLongBits(getSigma1SH())
        == java.lang.Double.doubleToLongBits(
            other.getSigma1SH()));
    result = result && (
        java.lang.Double.doubleToLongBits(getSigma1MidH())
        == java.lang.Double.doubleToLongBits(
            other.getSigma1MidH()));
    result = result && (
        java.lang.Double.doubleToLongBits(getSigma1SS())
        == java.lang.Double.doubleToLongBits(
            other.getSigma1SS()));
    result = result && (
        java.lang.Double.doubleToLongBits(getSigma1MidS())
        == java.lang.Double.doubleToLongBits(
            other.getSigma1MidS()));
    result = result && getStress2SHList()
        .equals(other.getStress2SHList());
    result = result && getStress2MidHList()
        .equals(other.getStress2MidHList());
    result = result && getStress3UpHList()
        .equals(other.getStress3UpHList());
    result = result && getStress3DownHList()
        .equals(other.getStress3DownHList());
    result = result && getStress4UpHList()
        .equals(other.getStress4UpHList());
    result = result && getStress4DownHList()
        .equals(other.getStress4DownHList());
    result = result && getStress2SSList()
        .equals(other.getStress2SSList());
    result = result && getStress2MidSList()
        .equals(other.getStress2MidSList());
    result = result && getStress3UpSList()
        .equals(other.getStress3UpSList());
    result = result && getStress3DownSList()
        .equals(other.getStress3DownSList());
    result = result && getStress4UpSList()
        .equals(other.getStress4UpSList());
    result = result && getStress4DownSList()
        .equals(other.getStress4DownSList());
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + SIGMA1SH_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        java.lang.Double.doubleToLongBits(getSigma1SH()));
    hash = (37 * hash) + SIGMA1MIDH_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        java.lang.Double.doubleToLongBits(getSigma1MidH()));
    hash = (37 * hash) + SIGMA1SS_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        java.lang.Double.doubleToLongBits(getSigma1SS()));
    hash = (37 * hash) + SIGMA1MIDS_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        java.lang.Double.doubleToLongBits(getSigma1MidS()));
    if (getStress2SHCount() > 0) {
      hash = (37 * hash) + STRESS2SH_FIELD_NUMBER;
      hash = (53 * hash) + getStress2SHList().hashCode();
    }
    if (getStress2MidHCount() > 0) {
      hash = (37 * hash) + STRESS2MIDH_FIELD_NUMBER;
      hash = (53 * hash) + getStress2MidHList().hashCode();
    }
    if (getStress3UpHCount() > 0) {
      hash = (37 * hash) + STRESS3UPH_FIELD_NUMBER;
      hash = (53 * hash) + getStress3UpHList().hashCode();
    }
    if (getStress3DownHCount() > 0) {
      hash = (37 * hash) + STRESS3DOWNH_FIELD_NUMBER;
      hash = (53 * hash) + getStress3DownHList().hashCode();
    }
    if (getStress4UpHCount() > 0) {
      hash = (37 * hash) + STRESS4UPH_FIELD_NUMBER;
      hash = (53 * hash) + getStress4UpHList().hashCode();
    }
    if (getStress4DownHCount() > 0) {
      hash = (37 * hash) + STRESS4DOWNH_FIELD_NUMBER;
      hash = (53 * hash) + getStress4DownHList().hashCode();
    }
    if (getStress2SSCount() > 0) {
      hash = (37 * hash) + STRESS2SS_FIELD_NUMBER;
      hash = (53 * hash) + getStress2SSList().hashCode();
    }
    if (getStress2MidSCount() > 0) {
      hash = (37 * hash) + STRESS2MIDS_FIELD_NUMBER;
      hash = (53 * hash) + getStress2MidSList().hashCode();
    }
    if (getStress3UpSCount() > 0) {
      hash = (37 * hash) + STRESS3UPS_FIELD_NUMBER;
      hash = (53 * hash) + getStress3UpSList().hashCode();
    }
    if (getStress3DownSCount() > 0) {
      hash = (37 * hash) + STRESS3DOWNS_FIELD_NUMBER;
      hash = (53 * hash) + getStress3DownSList().hashCode();
    }
    if (getStress4UpSCount() > 0) {
      hash = (37 * hash) + STRESS4UPS_FIELD_NUMBER;
      hash = (53 * hash) + getStress4UpSList().hashCode();
    }
    if (getStress4DownSCount() > 0) {
      hash = (37 * hash) + STRESS4DOWNS_FIELD_NUMBER;
      hash = (53 * hash) + getStress4DownSList().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.iscas.biz.calculation.grpc.GirderStrengthResponse parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.iscas.biz.calculation.grpc.GirderStrengthResponse parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.iscas.biz.calculation.grpc.GirderStrengthResponse parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.iscas.biz.calculation.grpc.GirderStrengthResponse parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.iscas.biz.calculation.grpc.GirderStrengthResponse parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.iscas.biz.calculation.grpc.GirderStrengthResponse parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.iscas.biz.calculation.grpc.GirderStrengthResponse parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.iscas.biz.calculation.grpc.GirderStrengthResponse parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.iscas.biz.calculation.grpc.GirderStrengthResponse parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.iscas.biz.calculation.grpc.GirderStrengthResponse parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.iscas.biz.calculation.grpc.GirderStrengthResponse prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   *总纵强度校核输出
   * </pre>
   *
   * Protobuf type {@code com.iscas.biz.calculation.grpc.GirderStrengthResponse}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:com.iscas.biz.calculation.grpc.GirderStrengthResponse)
      com.iscas.biz.calculation.grpc.GirderStrengthResponseOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.iscas.biz.calculation.grpc.CalculationProto.internal_static_com_iscas_biz_calculation_grpc_GirderStrengthResponse_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.iscas.biz.calculation.grpc.CalculationProto.internal_static_com_iscas_biz_calculation_grpc_GirderStrengthResponse_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.iscas.biz.calculation.grpc.GirderStrengthResponse.class, com.iscas.biz.calculation.grpc.GirderStrengthResponse.Builder.class);
    }

    // Construct using com.iscas.biz.calculation.grpc.GirderStrengthResponse.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    public Builder clear() {
      super.clear();
      sigma1SH_ = 0D;

      sigma1MidH_ = 0D;

      sigma1SS_ = 0D;

      sigma1MidS_ = 0D;

      stress2SH_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000010);
      stress2MidH_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000020);
      stress3UpH_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000040);
      stress3DownH_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000080);
      stress4UpH_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000100);
      stress4DownH_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000200);
      stress2SS_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000400);
      stress2MidS_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000800);
      stress3UpS_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00001000);
      stress3DownS_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00002000);
      stress4UpS_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00004000);
      stress4DownS_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00008000);
      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.iscas.biz.calculation.grpc.CalculationProto.internal_static_com_iscas_biz_calculation_grpc_GirderStrengthResponse_descriptor;
    }

    public com.iscas.biz.calculation.grpc.GirderStrengthResponse getDefaultInstanceForType() {
      return com.iscas.biz.calculation.grpc.GirderStrengthResponse.getDefaultInstance();
    }

    public com.iscas.biz.calculation.grpc.GirderStrengthResponse build() {
      com.iscas.biz.calculation.grpc.GirderStrengthResponse result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public com.iscas.biz.calculation.grpc.GirderStrengthResponse buildPartial() {
      com.iscas.biz.calculation.grpc.GirderStrengthResponse result = new com.iscas.biz.calculation.grpc.GirderStrengthResponse(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      result.sigma1SH_ = sigma1SH_;
      result.sigma1MidH_ = sigma1MidH_;
      result.sigma1SS_ = sigma1SS_;
      result.sigma1MidS_ = sigma1MidS_;
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        stress2SH_ = java.util.Collections.unmodifiableList(stress2SH_);
        bitField0_ = (bitField0_ & ~0x00000010);
      }
      result.stress2SH_ = stress2SH_;
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        stress2MidH_ = java.util.Collections.unmodifiableList(stress2MidH_);
        bitField0_ = (bitField0_ & ~0x00000020);
      }
      result.stress2MidH_ = stress2MidH_;
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        stress3UpH_ = java.util.Collections.unmodifiableList(stress3UpH_);
        bitField0_ = (bitField0_ & ~0x00000040);
      }
      result.stress3UpH_ = stress3UpH_;
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        stress3DownH_ = java.util.Collections.unmodifiableList(stress3DownH_);
        bitField0_ = (bitField0_ & ~0x00000080);
      }
      result.stress3DownH_ = stress3DownH_;
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        stress4UpH_ = java.util.Collections.unmodifiableList(stress4UpH_);
        bitField0_ = (bitField0_ & ~0x00000100);
      }
      result.stress4UpH_ = stress4UpH_;
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        stress4DownH_ = java.util.Collections.unmodifiableList(stress4DownH_);
        bitField0_ = (bitField0_ & ~0x00000200);
      }
      result.stress4DownH_ = stress4DownH_;
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        stress2SS_ = java.util.Collections.unmodifiableList(stress2SS_);
        bitField0_ = (bitField0_ & ~0x00000400);
      }
      result.stress2SS_ = stress2SS_;
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        stress2MidS_ = java.util.Collections.unmodifiableList(stress2MidS_);
        bitField0_ = (bitField0_ & ~0x00000800);
      }
      result.stress2MidS_ = stress2MidS_;
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        stress3UpS_ = java.util.Collections.unmodifiableList(stress3UpS_);
        bitField0_ = (bitField0_ & ~0x00001000);
      }
      result.stress3UpS_ = stress3UpS_;
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        stress3DownS_ = java.util.Collections.unmodifiableList(stress3DownS_);
        bitField0_ = (bitField0_ & ~0x00002000);
      }
      result.stress3DownS_ = stress3DownS_;
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        stress4UpS_ = java.util.Collections.unmodifiableList(stress4UpS_);
        bitField0_ = (bitField0_ & ~0x00004000);
      }
      result.stress4UpS_ = stress4UpS_;
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        stress4DownS_ = java.util.Collections.unmodifiableList(stress4DownS_);
        bitField0_ = (bitField0_ & ~0x00008000);
      }
      result.stress4DownS_ = stress4DownS_;
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.iscas.biz.calculation.grpc.GirderStrengthResponse) {
        return mergeFrom((com.iscas.biz.calculation.grpc.GirderStrengthResponse)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.iscas.biz.calculation.grpc.GirderStrengthResponse other) {
      if (other == com.iscas.biz.calculation.grpc.GirderStrengthResponse.getDefaultInstance()) return this;
      if (other.getSigma1SH() != 0D) {
        setSigma1SH(other.getSigma1SH());
      }
      if (other.getSigma1MidH() != 0D) {
        setSigma1MidH(other.getSigma1MidH());
      }
      if (other.getSigma1SS() != 0D) {
        setSigma1SS(other.getSigma1SS());
      }
      if (other.getSigma1MidS() != 0D) {
        setSigma1MidS(other.getSigma1MidS());
      }
      if (!other.stress2SH_.isEmpty()) {
        if (stress2SH_.isEmpty()) {
          stress2SH_ = other.stress2SH_;
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          ensureStress2SHIsMutable();
          stress2SH_.addAll(other.stress2SH_);
        }
        onChanged();
      }
      if (!other.stress2MidH_.isEmpty()) {
        if (stress2MidH_.isEmpty()) {
          stress2MidH_ = other.stress2MidH_;
          bitField0_ = (bitField0_ & ~0x00000020);
        } else {
          ensureStress2MidHIsMutable();
          stress2MidH_.addAll(other.stress2MidH_);
        }
        onChanged();
      }
      if (!other.stress3UpH_.isEmpty()) {
        if (stress3UpH_.isEmpty()) {
          stress3UpH_ = other.stress3UpH_;
          bitField0_ = (bitField0_ & ~0x00000040);
        } else {
          ensureStress3UpHIsMutable();
          stress3UpH_.addAll(other.stress3UpH_);
        }
        onChanged();
      }
      if (!other.stress3DownH_.isEmpty()) {
        if (stress3DownH_.isEmpty()) {
          stress3DownH_ = other.stress3DownH_;
          bitField0_ = (bitField0_ & ~0x00000080);
        } else {
          ensureStress3DownHIsMutable();
          stress3DownH_.addAll(other.stress3DownH_);
        }
        onChanged();
      }
      if (!other.stress4UpH_.isEmpty()) {
        if (stress4UpH_.isEmpty()) {
          stress4UpH_ = other.stress4UpH_;
          bitField0_ = (bitField0_ & ~0x00000100);
        } else {
          ensureStress4UpHIsMutable();
          stress4UpH_.addAll(other.stress4UpH_);
        }
        onChanged();
      }
      if (!other.stress4DownH_.isEmpty()) {
        if (stress4DownH_.isEmpty()) {
          stress4DownH_ = other.stress4DownH_;
          bitField0_ = (bitField0_ & ~0x00000200);
        } else {
          ensureStress4DownHIsMutable();
          stress4DownH_.addAll(other.stress4DownH_);
        }
        onChanged();
      }
      if (!other.stress2SS_.isEmpty()) {
        if (stress2SS_.isEmpty()) {
          stress2SS_ = other.stress2SS_;
          bitField0_ = (bitField0_ & ~0x00000400);
        } else {
          ensureStress2SSIsMutable();
          stress2SS_.addAll(other.stress2SS_);
        }
        onChanged();
      }
      if (!other.stress2MidS_.isEmpty()) {
        if (stress2MidS_.isEmpty()) {
          stress2MidS_ = other.stress2MidS_;
          bitField0_ = (bitField0_ & ~0x00000800);
        } else {
          ensureStress2MidSIsMutable();
          stress2MidS_.addAll(other.stress2MidS_);
        }
        onChanged();
      }
      if (!other.stress3UpS_.isEmpty()) {
        if (stress3UpS_.isEmpty()) {
          stress3UpS_ = other.stress3UpS_;
          bitField0_ = (bitField0_ & ~0x00001000);
        } else {
          ensureStress3UpSIsMutable();
          stress3UpS_.addAll(other.stress3UpS_);
        }
        onChanged();
      }
      if (!other.stress3DownS_.isEmpty()) {
        if (stress3DownS_.isEmpty()) {
          stress3DownS_ = other.stress3DownS_;
          bitField0_ = (bitField0_ & ~0x00002000);
        } else {
          ensureStress3DownSIsMutable();
          stress3DownS_.addAll(other.stress3DownS_);
        }
        onChanged();
      }
      if (!other.stress4UpS_.isEmpty()) {
        if (stress4UpS_.isEmpty()) {
          stress4UpS_ = other.stress4UpS_;
          bitField0_ = (bitField0_ & ~0x00004000);
        } else {
          ensureStress4UpSIsMutable();
          stress4UpS_.addAll(other.stress4UpS_);
        }
        onChanged();
      }
      if (!other.stress4DownS_.isEmpty()) {
        if (stress4DownS_.isEmpty()) {
          stress4DownS_ = other.stress4DownS_;
          bitField0_ = (bitField0_ & ~0x00008000);
        } else {
          ensureStress4DownSIsMutable();
          stress4DownS_.addAll(other.stress4DownS_);
        }
        onChanged();
      }
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.iscas.biz.calculation.grpc.GirderStrengthResponse parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.iscas.biz.calculation.grpc.GirderStrengthResponse) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private double sigma1SH_ ;
    /**
     * <pre>
     *中拱支座处
     * </pre>
     *
     * <code>double sigma1SH = 1;</code>
     */
    public double getSigma1SH() {
      return sigma1SH_;
    }
    /**
     * <pre>
     *中拱支座处
     * </pre>
     *
     * <code>double sigma1SH = 1;</code>
     */
    public Builder setSigma1SH(double value) {
      
      sigma1SH_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *中拱支座处
     * </pre>
     *
     * <code>double sigma1SH = 1;</code>
     */
    public Builder clearSigma1SH() {
      
      sigma1SH_ = 0D;
      onChanged();
      return this;
    }

    private double sigma1MidH_ ;
    /**
     * <pre>
     *中拱跨中处
     * </pre>
     *
     * <code>double sigma1MidH = 2;</code>
     */
    public double getSigma1MidH() {
      return sigma1MidH_;
    }
    /**
     * <pre>
     *中拱跨中处
     * </pre>
     *
     * <code>double sigma1MidH = 2;</code>
     */
    public Builder setSigma1MidH(double value) {
      
      sigma1MidH_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *中拱跨中处
     * </pre>
     *
     * <code>double sigma1MidH = 2;</code>
     */
    public Builder clearSigma1MidH() {
      
      sigma1MidH_ = 0D;
      onChanged();
      return this;
    }

    private double sigma1SS_ ;
    /**
     * <pre>
     *中垂支座处
     * </pre>
     *
     * <code>double sigma1SS = 3;</code>
     */
    public double getSigma1SS() {
      return sigma1SS_;
    }
    /**
     * <pre>
     *中垂支座处
     * </pre>
     *
     * <code>double sigma1SS = 3;</code>
     */
    public Builder setSigma1SS(double value) {
      
      sigma1SS_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *中垂支座处
     * </pre>
     *
     * <code>double sigma1SS = 3;</code>
     */
    public Builder clearSigma1SS() {
      
      sigma1SS_ = 0D;
      onChanged();
      return this;
    }

    private double sigma1MidS_ ;
    /**
     * <pre>
     *中垂跨中处
     * </pre>
     *
     * <code>double sigma1MidS = 4;</code>
     */
    public double getSigma1MidS() {
      return sigma1MidS_;
    }
    /**
     * <pre>
     *中垂跨中处
     * </pre>
     *
     * <code>double sigma1MidS = 4;</code>
     */
    public Builder setSigma1MidS(double value) {
      
      sigma1MidS_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *中垂跨中处
     * </pre>
     *
     * <code>double sigma1MidS = 4;</code>
     */
    public Builder clearSigma1MidS() {
      
      sigma1MidS_ = 0D;
      onChanged();
      return this;
    }

    private java.util.List<java.lang.Double> stress2SH_ = java.util.Collections.emptyList();
    private void ensureStress2SHIsMutable() {
      if (!((bitField0_ & 0x00000010) == 0x00000010)) {
        stress2SH_ = new java.util.ArrayList<java.lang.Double>(stress2SH_);
        bitField0_ |= 0x00000010;
       }
    }
    /**
     * <pre>
     *中拱不同桁材处的支座处的sigma2
     * </pre>
     *
     * <code>repeated double stress2SH = 5;</code>
     */
    public java.util.List<java.lang.Double>
        getStress2SHList() {
      return java.util.Collections.unmodifiableList(stress2SH_);
    }
    /**
     * <pre>
     *中拱不同桁材处的支座处的sigma2
     * </pre>
     *
     * <code>repeated double stress2SH = 5;</code>
     */
    public int getStress2SHCount() {
      return stress2SH_.size();
    }
    /**
     * <pre>
     *中拱不同桁材处的支座处的sigma2
     * </pre>
     *
     * <code>repeated double stress2SH = 5;</code>
     */
    public double getStress2SH(int index) {
      return stress2SH_.get(index);
    }
    /**
     * <pre>
     *中拱不同桁材处的支座处的sigma2
     * </pre>
     *
     * <code>repeated double stress2SH = 5;</code>
     */
    public Builder setStress2SH(
        int index, double value) {
      ensureStress2SHIsMutable();
      stress2SH_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *中拱不同桁材处的支座处的sigma2
     * </pre>
     *
     * <code>repeated double stress2SH = 5;</code>
     */
    public Builder addStress2SH(double value) {
      ensureStress2SHIsMutable();
      stress2SH_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *中拱不同桁材处的支座处的sigma2
     * </pre>
     *
     * <code>repeated double stress2SH = 5;</code>
     */
    public Builder addAllStress2SH(
        java.lang.Iterable<? extends java.lang.Double> values) {
      ensureStress2SHIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, stress2SH_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *中拱不同桁材处的支座处的sigma2
     * </pre>
     *
     * <code>repeated double stress2SH = 5;</code>
     */
    public Builder clearStress2SH() {
      stress2SH_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000010);
      onChanged();
      return this;
    }

    private java.util.List<java.lang.Double> stress2MidH_ = java.util.Collections.emptyList();
    private void ensureStress2MidHIsMutable() {
      if (!((bitField0_ & 0x00000020) == 0x00000020)) {
        stress2MidH_ = new java.util.ArrayList<java.lang.Double>(stress2MidH_);
        bitField0_ |= 0x00000020;
       }
    }
    /**
     * <pre>
     *中拱不同桁材处的跨中处的sigma2
     * </pre>
     *
     * <code>repeated double stress2MidH = 6;</code>
     */
    public java.util.List<java.lang.Double>
        getStress2MidHList() {
      return java.util.Collections.unmodifiableList(stress2MidH_);
    }
    /**
     * <pre>
     *中拱不同桁材处的跨中处的sigma2
     * </pre>
     *
     * <code>repeated double stress2MidH = 6;</code>
     */
    public int getStress2MidHCount() {
      return stress2MidH_.size();
    }
    /**
     * <pre>
     *中拱不同桁材处的跨中处的sigma2
     * </pre>
     *
     * <code>repeated double stress2MidH = 6;</code>
     */
    public double getStress2MidH(int index) {
      return stress2MidH_.get(index);
    }
    /**
     * <pre>
     *中拱不同桁材处的跨中处的sigma2
     * </pre>
     *
     * <code>repeated double stress2MidH = 6;</code>
     */
    public Builder setStress2MidH(
        int index, double value) {
      ensureStress2MidHIsMutable();
      stress2MidH_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *中拱不同桁材处的跨中处的sigma2
     * </pre>
     *
     * <code>repeated double stress2MidH = 6;</code>
     */
    public Builder addStress2MidH(double value) {
      ensureStress2MidHIsMutable();
      stress2MidH_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *中拱不同桁材处的跨中处的sigma2
     * </pre>
     *
     * <code>repeated double stress2MidH = 6;</code>
     */
    public Builder addAllStress2MidH(
        java.lang.Iterable<? extends java.lang.Double> values) {
      ensureStress2MidHIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, stress2MidH_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *中拱不同桁材处的跨中处的sigma2
     * </pre>
     *
     * <code>repeated double stress2MidH = 6;</code>
     */
    public Builder clearStress2MidH() {
      stress2MidH_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000020);
      onChanged();
      return this;
    }

    private java.util.List<java.lang.Double> stress3UpH_ = java.util.Collections.emptyList();
    private void ensureStress3UpHIsMutable() {
      if (!((bitField0_ & 0x00000040) == 0x00000040)) {
        stress3UpH_ = new java.util.ArrayList<java.lang.Double>(stress3UpH_);
        bitField0_ |= 0x00000040;
       }
    }
    /**
     * <pre>
     *中拱骨材上纤维处的应力
     * </pre>
     *
     * <code>repeated double stress3UpH = 7;</code>
     */
    public java.util.List<java.lang.Double>
        getStress3UpHList() {
      return java.util.Collections.unmodifiableList(stress3UpH_);
    }
    /**
     * <pre>
     *中拱骨材上纤维处的应力
     * </pre>
     *
     * <code>repeated double stress3UpH = 7;</code>
     */
    public int getStress3UpHCount() {
      return stress3UpH_.size();
    }
    /**
     * <pre>
     *中拱骨材上纤维处的应力
     * </pre>
     *
     * <code>repeated double stress3UpH = 7;</code>
     */
    public double getStress3UpH(int index) {
      return stress3UpH_.get(index);
    }
    /**
     * <pre>
     *中拱骨材上纤维处的应力
     * </pre>
     *
     * <code>repeated double stress3UpH = 7;</code>
     */
    public Builder setStress3UpH(
        int index, double value) {
      ensureStress3UpHIsMutable();
      stress3UpH_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *中拱骨材上纤维处的应力
     * </pre>
     *
     * <code>repeated double stress3UpH = 7;</code>
     */
    public Builder addStress3UpH(double value) {
      ensureStress3UpHIsMutable();
      stress3UpH_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *中拱骨材上纤维处的应力
     * </pre>
     *
     * <code>repeated double stress3UpH = 7;</code>
     */
    public Builder addAllStress3UpH(
        java.lang.Iterable<? extends java.lang.Double> values) {
      ensureStress3UpHIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, stress3UpH_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *中拱骨材上纤维处的应力
     * </pre>
     *
     * <code>repeated double stress3UpH = 7;</code>
     */
    public Builder clearStress3UpH() {
      stress3UpH_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000040);
      onChanged();
      return this;
    }

    private java.util.List<java.lang.Double> stress3DownH_ = java.util.Collections.emptyList();
    private void ensureStress3DownHIsMutable() {
      if (!((bitField0_ & 0x00000080) == 0x00000080)) {
        stress3DownH_ = new java.util.ArrayList<java.lang.Double>(stress3DownH_);
        bitField0_ |= 0x00000080;
       }
    }
    /**
     * <pre>
     *中拱骨材下纤维处的应力
     * </pre>
     *
     * <code>repeated double stress3DownH = 8;</code>
     */
    public java.util.List<java.lang.Double>
        getStress3DownHList() {
      return java.util.Collections.unmodifiableList(stress3DownH_);
    }
    /**
     * <pre>
     *中拱骨材下纤维处的应力
     * </pre>
     *
     * <code>repeated double stress3DownH = 8;</code>
     */
    public int getStress3DownHCount() {
      return stress3DownH_.size();
    }
    /**
     * <pre>
     *中拱骨材下纤维处的应力
     * </pre>
     *
     * <code>repeated double stress3DownH = 8;</code>
     */
    public double getStress3DownH(int index) {
      return stress3DownH_.get(index);
    }
    /**
     * <pre>
     *中拱骨材下纤维处的应力
     * </pre>
     *
     * <code>repeated double stress3DownH = 8;</code>
     */
    public Builder setStress3DownH(
        int index, double value) {
      ensureStress3DownHIsMutable();
      stress3DownH_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *中拱骨材下纤维处的应力
     * </pre>
     *
     * <code>repeated double stress3DownH = 8;</code>
     */
    public Builder addStress3DownH(double value) {
      ensureStress3DownHIsMutable();
      stress3DownH_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *中拱骨材下纤维处的应力
     * </pre>
     *
     * <code>repeated double stress3DownH = 8;</code>
     */
    public Builder addAllStress3DownH(
        java.lang.Iterable<? extends java.lang.Double> values) {
      ensureStress3DownHIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, stress3DownH_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *中拱骨材下纤维处的应力
     * </pre>
     *
     * <code>repeated double stress3DownH = 8;</code>
     */
    public Builder clearStress3DownH() {
      stress3DownH_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000080);
      onChanged();
      return this;
    }

    private java.util.List<java.lang.Double> stress4UpH_ = java.util.Collections.emptyList();
    private void ensureStress4UpHIsMutable() {
      if (!((bitField0_ & 0x00000100) == 0x00000100)) {
        stress4UpH_ = new java.util.ArrayList<java.lang.Double>(stress4UpH_);
        bitField0_ |= 0x00000100;
       }
    }
    /**
     * <pre>
     *中拱板格的上表面
     * </pre>
     *
     * <code>repeated double stress4UpH = 9;</code>
     */
    public java.util.List<java.lang.Double>
        getStress4UpHList() {
      return java.util.Collections.unmodifiableList(stress4UpH_);
    }
    /**
     * <pre>
     *中拱板格的上表面
     * </pre>
     *
     * <code>repeated double stress4UpH = 9;</code>
     */
    public int getStress4UpHCount() {
      return stress4UpH_.size();
    }
    /**
     * <pre>
     *中拱板格的上表面
     * </pre>
     *
     * <code>repeated double stress4UpH = 9;</code>
     */
    public double getStress4UpH(int index) {
      return stress4UpH_.get(index);
    }
    /**
     * <pre>
     *中拱板格的上表面
     * </pre>
     *
     * <code>repeated double stress4UpH = 9;</code>
     */
    public Builder setStress4UpH(
        int index, double value) {
      ensureStress4UpHIsMutable();
      stress4UpH_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *中拱板格的上表面
     * </pre>
     *
     * <code>repeated double stress4UpH = 9;</code>
     */
    public Builder addStress4UpH(double value) {
      ensureStress4UpHIsMutable();
      stress4UpH_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *中拱板格的上表面
     * </pre>
     *
     * <code>repeated double stress4UpH = 9;</code>
     */
    public Builder addAllStress4UpH(
        java.lang.Iterable<? extends java.lang.Double> values) {
      ensureStress4UpHIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, stress4UpH_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *中拱板格的上表面
     * </pre>
     *
     * <code>repeated double stress4UpH = 9;</code>
     */
    public Builder clearStress4UpH() {
      stress4UpH_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000100);
      onChanged();
      return this;
    }

    private java.util.List<java.lang.Double> stress4DownH_ = java.util.Collections.emptyList();
    private void ensureStress4DownHIsMutable() {
      if (!((bitField0_ & 0x00000200) == 0x00000200)) {
        stress4DownH_ = new java.util.ArrayList<java.lang.Double>(stress4DownH_);
        bitField0_ |= 0x00000200;
       }
    }
    /**
     * <pre>
     *中拱板格的下表面
     * </pre>
     *
     * <code>repeated double stress4downH = 10;</code>
     */
    public java.util.List<java.lang.Double>
        getStress4DownHList() {
      return java.util.Collections.unmodifiableList(stress4DownH_);
    }
    /**
     * <pre>
     *中拱板格的下表面
     * </pre>
     *
     * <code>repeated double stress4downH = 10;</code>
     */
    public int getStress4DownHCount() {
      return stress4DownH_.size();
    }
    /**
     * <pre>
     *中拱板格的下表面
     * </pre>
     *
     * <code>repeated double stress4downH = 10;</code>
     */
    public double getStress4DownH(int index) {
      return stress4DownH_.get(index);
    }
    /**
     * <pre>
     *中拱板格的下表面
     * </pre>
     *
     * <code>repeated double stress4downH = 10;</code>
     */
    public Builder setStress4DownH(
        int index, double value) {
      ensureStress4DownHIsMutable();
      stress4DownH_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *中拱板格的下表面
     * </pre>
     *
     * <code>repeated double stress4downH = 10;</code>
     */
    public Builder addStress4DownH(double value) {
      ensureStress4DownHIsMutable();
      stress4DownH_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *中拱板格的下表面
     * </pre>
     *
     * <code>repeated double stress4downH = 10;</code>
     */
    public Builder addAllStress4DownH(
        java.lang.Iterable<? extends java.lang.Double> values) {
      ensureStress4DownHIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, stress4DownH_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *中拱板格的下表面
     * </pre>
     *
     * <code>repeated double stress4downH = 10;</code>
     */
    public Builder clearStress4DownH() {
      stress4DownH_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000200);
      onChanged();
      return this;
    }

    private java.util.List<java.lang.Double> stress2SS_ = java.util.Collections.emptyList();
    private void ensureStress2SSIsMutable() {
      if (!((bitField0_ & 0x00000400) == 0x00000400)) {
        stress2SS_ = new java.util.ArrayList<java.lang.Double>(stress2SS_);
        bitField0_ |= 0x00000400;
       }
    }
    /**
     * <pre>
     *中垂不同桁材处的支座处的sigma2
     * </pre>
     *
     * <code>repeated double stress2SS = 11;</code>
     */
    public java.util.List<java.lang.Double>
        getStress2SSList() {
      return java.util.Collections.unmodifiableList(stress2SS_);
    }
    /**
     * <pre>
     *中垂不同桁材处的支座处的sigma2
     * </pre>
     *
     * <code>repeated double stress2SS = 11;</code>
     */
    public int getStress2SSCount() {
      return stress2SS_.size();
    }
    /**
     * <pre>
     *中垂不同桁材处的支座处的sigma2
     * </pre>
     *
     * <code>repeated double stress2SS = 11;</code>
     */
    public double getStress2SS(int index) {
      return stress2SS_.get(index);
    }
    /**
     * <pre>
     *中垂不同桁材处的支座处的sigma2
     * </pre>
     *
     * <code>repeated double stress2SS = 11;</code>
     */
    public Builder setStress2SS(
        int index, double value) {
      ensureStress2SSIsMutable();
      stress2SS_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *中垂不同桁材处的支座处的sigma2
     * </pre>
     *
     * <code>repeated double stress2SS = 11;</code>
     */
    public Builder addStress2SS(double value) {
      ensureStress2SSIsMutable();
      stress2SS_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *中垂不同桁材处的支座处的sigma2
     * </pre>
     *
     * <code>repeated double stress2SS = 11;</code>
     */
    public Builder addAllStress2SS(
        java.lang.Iterable<? extends java.lang.Double> values) {
      ensureStress2SSIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, stress2SS_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *中垂不同桁材处的支座处的sigma2
     * </pre>
     *
     * <code>repeated double stress2SS = 11;</code>
     */
    public Builder clearStress2SS() {
      stress2SS_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000400);
      onChanged();
      return this;
    }

    private java.util.List<java.lang.Double> stress2MidS_ = java.util.Collections.emptyList();
    private void ensureStress2MidSIsMutable() {
      if (!((bitField0_ & 0x00000800) == 0x00000800)) {
        stress2MidS_ = new java.util.ArrayList<java.lang.Double>(stress2MidS_);
        bitField0_ |= 0x00000800;
       }
    }
    /**
     * <pre>
     *中垂不同桁材处的跨中处的sigma2
     * </pre>
     *
     * <code>repeated double stress2MidS = 12;</code>
     */
    public java.util.List<java.lang.Double>
        getStress2MidSList() {
      return java.util.Collections.unmodifiableList(stress2MidS_);
    }
    /**
     * <pre>
     *中垂不同桁材处的跨中处的sigma2
     * </pre>
     *
     * <code>repeated double stress2MidS = 12;</code>
     */
    public int getStress2MidSCount() {
      return stress2MidS_.size();
    }
    /**
     * <pre>
     *中垂不同桁材处的跨中处的sigma2
     * </pre>
     *
     * <code>repeated double stress2MidS = 12;</code>
     */
    public double getStress2MidS(int index) {
      return stress2MidS_.get(index);
    }
    /**
     * <pre>
     *中垂不同桁材处的跨中处的sigma2
     * </pre>
     *
     * <code>repeated double stress2MidS = 12;</code>
     */
    public Builder setStress2MidS(
        int index, double value) {
      ensureStress2MidSIsMutable();
      stress2MidS_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *中垂不同桁材处的跨中处的sigma2
     * </pre>
     *
     * <code>repeated double stress2MidS = 12;</code>
     */
    public Builder addStress2MidS(double value) {
      ensureStress2MidSIsMutable();
      stress2MidS_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *中垂不同桁材处的跨中处的sigma2
     * </pre>
     *
     * <code>repeated double stress2MidS = 12;</code>
     */
    public Builder addAllStress2MidS(
        java.lang.Iterable<? extends java.lang.Double> values) {
      ensureStress2MidSIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, stress2MidS_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *中垂不同桁材处的跨中处的sigma2
     * </pre>
     *
     * <code>repeated double stress2MidS = 12;</code>
     */
    public Builder clearStress2MidS() {
      stress2MidS_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000800);
      onChanged();
      return this;
    }

    private java.util.List<java.lang.Double> stress3UpS_ = java.util.Collections.emptyList();
    private void ensureStress3UpSIsMutable() {
      if (!((bitField0_ & 0x00001000) == 0x00001000)) {
        stress3UpS_ = new java.util.ArrayList<java.lang.Double>(stress3UpS_);
        bitField0_ |= 0x00001000;
       }
    }
    /**
     * <pre>
     *中垂骨材上纤维处的应力
     * </pre>
     *
     * <code>repeated double stress3UpS = 13;</code>
     */
    public java.util.List<java.lang.Double>
        getStress3UpSList() {
      return java.util.Collections.unmodifiableList(stress3UpS_);
    }
    /**
     * <pre>
     *中垂骨材上纤维处的应力
     * </pre>
     *
     * <code>repeated double stress3UpS = 13;</code>
     */
    public int getStress3UpSCount() {
      return stress3UpS_.size();
    }
    /**
     * <pre>
     *中垂骨材上纤维处的应力
     * </pre>
     *
     * <code>repeated double stress3UpS = 13;</code>
     */
    public double getStress3UpS(int index) {
      return stress3UpS_.get(index);
    }
    /**
     * <pre>
     *中垂骨材上纤维处的应力
     * </pre>
     *
     * <code>repeated double stress3UpS = 13;</code>
     */
    public Builder setStress3UpS(
        int index, double value) {
      ensureStress3UpSIsMutable();
      stress3UpS_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *中垂骨材上纤维处的应力
     * </pre>
     *
     * <code>repeated double stress3UpS = 13;</code>
     */
    public Builder addStress3UpS(double value) {
      ensureStress3UpSIsMutable();
      stress3UpS_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *中垂骨材上纤维处的应力
     * </pre>
     *
     * <code>repeated double stress3UpS = 13;</code>
     */
    public Builder addAllStress3UpS(
        java.lang.Iterable<? extends java.lang.Double> values) {
      ensureStress3UpSIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, stress3UpS_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *中垂骨材上纤维处的应力
     * </pre>
     *
     * <code>repeated double stress3UpS = 13;</code>
     */
    public Builder clearStress3UpS() {
      stress3UpS_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00001000);
      onChanged();
      return this;
    }

    private java.util.List<java.lang.Double> stress3DownS_ = java.util.Collections.emptyList();
    private void ensureStress3DownSIsMutable() {
      if (!((bitField0_ & 0x00002000) == 0x00002000)) {
        stress3DownS_ = new java.util.ArrayList<java.lang.Double>(stress3DownS_);
        bitField0_ |= 0x00002000;
       }
    }
    /**
     * <pre>
     *中垂骨材下纤维处的应力
     * </pre>
     *
     * <code>repeated double stress3DownS = 14;</code>
     */
    public java.util.List<java.lang.Double>
        getStress3DownSList() {
      return java.util.Collections.unmodifiableList(stress3DownS_);
    }
    /**
     * <pre>
     *中垂骨材下纤维处的应力
     * </pre>
     *
     * <code>repeated double stress3DownS = 14;</code>
     */
    public int getStress3DownSCount() {
      return stress3DownS_.size();
    }
    /**
     * <pre>
     *中垂骨材下纤维处的应力
     * </pre>
     *
     * <code>repeated double stress3DownS = 14;</code>
     */
    public double getStress3DownS(int index) {
      return stress3DownS_.get(index);
    }
    /**
     * <pre>
     *中垂骨材下纤维处的应力
     * </pre>
     *
     * <code>repeated double stress3DownS = 14;</code>
     */
    public Builder setStress3DownS(
        int index, double value) {
      ensureStress3DownSIsMutable();
      stress3DownS_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *中垂骨材下纤维处的应力
     * </pre>
     *
     * <code>repeated double stress3DownS = 14;</code>
     */
    public Builder addStress3DownS(double value) {
      ensureStress3DownSIsMutable();
      stress3DownS_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *中垂骨材下纤维处的应力
     * </pre>
     *
     * <code>repeated double stress3DownS = 14;</code>
     */
    public Builder addAllStress3DownS(
        java.lang.Iterable<? extends java.lang.Double> values) {
      ensureStress3DownSIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, stress3DownS_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *中垂骨材下纤维处的应力
     * </pre>
     *
     * <code>repeated double stress3DownS = 14;</code>
     */
    public Builder clearStress3DownS() {
      stress3DownS_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00002000);
      onChanged();
      return this;
    }

    private java.util.List<java.lang.Double> stress4UpS_ = java.util.Collections.emptyList();
    private void ensureStress4UpSIsMutable() {
      if (!((bitField0_ & 0x00004000) == 0x00004000)) {
        stress4UpS_ = new java.util.ArrayList<java.lang.Double>(stress4UpS_);
        bitField0_ |= 0x00004000;
       }
    }
    /**
     * <pre>
     *中垂板格的上表面
     * </pre>
     *
     * <code>repeated double stress4UpS = 15;</code>
     */
    public java.util.List<java.lang.Double>
        getStress4UpSList() {
      return java.util.Collections.unmodifiableList(stress4UpS_);
    }
    /**
     * <pre>
     *中垂板格的上表面
     * </pre>
     *
     * <code>repeated double stress4UpS = 15;</code>
     */
    public int getStress4UpSCount() {
      return stress4UpS_.size();
    }
    /**
     * <pre>
     *中垂板格的上表面
     * </pre>
     *
     * <code>repeated double stress4UpS = 15;</code>
     */
    public double getStress4UpS(int index) {
      return stress4UpS_.get(index);
    }
    /**
     * <pre>
     *中垂板格的上表面
     * </pre>
     *
     * <code>repeated double stress4UpS = 15;</code>
     */
    public Builder setStress4UpS(
        int index, double value) {
      ensureStress4UpSIsMutable();
      stress4UpS_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *中垂板格的上表面
     * </pre>
     *
     * <code>repeated double stress4UpS = 15;</code>
     */
    public Builder addStress4UpS(double value) {
      ensureStress4UpSIsMutable();
      stress4UpS_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *中垂板格的上表面
     * </pre>
     *
     * <code>repeated double stress4UpS = 15;</code>
     */
    public Builder addAllStress4UpS(
        java.lang.Iterable<? extends java.lang.Double> values) {
      ensureStress4UpSIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, stress4UpS_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *中垂板格的上表面
     * </pre>
     *
     * <code>repeated double stress4UpS = 15;</code>
     */
    public Builder clearStress4UpS() {
      stress4UpS_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00004000);
      onChanged();
      return this;
    }

    private java.util.List<java.lang.Double> stress4DownS_ = java.util.Collections.emptyList();
    private void ensureStress4DownSIsMutable() {
      if (!((bitField0_ & 0x00008000) == 0x00008000)) {
        stress4DownS_ = new java.util.ArrayList<java.lang.Double>(stress4DownS_);
        bitField0_ |= 0x00008000;
       }
    }
    /**
     * <pre>
     *中垂板格的下表面
     * </pre>
     *
     * <code>repeated double stress4downS = 16;</code>
     */
    public java.util.List<java.lang.Double>
        getStress4DownSList() {
      return java.util.Collections.unmodifiableList(stress4DownS_);
    }
    /**
     * <pre>
     *中垂板格的下表面
     * </pre>
     *
     * <code>repeated double stress4downS = 16;</code>
     */
    public int getStress4DownSCount() {
      return stress4DownS_.size();
    }
    /**
     * <pre>
     *中垂板格的下表面
     * </pre>
     *
     * <code>repeated double stress4downS = 16;</code>
     */
    public double getStress4DownS(int index) {
      return stress4DownS_.get(index);
    }
    /**
     * <pre>
     *中垂板格的下表面
     * </pre>
     *
     * <code>repeated double stress4downS = 16;</code>
     */
    public Builder setStress4DownS(
        int index, double value) {
      ensureStress4DownSIsMutable();
      stress4DownS_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *中垂板格的下表面
     * </pre>
     *
     * <code>repeated double stress4downS = 16;</code>
     */
    public Builder addStress4DownS(double value) {
      ensureStress4DownSIsMutable();
      stress4DownS_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *中垂板格的下表面
     * </pre>
     *
     * <code>repeated double stress4downS = 16;</code>
     */
    public Builder addAllStress4DownS(
        java.lang.Iterable<? extends java.lang.Double> values) {
      ensureStress4DownSIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, stress4DownS_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *中垂板格的下表面
     * </pre>
     *
     * <code>repeated double stress4downS = 16;</code>
     */
    public Builder clearStress4DownS() {
      stress4DownS_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00008000);
      onChanged();
      return this;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }


    // @@protoc_insertion_point(builder_scope:com.iscas.biz.calculation.grpc.GirderStrengthResponse)
  }

  // @@protoc_insertion_point(class_scope:com.iscas.biz.calculation.grpc.GirderStrengthResponse)
  private static final com.iscas.biz.calculation.grpc.GirderStrengthResponse DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.iscas.biz.calculation.grpc.GirderStrengthResponse();
  }

  public static com.iscas.biz.calculation.grpc.GirderStrengthResponse getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<GirderStrengthResponse>
      PARSER = new com.google.protobuf.AbstractParser<GirderStrengthResponse>() {
    public GirderStrengthResponse parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
        return new GirderStrengthResponse(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<GirderStrengthResponse> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<GirderStrengthResponse> getParserForType() {
    return PARSER;
  }

  public com.iscas.biz.calculation.grpc.GirderStrengthResponse getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

